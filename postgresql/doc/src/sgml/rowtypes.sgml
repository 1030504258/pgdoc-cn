<!-- doc/src/sgml/rowtypes.sgml -->

<sect1 id="rowtypes">
<!--==========================orignal english content==========================
 <title>Composite Types</title>
____________________________________________________________________________-->
 <title>组合类型</title>

<!--==========================orignal english content==========================
 <indexterm>
  <primary>composite type</primary>
 </indexterm>
____________________________________________________________________________-->
 <indexterm>
  <primary>组合类型</primary>
 </indexterm>

<!--==========================orignal english content==========================
 <indexterm>
  <primary>row type</primary>
 </indexterm>
____________________________________________________________________________-->
 <indexterm>
  <primary>行类型</primary>
 </indexterm>

<!--==========================orignal english content==========================
 <para>
  A <firstterm>composite type</> represents the structure of a row or record;
  it is essentially just a list of field names and their data types.
  <productname>PostgreSQL</productname> allows  composite types to be
  used in many of the same ways that simple types can be used.  For example, a
  column of a table can be declared to be of a composite type.
 </para>
____________________________________________________________________________-->
 <para>
  一个<firstterm>组合类型</>表示一行或一个记录的结构，它本质上就是一个域名和它们数据类型的列表。<productname>PostgreSQL</productname>允许把组合类型用在很多能用简单类型的地方。例如，一个表的一列可以被声明为一种组合类型。
 </para>

 <sect2>
<!--==========================orignal english content==========================
  <title>Declaration of Composite Types</title>
____________________________________________________________________________-->
  <title>组合类型的声明</title>

<!--==========================orignal english content==========================
 <para>
  Here are two simple examples of defining composite types:
<programlisting>
CREATE TYPE complex AS (
    r       double precision,
    i       double precision
);

CREATE TYPE inventory_item AS (
    name            text,
    supplier_id     integer,
    price           numeric
);
</programlisting>
  The syntax is comparable to <command>CREATE TABLE</>, except that only
  field names and types can be specified; no constraints (such as <literal>NOT
  NULL</>) can presently be included.  Note that the <literal>AS</> keyword
  is essential; without it, the system will think a different kind
  of <command>CREATE TYPE</> command is meant, and you will get odd syntax
  errors.
 </para>
____________________________________________________________________________-->
 <para>
  这里有两个定义组合类型的简单例子：
<programlisting>
CREATE TYPE complex AS (
    r       double precision,
    i       double precision
);

CREATE TYPE inventory_item AS (
    name            text,
    supplier_id     integer,
    price           numeric
);
</programlisting>
  该语法堪比<command>CREATE TABLE</>，不过只能指定域名和类型，当前不能包括约束（例如<literal>NOT NULL</>）。注意<literal>AS</>关键词是必不可少的，如果没有它，系统将认为用户想要的是一种不同类型的<command>CREATE TYPE</>命令，并且你将得到奇怪的语法错误。
 </para>

<!--==========================orignal english content==========================
 <para>
  Having defined the types, we can use them to create tables:

<programlisting>
CREATE TABLE on_hand (
    item      inventory_item,
    count     integer
);

INSERT INTO on_hand VALUES (ROW('fuzzy dice', 42, 1.99), 1000);
</programlisting>

  or functions:

<programlisting>
CREATE FUNCTION price_extension(inventory_item, integer) RETURNS numeric
AS 'SELECT $1.price * $2' LANGUAGE SQL;

SELECT price_extension(item, 10) FROM on_hand;
</programlisting>

 </para>
____________________________________________________________________________-->
 <para>
  定义了类型之后，我们可以用它们来创建表：

<programlisting>
CREATE TABLE on_hand (
    item      inventory_item,
    count     integer
);

INSERT INTO on_hand VALUES (ROW('fuzzy dice', 42, 1.99), 1000);
</programlisting>

  or functions:

<programlisting>
CREATE FUNCTION price_extension(inventory_item, integer) RETURNS numeric
AS 'SELECT $1.price * $2' LANGUAGE SQL;

SELECT price_extension(item, 10) FROM on_hand;
</programlisting>

 </para>

<!--==========================orignal english content==========================
 <para>
  Whenever you create a table, a composite type is also automatically
  created, with the same name as the table, to represent the table's
  row type.  For example, had we said:
<programlisting>
CREATE TABLE inventory_item (
    name            text,
    supplier_id     integer REFERENCES suppliers,
    price           numeric CHECK (price &gt; 0)
);
</programlisting>
  then the same <literal>inventory_item</> composite type shown above would
  come into being as a
  byproduct, and could be used just as above.  Note however an important
  restriction of the current implementation: since no constraints are
  associated with a composite type, the constraints shown in the table
  definition <emphasis>do not apply</> to values of the composite type
  outside the table.  (A partial workaround is to use domain
  types as members of composite types.)
 </para>
____________________________________________________________________________-->
 <para>
  只要你创建了一个表，也会自动创建一个组合类型来表示表的行类型，它具有和表一样的名称。例如，如果我们说：
<programlisting>
CREATE TABLE inventory_item (
    name            text,
    supplier_id     integer REFERENCES suppliers,
    price           numeric CHECK (price &gt; 0)
);
</programlisting>
  那么和上面所示相同的<literal>inventory_item</>组合类型将成为一种副产品，并且可以按上面所说的进行使用。不过要注意当前实现的一个重要限制：因为没有约束与一个组合类型相关，显示在表定义中的约束<emphasis>不会应用</>于表外组合类型的值（一种部分的变通方案是用域类型作为组合类型的成员）。
 </para>
 </sect2>

 <sect2>
<!--==========================orignal english content==========================
  <title>Composite Value Input</title>
____________________________________________________________________________-->
  <title>组合值输入</title>

<!--==========================orignal english content==========================
  <indexterm>
   <primary>composite type</primary>
   <secondary>constant</secondary>
  </indexterm>
____________________________________________________________________________-->
  <indexterm>
   <primary>组合类型</primary>
   <secondary>常量</secondary>
  </indexterm>

<!--==========================orignal english content==========================
  <para>
   To write a composite value as a literal constant, enclose the field
   values within parentheses and separate them by commas.  You can put double
   quotes around any field value, and must do so if it contains commas or
   parentheses.  (More details appear below.)  Thus, the general format of a
   composite constant is the following:
<synopsis>
'( <replaceable>val1</replaceable> , <replaceable>val2</replaceable> , ... )'
</synopsis>
   An example is:
<programlisting>
'("fuzzy dice",42,1.99)'
</programlisting>
   which would be a valid value of the <literal>inventory_item</> type
   defined above.  To make a field be NULL, write no characters at all
   in its position in the list.  For example, this constant specifies
   a NULL third field:
<programlisting>
'("fuzzy dice",42,)'
</programlisting>
   If you want an empty string rather than NULL, write double quotes:
<programlisting>
'("",42,)'
</programlisting>
   Here the first field is a non-NULL empty string, the third is NULL.
  </para>
____________________________________________________________________________-->
  <para>
   要把一个组合值写作一个文字常量，将该域值封闭在圆括号中并且用逗号分隔它们。你可以在任何域值周围放上双引号，并且如果该域值包含逗号或圆括号则必须这样做（更多细节见下文）。这样，一个组合常量的一般格式是下面这样的：
<synopsis>
'( <replaceable>val1</replaceable> , <replaceable>val2</replaceable> , ... )'
</synopsis>
   一个例子是：
<programlisting>
'("fuzzy dice",42,1.99)'
</programlisting>
   这将是上文定义的<literal>inventory_item</>类型的一个合法值。要让一个域为 NULL，在列表中它的位置上根本不写字符。例如，这个常量指定其第三个域为 NULL：
<programlisting>
'("fuzzy dice",42,)'
</programlisting>
   如果你写一个空字符串而不是 NULL，写上两个引号：
<programlisting>
'("",42,)'
</programlisting>
   这里第一个域是一个非 NULL 空字符串，第三个是 NULL。
  </para>

<!--==========================orignal english content==========================
  <para>
   (These constants are actually only a special case of
   the generic type constants discussed in <xref
   linkend="sql-syntax-constants-generic">.  The constant is initially
   treated as a string and passed to the composite-type input conversion
   routine.  An explicit type specification might be necessary.)
  </para>
____________________________________________________________________________-->
  <para>
   （这些常量实际上只是<xref linkend="sql-syntax-constants-generic">中讨论的一般类型常量的特殊类型。该常量最初被当做一个字符串并且被传递给组合类型输入转换例程。一次显式类型说明可能是必要的）。
  </para>

<!--==========================orignal english content==========================
 <para>
  The <literal>ROW</literal> expression syntax can also be used to
  construct composite values.  In most cases this is considerably
  simpler to use than the string-literal syntax since you don't have
  to worry about multiple layers of quoting.  We already used this
  method above:
<programlisting>
ROW('fuzzy dice', 42, 1.99)
ROW('', 42, NULL)
</programlisting>
  The ROW keyword is actually optional as long as you have more than one
  field in the expression, so these can simplify to:
<programlisting>
('fuzzy dice', 42, 1.99)
('', 42, NULL)
</programlisting>
  The <literal>ROW</> expression syntax is discussed in more detail in <xref
  linkend="sql-syntax-row-constructors">.
 </para>
____________________________________________________________________________-->
 <para>
  <literal>ROW</literal>表达式也能被用来构建组合值。在大部分情况下，比起使用字符串语法，这相当简单易用，因为你不必担心多层引用。我们已经在上文用过这种方法：
<programlisting>
ROW('fuzzy dice', 42, 1.99)
ROW('', 42, NULL)
</programlisting>
  只要在表达式中有多于一个域，ROW 关键词实际上就是可选的，因此这些可以简化成：
<programlisting>
('fuzzy dice', 42, 1.99)
('', 42, NULL)
</programlisting>
  <xref linkend="sql-syntax-row-constructors">中更加详细地讨论了<literal>ROW</>表达式语法。
 </para>
 </sect2>

 <sect2>
<!--==========================orignal english content==========================
  <title>Accessing Composite Types</title>
____________________________________________________________________________-->
  <title>访问组合类型</title>

<!--==========================orignal english content==========================
 <para>
  To access a field of a composite column, one writes a dot and the field
  name, much like selecting a field from a table name.  In fact, it's so
  much like selecting from a table name that you often have to use parentheses
  to keep from confusing the parser.  For example, you might try to select
  some subfields from our <literal>on_hand</> example table with something
  like:

<programlisting>
SELECT item.name FROM on_hand WHERE item.price &gt; 9.99;
</programlisting>

  This will not work since the name <literal>item</> is taken to be a table
  name, not a column name of <literal>on_hand</>, per SQL syntax rules.
  You must write it like this:

<programlisting>
SELECT (item).name FROM on_hand WHERE (item).price &gt; 9.99;
</programlisting>

  or if you need to use the table name as well (for instance in a multitable
  query), like this:

<programlisting>
SELECT (on_hand.item).name FROM on_hand WHERE (on_hand.item).price &gt; 9.99;
</programlisting>

  Now the parenthesized object is correctly interpreted as a reference to
  the <literal>item</> column, and then the subfield can be selected from it.
 </para>
____________________________________________________________________________-->
 <para>
  要访问一个组合列的一个域，可以写成一个点和域的名称，更像从一个表名中选择一个域。事实上，它太像从一个表名中选择，这样我们不得不使用圆括号来避免让解析器混淆。例如，你可能尝试从例子表<literal>on_hand</>中选取一些子域：

<programlisting>
SELECT item.name FROM on_hand WHERE item.price &gt; 9.99;
</programlisting>

  这不会有用，因为名称<literal>item</>会被当成是一个表名，而不是<literal>on_hand</>的一个列名。你必须写成这样：

<programlisting>
SELECT (item).name FROM on_hand WHERE (item).price &gt; 9.99;
</programlisting>

  或者你还需要使用表名（例如在一个多表查询中），像这样：

<programlisting>
SELECT (on_hand.item).name FROM on_hand WHERE (on_hand.item).price &gt; 9.99;
</programlisting>

  现在加上括号的对象就被正确地解释为对<literal>item</>列的引用，然后可以从中选出子域。
 </para>

<!--==========================orignal english content==========================
 <para>
  Similar syntactic issues apply whenever you select a field from a composite
  value.  For instance, to select just one field from the result of a function
  that returns a composite value, you'd need to write something like:

<programlisting>
SELECT (my_func(...)).field FROM ...
</programlisting>

  Without the extra parentheses, this will generate a syntax error.
 </para>
____________________________________________________________________________-->
 <para>
  只要你从一个组合值中选择一个域，相似的语法问题就适用。例如，要从一个返回组合值的函数的结果中选取一个域，你需要这样写：

<programlisting>
SELECT (my_func(...)).field FROM ...
</programlisting>

  如果没有额外的圆括号，这将生成一个语法错误。
 </para>
 </sect2>

 <sect2>
<!--==========================orignal english content==========================
  <title>Modifying Composite Types</title>
____________________________________________________________________________-->
  <title>修改组合类型</title>

<!--==========================orignal english content==========================
 <para>
  Here are some examples of the proper syntax for inserting and updating
  composite columns.
  First, inserting or updating a whole column:

<programlisting>
INSERT INTO mytab (complex_col) VALUES((1.1,2.2));

UPDATE mytab SET complex_col = ROW(1.1,2.2) WHERE ...;
</programlisting>

  The first example omits <literal>ROW</>, the second uses it; we
  could have done it either way.
 </para>
____________________________________________________________________________-->
 <para>
  这里有一些插入和更新组合列的正确语法的例子。首先，插入或者更新一整个列：

<programlisting>
INSERT INTO mytab (complex_col) VALUES((1.1,2.2));

UPDATE mytab SET complex_col = ROW(1.1,2.2) WHERE ...;
</programlisting>

  第一个例子忽略<literal>ROW</>，第二个例子使用它，我们可以用两者之一完成。
 </para>

<!--==========================orignal english content==========================
 <para>
  We can update an individual subfield of a composite column:

<programlisting>
UPDATE mytab SET complex_col.r = (complex_col).r + 1 WHERE ...;
</programlisting>

  Notice here that we don't need to (and indeed cannot)
  put parentheses around the column name appearing just after
  <literal>SET</>, but we do need parentheses when referencing the same
  column in the expression to the right of the equal sign.
 </para>
____________________________________________________________________________-->
 <para>
  我们能够更新一个组合列的单个子域：

<programlisting>
UPDATE mytab SET complex_col.r = (complex_col).r + 1 WHERE ...;
</programlisting>

  注意这里我们不需要（事实上也不能）把圆括号放在正好出现在<literal>SET</>之后的列名周围，但是当在等号右边的表达式中引用同一列时确实需要圆括号。
 </para>

<!--==========================orignal english content==========================
 <para>
  And we can specify subfields as targets for <command>INSERT</>, too:

<programlisting>
INSERT INTO mytab (complex_col.r, complex_col.i) VALUES(1.1, 2.2);
</programlisting>

  Had we not supplied values for all the subfields of the column, the
  remaining subfields would have been filled with null values.
 </para>
____________________________________________________________________________-->
 <para>
  并且我们也可以指定子域作为<command>INSERT</>的目标：

<programlisting>
INSERT INTO mytab (complex_col.r, complex_col.i) VALUES(1.1, 2.2);
</programlisting>

  如果我们没有为该列的所有子域提供值，剩下的子域将用空值填充。
 </para>
 </sect2>

 <sect2 id="rowtypes-io-syntax">
<!--==========================orignal english content==========================
  <title>Composite Type Input and Output Syntax</title>
____________________________________________________________________________-->
  <title>组合类型输入和输出语法</title>

<!--==========================orignal english content==========================
  <para>
   The external text representation of a composite value consists of items that
   are interpreted according to the I/O conversion rules for the individual
   field types, plus decoration that indicates the composite structure.
   The decoration consists of parentheses (<literal>(</> and <literal>)</>)
   around the whole value, plus commas (<literal>,</>) between adjacent
   items.  Whitespace outside the parentheses is ignored, but within the
   parentheses it is considered part of the field value, and might or might not be
   significant depending on the input conversion rules for the field data type.
   For example, in:
<programlisting>
'(  42)'
</programlisting>
   the whitespace will be ignored if the field type is integer, but not if
   it is text.
  </para>
____________________________________________________________________________-->
  <para>
   一个组合值的外部文本表达由根据域类型的 I/O 转换规则解释的项，外加指示组合结构的装饰组成。装饰由整个值周围的圆括号（<literal>(</>和<literal>)</>），外加相邻项之间的逗号（<literal>,</>）组成。圆括号之外的空格会被忽略，但是在圆括号之内空格会被当成域值的一部分，并且根据域数据类型的输入转换规则可能有意义，也可能没有意义。例如，在
<programlisting>
'(  42)'
</programlisting>
   中，如果域类型是整数则空格会被忽略，而如果是文本则空格不会被忽略。
  </para>

<!--==========================orignal english content==========================
  <para>
   As shown previously, when writing a composite value you can write double
   quotes around any individual field value.
   You <emphasis>must</> do so if the field value would otherwise
   confuse the composite-value parser.  In particular, fields containing
   parentheses, commas, double quotes, or backslashes must be double-quoted.
   To put a double quote or backslash in a quoted composite field value,
   precede it with a backslash.  (Also, a pair of double quotes within a
   double-quoted field value is taken to represent a double quote character,
   analogously to the rules for single quotes in SQL literal strings.)
   Alternatively, you can avoid quoting and use backslash-escaping to
   protect all data characters
   that would otherwise be taken as composite syntax.
  </para>
____________________________________________________________________________-->
  <para>
   如前所示，在写一个组合值时，你可以在任意域值周围写上双引号。如果不这样做会让域值迷惑组合值解析器，你就<emphasis>必须</>这么做。特别地，包含圆括号、逗号、双引号或反斜线的域必须用双引号引用。要把一个双引号或者反斜线放在一个被引用的组合域值中，需要在它前面放上一个反斜线（还有，一个双引号引用的域值中的一对双引号被认为是表示一个双引号字符，这和 SQL 字符串中单引号的规则类似）。另一种办法是，你可以避免引用以及使用反斜线转义来保护所有可能被当作组合语法的数据字符。
  </para>

<!--==========================orignal english content==========================
  <para>
   A completely empty field value (no characters at all between the commas
   or parentheses) represents a NULL.  To write a value that is an empty
   string rather than NULL, write <literal>""</>.
  </para>
____________________________________________________________________________-->
  <para>
   一个全空的域值（在逗号或圆括号之间完全没有字符）表示一个 NULL。要写一个空字符串值而不是 NULL，可以写成<literal>""</>。
  </para>

<!--==========================orignal english content==========================
  <para>
   The composite output routine will put double quotes around field values
   if they are empty strings or contain parentheses, commas,
   double quotes, backslashes, or white space.  (Doing so for white space
   is not essential, but aids legibility.)  Double quotes and backslashes
   embedded in field values will be doubled.
  </para>
____________________________________________________________________________-->
  <para>
   如果域值是空串或者包含圆括号、逗号、双引号、反斜线或空格，组合输出例程将在域值周围放上双引号（对空格这样处理并不是不可缺少的，但是可以提高可读性）。嵌入在域值中的双引号及反斜线将被双写。
  </para>

 <note>
<!--==========================orignal english content==========================
  <para>
   Remember that what you write in an SQL command will first be interpreted
   as a string literal, and then as a composite.  This doubles the number of
   backslashes you need (assuming escape string syntax is used).
   For example, to insert a <type>text</> field
   containing a double quote and a backslash in a composite
   value, you'd need to write:
<programlisting>
INSERT ... VALUES (E'("\\"\\\\")');
</programlisting>
   The string-literal processor removes one level of backslashes, so that
   what arrives at the composite-value parser looks like
   <literal>("\"\\")</>.  In turn, the string
   fed to the <type>text</> data type's input routine
   becomes <literal>"\</>.  (If we were working
   with a data type whose input routine also treated backslashes specially,
   <type>bytea</> for example, we might need as many as eight backslashes
   in the command to get one backslash into the stored composite field.)
   Dollar quoting (see <xref linkend="sql-syntax-dollar-quoting">) can be
   used to avoid the need to double backslashes.
  </para>
____________________________________________________________________________-->
  <para>
   记住你在一个 SQL 命令中写的东西将首先被解释为一个字符串，然后才会被解释为一个组合。这就让你所需要的反斜线数量翻倍（假定使用了转义字符串语法）。例如，要在组合值中插入一个含有一个双引号和一个反斜线的<type>text</>域，你需要写成：
<programlisting>
INSERT ... VALUES (E'("\\"\\\\")');
</programlisting>
   字符串处理器会移除一层反斜线，这样在组合值解析器那里看到的就会是<literal>("\"\\")</>。接着，字符串被交给<type>text</>数据类型的输入例程并且变成<literal>"\</>（如果我们使用的数据类型的输入例程也会特别处理反斜线，例如<type>bytea</>，在命令中我们可能需要八个反斜线用来在组合域中存储一个反斜线）。美元引用（见<xref linkend="sql-syntax-dollar-quoting">）可以被用来避免双写反斜线。
  </para>
 </note>

 <tip>
<!--==========================orignal english content==========================
  <para>
   The <literal>ROW</> constructor syntax is usually easier to work with
   than the composite-literal syntax when writing composite values in SQL
   commands.
   In <literal>ROW</>, individual field values are written the same way
   they would be written when not members of a composite.
  </para>
____________________________________________________________________________-->
  <para>
   当在 SQL 命令中书写组合值时，<literal>ROW</>构造器语法通常比组合文字语法更容易使用。在<literal>ROW</>中，单个域值可以按照平时不是组合值成员的写法来写。
  </para>
 </tip>
 </sect2>

</sect1>
