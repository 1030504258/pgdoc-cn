<!-- doc/src/sgml/pageinspect.sgml -->

<sect1 id="pageinspect" xreflabel="pageinspect">
 <title>pageinspect</title>

 <indexterm zone="pageinspect">
  <primary>pageinspect</primary>
 </indexterm>

 <!-- 
 <para>
  The <filename>pageinspect</> module provides functions that allow you to
  inspect the contents of database pages at a low level, which is useful for
  debugging purposes.  All of these functions may be used only by superusers.
 </para> 
 -->
 <para>
  <filename>pageinspect</>模块提供了允许在低层次观察数据库页面内容的函数，
  这对于调试目的很有用。所有这些函数只能被超级用户使用。
 </para>

 <sect2>
  <!-- 
  <title>Functions</title>
  -->
  <title>函数</title>

  <variablelist>
   <varlistentry>
    <term>
     <function>get_raw_page(relname text, fork text, blkno int) returns bytea</function>
    <indexterm>
     <primary>get_raw_page</primary>
    </indexterm>
    </term>

    <listitem>
     <!-- 
     <para>
      <function>get_raw_page</function> reads the specified block of the named
      relation and returns a copy as a <type>bytea</> value.  This allows a
      single time-consistent copy of the block to be obtained.
      <replaceable>fork</replaceable> should be <literal>'main'</literal> for
      the main data fork, <literal>'fsm'</literal> for the free space map,
      <literal>'vm'</literal> for the visibility map, or <literal>'init'</literal>
      for the initialization fork.
     </para>
     -->
     <para>
      <function>get_raw_page</function>读取命名关系的指定块并且以一个<type>bytea</>
      值的形式返回一个拷贝。这允许获得该块的一个单个时间一致的拷贝。
      对于主数据分叉，<replaceable>fork</replaceable>应该是<literal>'main'</literal>，
      对于空闲空间映射应该是<literal>'fsm'</literal>，对于可见性映射应该是
      <literal>'vm'</literal>，对于初始化分叉应该是<literal>'init'</literal>。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <function>get_raw_page(relname text, blkno int) returns bytea</function>
    </term>

    <listitem>
     <!-- 
     <para>
      A shorthand version of <function>get_raw_page</function>, for reading
      from the main fork.  Equivalent to
      <literal>get_raw_page(relname, 'main', blkno)</literal>
     </para>
     -->
     <para>
      一个简写版的<function>get_raw_page</function>，用于读取主分叉。
      等效于<literal>get_raw_page(relname, 'main', blkno)</literal>
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <function>page_header(page bytea) returns record</function>
    <indexterm>
     <primary>page_header</primary>
    </indexterm>    
    </term>

    <listitem>
     <!-- 
     <para>
      <function>page_header</function> shows fields that are common to all
      <productname>PostgreSQL</> heap and index pages.
     </para>
     -->
     <para>
      <function>page_header</function>显示所有<productname>PostgreSQL</>堆和索引页面的公共域。
     </para>

     <para>
      <!-- 
      A page image obtained with <function>get_raw_page</function> should be
      passed as argument.  For example:
      -->
      用<function>get_raw_page</function>获得的页面映像应该作为参数传递。例如：
<screen>
test=# SELECT * FROM page_header(get_raw_page('pg_class', 0));
    lsn    | checksum | flags  | lower | upper | special | pagesize | version | prune_xid
-----------+----------+--------+-------+-------+---------+----------+---------+-----------
 0/24A1B50 |        1 |      1 |   232 |   368 |    8192 |     8192 |       4 |         0
</screen>
      <!-- 
      The returned columns correspond to the fields in the
      <structname>PageHeaderData</> struct.
      See <filename>src/include/storage/bufpage.h</> for details.
      -->
      返回的列对应于<structname>PageHeaderData</>结构中的字段。
      详见<filename>src/include/storage/bufpage.h</>。
    </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <function>heap_page_items(page bytea) returns setof record</function>
    <indexterm>
     <primary>heap_page_items</primary>
    </indexterm>    
    </term>

    <listitem>
     <!-- 
     <para>
      <function>heap_page_items</function> shows all line pointers on a heap
      page.  For those line pointers that are in use, tuple headers are also
      shown. All tuples are shown, whether or not the tuples were visible to
      an MVCC snapshot at the time the raw page was copied.
     </para>
     -->
     <para>
      <function>heap_page_items</function>显示一个堆页面上所有的行指针。
      对那些使用中的行指针，也会显示元组头部。不管元组对于拷贝原始页面时的
      MVCC 快照是否可见，它们都会被显示。
     </para>
     <para>
      <!-- 
      A heap page image obtained with <function>get_raw_page</function> should
      be passed as argument.  For example:
      -->
      用<function>get_raw_page</function>获得的堆页面映像应该作为参数传递。例如：
<screen>
test=# SELECT * FROM heap_page_items(get_raw_page('pg_class', 0));
</screen>
      <!-- 
      See <filename>src/include/storage/itemid.h</> and
      <filename>src/include/access/htup_details.h</> for explanations of the fields
      returned.
      -->
      参阅<filename>src/include/storage/itemid.h</>和
      <filename>src/include/access/htup_details.h</>获取返回的字段的解释。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <function>bt_metap(relname text) returns record</function>
    <indexterm>
     <primary>bt_metap</primary>
    </indexterm>    
    </term>

    <listitem>
     <para>
      <!-- 
      <function>bt_metap</function> returns information about a B-tree
      index's metapage.  For example:
      -->
      <function>bt_metap</function>返回关于一个B-树索引的元页的信息。例如：
<screen>
test=# SELECT * FROM bt_metap('pg_cast_oid_index');
-[ RECORD 1 ]-----
magic     | 340322
version   | 2
root      | 1
level     | 0
fastroot  | 1
fastlevel | 0
</screen>
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <function>bt_page_stats(relname text, blkno int) returns record</function>
    <indexterm>
     <primary>bt_page_stats</primary>
    </indexterm>    
    </term>

    <listitem>
     <para>
      <!-- 
      <function>bt_page_stats</function> returns summary information about
      single pages of B-tree indexes.
      -->
      <function>bt_page_stats</function>返回关于B-树索引单一页面的摘要信息。例如：
<screen>
test=# SELECT * FROM bt_page_stats('pg_cast_oid_index', 1);
-[ RECORD 1 ]-+-----
blkno         | 1
type          | l
live_items    | 256
dead_items    | 0
avg_item_size | 12
page_size     | 8192
free_size     | 4056
btpo_prev     | 0
btpo_next     | 0
btpo          | 0
btpo_flags    | 3
</screen>
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <function>bt_page_items(relname text, blkno int) returns setof record</function>
    <indexterm>
     <primary>bt_page_items</primary>
    </indexterm>    
    </term>

    <listitem>
     <para>
      <!-- 
      <function>bt_page_items</function> returns detailed information about
      all of the items on a B-tree index page.  For example:
      -->
      <function>bt_page_items</function>返回关于B-树索引页面上所有项的详细信息。例如：
<screen>
test=# SELECT * FROM bt_page_items('pg_cast_oid_index', 1);
 itemoffset |  ctid   | itemlen | nulls | vars |    data
------------+---------+---------+-------+------+-------------
          1 | (0,1)   |      12 | f     | f    | 23 27 00 00
          2 | (0,2)   |      12 | f     | f    | 24 27 00 00
          3 | (0,3)   |      12 | f     | f    | 25 27 00 00
          4 | (0,4)   |      12 | f     | f    | 26 27 00 00
          5 | (0,5)   |      12 | f     | f    | 27 27 00 00
          6 | (0,6)   |      12 | f     | f    | 28 27 00 00
          7 | (0,7)   |      12 | f     | f    | 29 27 00 00
          8 | (0,8)   |      12 | f     | f    | 2a 27 00 00
</screen>
      <!-- 
      In a B-tree leaf page, <structfield>ctid</> points to a heap tuple.
      In an internal page, the block number part of <structfield>ctid</>
      points to another page in the index itself, while the offset part
      (the second number) is ignored and is usually 1.
      -->
      在B树叶子页面中，<structfield>ctid</>指向一个堆元组。
      在内部页面中，<structfield>ctid</>的块编号部分指向索引本身中的另一个页面，
      忽略偏移部分（第二个数字），它通常是1。
     </para>
     <!-- 
     <para>
      Note that the first item on any non-rightmost page (any page with
      a non-zero value in the <structfield>btpo_next</> field) is the
      page's <quote>high key</quote>, meaning its <structfield>data</>
      serves as an upper bound on all items appearing on the page, while
      its <structfield>ctid</> field is meaningless.  Also, on non-leaf
      pages, the first real data item (the first item that is not a high
      key) is a <quote>minus infinity</quote> item, with no actual value
      in its <structfield>data</> field.  Such an item does have a valid
      downlink in its <structfield>ctid</> field, however.
     </para> 
     -->
     <para>
      注意，任何非最右边的页面（<structfield>btpo_next</>
      字段中的任何非零值的页面）的第一个项是页面的<quote>高键</ quote>，
      意味着它的<structfield>data</>用作页面上显示的所有项的上限，
      而其<structfield>ctid</>字段是无意义的。此外，在非叶子页面上，
      第一个真实数据项（不是高键的第一个项）是<quote>负无穷</quote>项，
      在其<structfield>data</>域没有真实值。然而，这样的项在其
      <structfield>ctid</>字段中具有有效的下行链路。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <function>brin_page_type(page bytea) returns text</function>
     <indexterm>
      <primary>brin_page_type</primary>
     </indexterm>
    </term>

    <listitem>
     <para>
      <!-- 
      <function>brin_page_type</function> returns the page type of the given
      <acronym>BRIN</acronym> index page, or throws an error if the page is
      not a valid <acronym>BRIN</acronym> page.  For example:
      -->
      <function>brin_page_type</function>返回给定的<acronym>BRIN</acronym>
      索引页面的页面类型，如果页面不是有效的<acronym>BRIN</acronym>页面，
      则会抛出错误。例如：
<screen>
test=# SELECT brin_page_type(get_raw_page('brinidx', 0));
 brin_page_type 
----------------
 meta
</screen>
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <function>brin_metapage_info(page bytea) returns record</function>
     <indexterm>
      <primary>brin_metapage_info</primary>
     </indexterm>
    </term>

    <listitem>
     <para>
      <!-- 
      <function>brin_metapage_info</function> returns assorted information
      about a <acronym>BRIN</acronym> index metapage.  For example:
      -->
      <function>brin_metapage_info</function>返回有关<acronym>BRIN</acronym>
      索引元页的分类信息。例如：
<screen>
test=# SELECT * FROM brin_metapage_info(get_raw_page('brinidx', 0));
   magic    | version | pagesperrange | lastrevmappage 
------------+---------+---------------+----------------
 0xA8109CFA |       1 |             4 |              2
</screen>
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <function>brin_revmap_data(page bytea) returns setof tid</function>
     <indexterm>
      <primary>brin_revmap_data</primary>
     </indexterm>
    </term>

    <listitem>
     <para>
      <!-- 
      <function>brin_revmap_data</function> returns the list of tuple
      identifiers in a <acronym>BRIN</acronym> index range map page.
      For example:
      -->
      <function>brin_revmap_data</function>返回<acronym>BRIN</acronym>
      索引范围映射页面中的元组标识符列表。例如：
<screen>
test=# SELECT * FROM brin_revmap_data(get_raw_page('brinidx', 2)) limit 5;
  pages  
---------
 (6,137)
 (6,138)
 (6,139)
 (6,140)
 (6,141)
</screen>
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <function>brin_page_items(page bytea, index oid) returns setof record</function>
     <indexterm>
      <primary>brin_page_items</primary>
     </indexterm>
    </term>

    <listitem>
     <para>
      <!-- 
      <function>brin_page_items</function> returns the data stored in the
      <acronym>BRIN</acronym> data page.  For example:
      -->
      <function>brin_page_items</function>返回存储在<acronym>BRIN</acronym>
      数据页面中的数据。例如：
<screen>
test=# SELECT * FROM brin_page_items(get_raw_page('brinidx', 5),
                                     'brinidx')
       ORDER BY blknum, attnum LIMIT 6;
 itemoffset | blknum | attnum | allnulls | hasnulls | placeholder |    value     
------------+--------+--------+----------+----------+-------------+--------------
        137 |      0 |      1 | t        | f        | f           | 
        137 |      0 |      2 | f        | f        | f           | {1 .. 88}
        138 |      4 |      1 | t        | f        | f           | 
        138 |      4 |      2 | f        | f        | f           | {89 .. 176}
        139 |      8 |      1 | t        | f        | f           | 
        139 |      8 |      2 | f        | f        | f           | {177 .. 264}
</screen>
      <!-- 
      The returned columns correspond to the fields in the
      <structname>BrinMemTuple</> and <structname>BrinValues</> structs.
      See <filename>src/include/access/brin_tuple.h</> for details.
      -->
      返回的列对应于<structname>BrinMemTuple</>和<structname>BrinValues</>
      结构中的字段。有关详细信息，请参见<filename>src/include/access/brin_tuple.h</>。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <function>gin_metapage_info(page bytea) returns record</function>
     <indexterm>
      <primary>gin_metapage_info</primary>
     </indexterm>
    </term>

    <listitem>
     <para>
      <!-- 
      <function>gin_metapage_info</function> returns information about
      a <acronym>GIN</acronym> index metapage.  For example:
      -->
      <function>gin_metapage_info</function>返回关于<acronym>GIN</acronym>
      索引元页的信息。例如：
<screen>
test=# SELECT * FROM gin_metapage_info(get_raw_page('gin_index', 0));
-[ RECORD 1 ]----+-----------
pending_head     | 4294967295
pending_tail     | 4294967295
tail_free_size   | 0
n_pending_pages  | 0
n_pending_tuples | 0
n_total_pages    | 7
n_entry_pages    | 6
n_data_pages     | 0
n_entries        | 693
version          | 2
</screen>
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <function>gin_page_opaque_info(page bytea) returns record</function>
     <indexterm>
      <primary>gin_page_opaque_info</primary>
     </indexterm>
    </term>

    <listitem>
     <para>
      <!-- 
      <function>gin_page_opaque_info</function> returns information about
      a <acronym>GIN</acronym> index opaque area, like the page type.
      For example:
      -->
      <function>gin_page_opaque_info</function>返回关于<acronym>GIN</acronym>
      索引不透明区域的信息，像页面类型。例如：
<screen>
test=# SELECT * FROM gin_page_opaque_info(get_raw_page('gin_index', 2));
 rightlink | maxoff |         flags
-----------+--------+------------------------
         5 |      0 | {data,leaf,compressed}
(1 row)
</screen>
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <function>gin_leafpage_items(page bytea) returns setof record</function>
     <indexterm>
      <primary>gin_leafpage_items</primary>
     </indexterm>
    </term>

    <listitem>
     <para>
      <!-- 
      <function>gin_leafpage_items</function> returns information about
      the data stored in a <acronym>GIN</acronym> leaf page.  For example:
      -->
      <function>gin_leafpage_items</function>返回关于存储在<acronym>GIN</acronym>
      叶子页面中的数据的信息。例如：
<screen>
test=# SELECT first_tid, nbytes, tids[0:5] as some_tids
        FROM gin_leafpage_items(get_raw_page('gin_test_idx', 2));
 first_tid | nbytes |                        some_tids
-----------+--------+----------------------------------------------------------
 (8,41)    |    244 | {"(8,41)","(8,43)","(8,44)","(8,45)","(8,46)"}
 (10,45)   |    248 | {"(10,45)","(10,46)","(10,47)","(10,48)","(10,49)"}
 (12,52)   |    248 | {"(12,52)","(12,53)","(12,54)","(12,55)","(12,56)"}
 (14,59)   |    320 | {"(14,59)","(14,60)","(14,61)","(14,62)","(14,63)"}
 (167,16)  |    376 | {"(167,16)","(167,17)","(167,18)","(167,19)","(167,20)"}
 (170,30)  |    376 | {"(170,30)","(170,31)","(170,32)","(170,33)","(170,34)"}
 (173,44)  |    197 | {"(173,44)","(173,45)","(173,46)","(173,47)","(173,48)"}
(7 rows)
</screen>
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <function>fsm_page_contents(page bytea) returns text</function>
    <indexterm>
     <primary>fsm_page_contents</primary>
    </indexterm>    
    </term>

    <listitem>
     <!-- 
     <para>
      <function>fsm_page_contents</function> shows the internal node structure
      of a FSM page. The output is a multiline string, with one line per
      node in the binary tree within the page. Only those nodes that are not
      zero are printed. The so-called "next" pointer, which points to the
      next slot to be returned from the page, is also printed.
     </para>
     -->
     <para>
      <function>fsm_page_contents</function>显示了 FSM 页面的内部结点结构。
      输出是一个多行字符串，每一行对应页面中二叉树的一个结点。
      只有非零节点会被打印。所谓的“next”指针也会被打印，
      它指向页面中下一个要被返回的槽。
     </para>
     <!-- 
     <para>
      See <filename>src/backend/storage/freespace/README</> for more
      information on the structure of an FSM page.
     </para>
     -->
     <para>
      参阅<filename>src/backend/storage/freespace/README</>
      获取更多关于FSM页面的结构的信息。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect2>

</sect1>
