<!-- doc/src/sgml/problems.sgml -->

<sect1 id="bug-reporting">
 <!-- <title>Bug Reporting Guidelines</title> -->
<title>臭虫汇报指导</title>

 <!-- 
 <para>
  When you find a bug in <productname>PostgreSQL</productname> we want to
  hear about it. Your bug reports play an important part in making
  <productname>PostgreSQL</productname> more reliable because even the utmost
  care cannot guarantee that every part of
  <productname>PostgreSQL</productname>
  will work on every platform under every circumstance.
 </para> 
 -->
 <para>
当你在<productname>PostgreSQL</productname>里碰到臭虫时，我们也希望能知道它。
你的臭虫汇报是将<productname>PostgreSQL</productname>做得更加可靠的一个非常重要的部分，
因为再细致的工作也不能保证在任何情况、任何平台下<productname>PostgreSQL</productname>
的每一个部分都能正常工作。  
 </para>
 <!-- 
 <para>
  The following suggestions are intended to assist you in forming bug reports
  that can be handled in an effective fashion. No one is required to follow
  them but doing so tends to be to everyone's advantage.
 </para> 
 -->
 <para>
下面的建议试图帮助你正确格式化臭虫报告，这样这些报告就能够以一种有效的方法处理。
我们不强迫任何人遵循这些东西，但是这样做对我们每个人都有好处。
 </para>
<!-- 
 <para>
  We cannot promise to fix every bug right away. If the bug is obvious, critical,
  or affects a lot of users, chances are good that someone will look into it. It
  could also happen that we tell you to update to a newer version to see if the
  bug happens there. Or we might decide that the bug
  cannot be fixed before some major rewrite we might be planning is done. Or
  perhaps it is simply too hard and there are more important things on the agenda.
  If you need help immediately, consider obtaining a commercial support contract.
 </para> 
 -->
  <para>
我们不能保证能够马上修补每个臭虫。如果臭虫是显而易见的，很关键的或者影响许多用户，
那么很有可能有些人会认真检查它们。同样我们也可能是告诉你升级到一个新版本，
看看臭虫是否仍然存在。否则，我们可能会说这个臭虫在我们正计划的几个主要改写之前不会得到修补。
或者这个臭虫只是太费事了，而且目前的日程表上有更重要的事情要做。如果你立即需要帮助，
那么请考虑获取一个商业性的支持。
 </para>

 <sect2>
<!--   <title>Identifying Bugs</title> -->
<title>标识臭虫</title>
  <para>
   <!-- 
   Before you report a bug, please read and re-read the
   documentation to verify that you can really do whatever it is you are
   trying. If it is not clear from the documentation whether you can do
   something or not, please report that too; it is a bug in the documentation.
   If it turns out that a program does something different from what the
   documentation says, that is a bug. That might include, but is not limited to,
   the following circumstances: 
   -->
在你报告臭虫之前，请一再仔细地读文档，以确认你确实可以做你在做的事情。
如果文档中对你能否处理你所做的事情并不清楚，也请你汇报过来，因为这个是文档的臭虫。
如果发现你的程序表现的不像文档里说的那样，那就是一个臭虫。
这时可能包括(不过不一定局限于)下面的现像：
   <itemizedlist>
    <listitem>
     <!-- 
     <para>
      A program terminates with a fatal signal or an operating system
      error message that would point to a problem in the program. (A
      counterexample might be a <quote>disk full</quote> message,
      since you have to fix that yourself.)
     </para> 
 -->
<para>
程序带着一个致命信号或者一个指向程序错误的操作系统错误信息退出。
一个反例是一个<quote>disk full</quote>(磁盘满)信息，因为这样的错误必须在 Postgres 外部进行修复。
</para>
    </listitem>

    <listitem>
     <!-- 
     <para>
      A program produces the wrong output for any given input.
     </para> 
 -->
<para>
程序对给出的任何输入都产生错误的输出。
</para>
    </listitem>

    <listitem>
     <!-- 
     <para>
      A program refuses to accept valid input (as defined in the documentation).
     </para> 
 -->
<para>
     程序拒绝接收(文档里定义的那些)有效的输入。
     </para> 
    </listitem>

    <listitem>
     <!-- 
     <para>
      A program accepts invalid input without a notice or error message.
      But keep in mind that your idea of invalid input might be our idea of
      an extension or compatibility with traditional practice.
     </para> 
 -->
<para>
     程序对非法输入没有生成任何提示或者错误信息。但是需要注意的是，
 你认为非法的输入可能是我们设想的扩展或者与传统兼容的做法。
     </para>
    </listitem>

    <listitem>
     <!-- 
     <para>
      <productname>PostgreSQL</productname> fails to compile, build, or
      install according to the instructions on supported platforms.
     </para> 
 -->
 <para>
      在支持的平台上根据指导未能成功地编译或安装<productname>PostgreSQL</productname>。
     </para>
    </listitem>
   </itemizedlist>

   <!-- Here <quote>program</quote> refers to any executable, not only the backend process. -->
   这里的<quote>程序</quote>代表任何可执行文件，而不仅仅是后端进程。
  </para>

  <!-- 
  <para>
   Being slow or resource-hogging is not necessarily a bug. Read the
   documentation or ask on one of the mailing lists for help in tuning your
   applications. Failing to comply to the <acronym>SQL</acronym> standard is
   not necessarily a bug either, unless compliance for the
   specific feature is explicitly claimed.
  </para> 
  -->
  <para>
速度慢或者资源消耗大不算是臭虫。请阅读文档或者提交邮件列表获取调节你的应用的性能的帮助。
未能遵循<acronym>SQL</acronym>标准也不算是一个臭虫，除非文档明确声明了遵守该特定特性。
  </para>
  <!-- 
  <para>
   Before you continue, check on the TODO list and in the FAQ to see if your bug is
   already known. If you cannot decode the information on the TODO list, report your
   problem. The least we can do is make the TODO list clearer.
  </para> 
  -->
   <para>
 在你准备继续汇报臭虫之前，请检查 TODO 列表和 FAQ ，看看你报告的臭虫是否已知。
 如果你不能解析 TODO 列表里面的信息，请汇报你的问题。至少我们可以把 TODO 列表做得更清晰。
  </para>  
 </sect2>

 <sect2>
  <!-- <title>What to Report</title> -->
<title>汇报什么</title>
  <!-- 
  <para>
   The most important thing to remember about bug reporting is to state all
   the facts and only facts. Do not speculate what you think went wrong, what
   <quote>it seemed to do</quote>, or which part of the program has a fault.
   If you are not familiar with the implementation you would probably guess
   wrong and not help us a bit. And even if you are, educated explanations are
   a great supplement to but no substitute for facts. If we are going to fix
   the bug we still have to see it happen for ourselves first.
   Reporting the bare facts
   is relatively straightforward (you can probably copy and paste them from the
   screen) but all too often important details are left out because someone
   thought it does not matter or the report would be understood
   anyway.
  </para> 
  -->
   <para>
 关于汇报臭虫需要记住的最重要的事就是写出所有事实并且只写事实。不要推测你认为是什么错了，
 什么<quote>看起来像</quote>，或者是推测程序的哪一部分失灵了。如果你不熟悉 PostgreSQL 的实现，
 你很可能猜错因而不能帮我们任何忙。而且即使你熟悉 Postgres 的实现，
 提炼出来的解释也只是事实的补充而不是代替。如果我们准备修理这个臭虫，
 我们仍然需要首先亲自看到臭虫的出现。报告简单的事实相对而言比较直接 (你可以从屏幕上拷贝和粘贴)，
 不过经常发生的是很多人认为这些事实不重要而忽略了重要的细节，否则汇报总是能够被我们理解。
  </para>  

  <para>
 <!--   The following items should be contained in every bug report: -->

下面的条目应该包含在所有臭虫汇报里面：
   <itemizedlist>
    <listitem>
     <!-- 
     <para>
      The exact sequence of steps <emphasis>from program
      start-up</emphasis> necessary to reproduce the problem. This
      should be self-contained; it is not enough to send in a bare
      <command>SELECT</command> statement without the preceding
      <command>CREATE TABLE</command> and <command>INSERT</command>
      statements, if the output should depend on the data in the
      tables. We do not have the time to reverse-engineer your
      database schema, and if we are supposed to make up our own data
      we would probably miss the problem.
     </para> 
 -->
   <para>
<emphasis>从程序启动开始</emphasis>到重现问题的准确步骤顺序。这应该自包含的；
要知道如果输出将依赖于表中的数据时，光把一个光秃秃的<command>SELECT</command>
语句发过来而不把前面的<command>CREATE TABLE</command>和<command>INSERT</command>
语句发过来是不够的。我们没有时间分析你的数据库结构，而且如果我们试着建立我们自己的数据，
那我们就有可能错过问题。
     </para>
     <!-- 
     <para>
      The best format for a test case for SQL-related problems is a
      file that can be run through the <application>psql</application>
      frontend that shows the problem. (Be sure to not have anything
      in your <filename>~/.psqlrc</filename> start-up file.)  An easy
      way to create this file is to use <application>pg_dump</application>
      to dump out the table declarations and data needed to set the
      scene, then add the problem query.  You are encouraged to
      minimize the size of your example, but this is not absolutely
      necessary.  If the bug is reproducible, we will find it either
      way.
     </para> 
 -->
    <para>
测试与 SQL 语言有关的问题的最好的格式是一个可以通过<application>psql</application>
前端运行并显示问题的文件(确保在<filename>~/.psqlrc</filename>启动文件里面没有任何东西)。
一种比较简单的创建这个文件的方法就是用<application>pg_dump</application>
导出表声明和仿真的数据，以及有毛病的查询。我们鼓励你最小化你的例子，
但这不是非做不可的事情。如果臭虫是可以复现的，那么两种方式都能帮助我们找到它。
     </para>
     <!-- 
     <para>
      If your application uses some other client interface, such as <application>PHP</>, then
      please try to isolate the offending queries. We will probably not set up a
      web server to reproduce your problem. In any case remember to provide
      the exact input files; do not guess that the problem happens for
      <quote>large files</quote> or <quote>midsize databases</quote>, etc. since this
      information is too inexact to be of use.
     </para> 
 -->
 <para>
如果你的应用使用其它客户端接口，比如<application>PHP</>，那么请设法隔离出有毛病的查询。
我们可能不会架设一个 web 服务器来复现你的问题。不管怎么说，请记住提供准确的输入文件，
而不要猜测问题会在<quote>大文件</quote>或者<quote>中等尺寸的数据库</quote>等等的身上发生。
因为这样的信息太不确切，因而没有什么用处。
     </para>
    </listitem>

    <listitem>
     <!-- 
     <para>
      The output you got. Please do not say that it <quote>didn't work</quote> or
      <quote>crashed</quote>. If there is an error message,
      show it, even if you do not understand it. If the program terminates with
      an operating system error, say which. If nothing at all happens, say so.
      Even if the result of your test case is a program crash or otherwise obvious
      it might not happen on our platform. The easiest thing is to copy the output
      from the terminal, if possible.
     </para> 
 -->
 <para>
你得到的输出。请不要说它<quote>不起作用</quote>或者<quote>失灵了</quote>。如果有错误信息，
请写明，即使你不能理解也一样。如果程序带着操作系统错误退出，也请写清楚。如果什么也没有发生，
就照直说。即使你的测试实例是程序崩溃或者其它显而易见的现像，
它也有可能不会在我们的平台上发生。如果可能，最简单的事情是从终端拷贝输出。
     </para> 
     <note>
      <!-- 
     <para>
       If you are reporting an error message, please obtain the most verbose
       form of the message.  In <application>psql</>, say <literal>\set
       VERBOSITY verbose</> beforehand.  If you are extracting the message
       from the server log, set the run-time parameter
       <xref linkend="guc-log-error-verbosity"> to <literal>verbose</> so that all
       details are logged.
      </para> 
  -->
<para>
如果你报告一个错误信息，请从信息中获取最冗长的版本。在<application>psql</>里，
事先运行<literal>\set VERBOSITY verbose</>就行。如果你从服务器日志里抽取信息，
那么就把运行时参数<xref linkend="guc-log-error-verbosity">设置为<literal>verbose</>，
这样就会报告所有细节。
      </para>  
     </note>
     <note>
     <!-- 
     <para>
       In case of fatal errors, the error message reported by the client might
       not contain all the information available. Please also look at the
       log output of the database server. If you do not keep your server's log
       output, this would be a good time to start doing so.
      </para> 
  -->
 <para>
如果是致命错误，客户端提供的信息可能不会包含所有能得到的信息。这种情况下，
还要看看数据库服务器的输出。如果你没有保留服务器输出，那么现在是做这件事的好机会。
    </para>
     </note>
    </listitem>

    <listitem>
     <!-- 
     <para>
      The output you expected is very important to state. If you just write
      <quote>This command gives me that output.</quote> or <quote>This is not
      what I expected.</quote>, we might run it ourselves, scan the output, and
      think it looks OK and is exactly what we expected. We should not have to
      spend the time to decode the exact semantics behind your commands.
      Especially refrain from merely saying that <quote>This is not what SQL says/Oracle
      does.</quote> Digging out the correct behavior from <acronym>SQL</acronym>
      is not a fun undertaking, nor do we all know how all the other relational
      databases out there behave. (If your problem is a program crash, you can
      obviously omit this item.)
     </para> 
 -->
<para>
还有一样很重要的事是声明你期望的输出。如果你只是写到<quote>这条命令给我这样的输出</quote>
或者<quote>这不是我期望的</quote>，我们可能自己运行它，检查输出，
然后认为看上去很好并且正是我们所期望的输出。我们不应该把时间花在解析你的命令的语义上。
特别是要避免仅仅说<quote>这不是 SQL 说的</quote>或<quote>这不像 Oracle 做的那样</quote>。
从<acronym>SQL</acronym>里挖掘出正确的行为可不是好玩的事情，
我们也不能知道所有其它的关系数据库的特性是怎样的。如果你的问题是程序崩溃，
显然你可以忽略这个条目。
     </para> 
    </listitem>

    <listitem>
     <!-- 
     <para>
      Any command line options and other start-up options, including
      any relevant environment variables or configuration files that
      you changed from the default. Again, please provide exact
      information. If you are using a prepackaged distribution that
      starts the database server at boot time, you should try to find
      out how that is done.
     </para> 
 -->
 <para>
任何命令行选项和其它启动选项，包括相关的环境变量或者你从缺省值修改以后的配置文件。
同时，还要准确。如果你使用启动系统时自动启动数据库服务器的预打包的版本，
你应该试着找出这些东西是怎样实现的。
     </para> 
    </listitem>

    <listitem>
     <!-- 
     <para>
      Anything you did at all differently from the installation
      instructions.
     </para> 
 -->
 <para>
     任何你做的与安装指导不一致的东西。
     </para> 
    </listitem>

    <listitem>
     <!-- 
     <para>
      The <productname>PostgreSQL</productname> version. You can run the command
      <literal>SELECT version();</literal> to
      find out the version of the server you are connected to.  Most executable
      programs also support a <option>&#045-version</option> option; at least
      <literal>postgres &#045-version</literal> and <literal>psql &#045-version</literal>
      should work.
      If the function or the options do not exist then your version is
      more than old enough to warrant an upgrade.
      If you run a prepackaged version, such as RPMs, say so, including any
      subversion the package might have. If you are talking about a Git
      snapshot, mention that, including the commit hash.
     </para> 
 -->
<para>
<productname>PostgreSQL</productname> 版本。你可以运行<literal>SELECT version();</literal>
命令来检查你正在运行的版本是什么。大多数可执行程序支持<option>--version</option>选项；
至少<literal>postgres --version</literal>和<literal>psql --version</literal>应该是可以用的。
如果这个函数或者选项不存在，那我们很可能除了告诉你升级外不会说别的东西。
如果你运行预打包的版本(例如 RPM)，请说明，包括那个包可能有的任何子版本号。如果你说的是 Git 快照，
也请说明，包括提交hash。
</para>
     <!-- 
     <para>
      If your version is older than &version; we will almost certainly
      tell you to upgrade. There are many bug fixes and improvements
      in each new release, so it is quite possible that a bug you have
      encountered in an older release of <productname>PostgreSQL</>
      has already been fixed. We can only provide limited support for
      sites using older releases of <productname>PostgreSQL</>; if you
      require more than we can provide, consider acquiring a
      commercial support contract.
     </para> 
 -->
     <para>
如果你的版本比&version低，我们几乎肯定要告诉你升级。在每个新版本里都修补了大量的臭虫，
所以你在老版本的<productname>PostgreSQL</>里碰到的毛病很有可能已经修复掉了。
我们只能对那些使用老版本的<productname>PostgreSQL</>节点提供有限的支持；
如果你要求的比我们能提供的更多，那么考虑一下商业的合同支持。
     </para> 

    </listitem>

    <listitem>
     <!-- 
     <para>
      Platform information. This includes the kernel name and version,
      C library, processor, memory information, and so on. In most
      cases it is sufficient to report the vendor and version, but do
      not assume everyone knows what exactly <quote>Debian</quote>
      contains or that everyone runs on i386s. If you have
      installation problems then information about the toolchain on
      your machine (compiler, <application>make</application>, and so
      on) is also necessary.
    </para> 
-->
 <para>
平台信息。这包括内核名称和版本、C 库、处理器、存储器信息。
大多数情况下只需要汇报供应商和版本，但是不要指望每个人都很清楚<quote>Debian</quote>
包括什么东西或者说每个人都运行在i386s上。如果你安装有问题，
那么还要详细汇报你机器上的工具的信息(编译器和 <application>make</application>等)。
     </para>
    </listitem>
   </itemizedlist>
<!-- 
   Do not be afraid if your bug report becomes rather lengthy. That is a fact of life.
   It is better to report everything the first time than us having to squeeze the
   facts out of you. On the other hand, if your input files are huge, it is
   fair to ask first whether somebody is interested in looking into it.  Here is
   an <ulink url="http://www.chiark.greenend.org.uk/~sgtatham/bugs.html">article</ulink>
   that outlines some more tips on reporting bugs. 
-->
不要怕你的臭虫汇报太长，这就是生活。一开始就汇报所有的事情要比让我们从你那里挤出事实要好。
另外，如果你的输入文件非常巨大，先问问有没有人有兴趣查看它也是合理的。这里有一篇
<ulink url="http://www.chiark.greenend.org.uk/~sgtatham/bugs.html">文章</ulink>，
概述了一些汇报臭虫的更多的提示。
  </para>

  <!-- 
  <para>
   Do not spend all your time to figure out which changes in the input make
   the problem go away. This will probably not help solving it. If it turns
   out that the bug cannot be fixed right away, you will still have time to
   find and share your work-around. Also, once again, do not waste your time
   guessing why the bug exists. We will find that out soon enough.
  </para> 
  -->
  <para>
不要把时间花在寻找如何通过修改输入来消除问题的方法上。
这样很可能不会对解决问题有任何帮助。如果发现不能直接修理臭虫，
你还有时间来查找和共享你的绕过方法。还有，我们再说一次，
不要在猜测臭虫的位置上面浪费时间。我们能够及时找到错误。
  </para>
  <!-- 
  <para>
   When writing a bug report, please avoid confusing terminology.
   The software package in total is called <quote>PostgreSQL</quote>,
   sometimes <quote>Postgres</quote> for short. If you
   are specifically talking about the backend process, mention that, do not
   just say <quote>PostgreSQL crashes</quote>.  A crash of a single
   backend process is quite different from crash of the parent
   <quote>postgres</> process; please don't say <quote>the server
   crashed</> when you mean a single backend process went down, nor vice versa.
   Also, client programs such as the interactive frontend <quote><application>psql</application></quote>
   are completely separate from the backend.  Please try to be specific
   about whether the problem is on the client or server side.
  </para> 
  -->
    <para>
在你书写臭虫汇报时，请选用不易混淆的术语。软件包本身被称为<quote>PostgreSQL</quote>，
有时简称为<quote>Postgres</quote>。当你特指后端服务器进程时，请明确说明，
而不要仅仅是说<quote>PostgreSQL 崩溃了</quote>。一个独立后端服务器进程的崩溃和父进程
<quote>postgres</>崩溃是相当不同的；如果你是说独立后端进程崩溃了，那么请不要说<quote>服务器崩溃了</>，
反之亦然。同样，客户端程序，比如交互式前端<quote><application>psql</application></quote>
是和后端完全独立的。请试图说明清楚问题是出现在客户端还是服务器端。
  </para> 
 </sect2>

 <sect2>
  <!-- <title>Where to Report Bugs</title> -->
<title>到哪里汇报臭虫</title>
  <!-- 
  <para>
   In general, send bug reports to the bug report mailing list at
   <email>pgsql-bugs@postgresql.org</email>.
   You are requested to use a descriptive subject for your email
   message, perhaps parts of the error message.
  </para> 
  -->
  <para>
通常，把汇报发到臭虫汇报邮件列表<email>pgsql-bugs@postgresql.org</email>。
我们要求你为电子邮件消息选用一个描述性的题目，也许就用错误信息的一部分。
  </para>
  <!-- 
  <para>
   Another method is to fill in the bug report web-form available
   at the project's
   <ulink url="http://www.postgresql.org/">web site</ulink>.
   Entering a bug report this way causes it to be mailed to the
   <email>pgsql-bugs@postgresql.org</email> mailing list.
  </para> 
  -->
<para> 
另外一个方法是填充 web 表单形式的臭虫报告，你可以在项目的
<ulink url="http://www.postgresql.org/">web 站点</ulink>找到。
用这种方法输入一个臭虫报告会导致它被发送到<email>pgsql-bugs@postgresql.org</email>邮件列表。
</para>
  <!-- 
  <para>
   If your bug report has security implications and you'd prefer that it
   not become immediately visible in public archives, don't send it to
   <literal>pgsql-bugs</literal>.  Security issues can be
   reported privately to <email>security@postgresql.org</email>.
  </para> 
  -->
  <para>
如果你的臭虫报告隐含带有安全问题，而你不想它立即出现在公开的档案库里，
那么就不要发送到<literal>pgsql-bugs</literal>。安全问题可以私下里报告到
<email>security@postgresql.org</email>。
  </para>
  <!-- 
  <para>
   Do not send bug reports to any of the user mailing lists, such as
   <email>pgsql-sql@postgresql.org</email> or
   <email>pgsql-general@postgresql.org</email>.
   These mailing lists are for answering
   user questions, and their subscribers normally do not wish to receive
   bug reports. More importantly, they are unlikely to fix them.
  </para> 
  -->
  <para> 
不要把臭虫汇报发送到任何用户邮件列表里，例如 SQL 语言邮件列表<email>pgsql-sql@postgresql.org</email>
或<email>pgsql-general@postgresql.org</email>。这些邮件列表用于回答用户问题，
而且那些订阅者通常不希望接收臭虫汇报。更重要的是，他们很可能不会修理这些臭虫。
  </para>
  <!-- 
  <para>
   Also, please do <emphasis>not</emphasis> send reports to
   the developers' mailing list <email>pgsql-hackers@postgresql.org</email>.
   This list is for discussing the
   development of <productname>PostgreSQL</productname>, and it would be nice
   if we could keep the bug reports separate. We might choose to take up a
   discussion about your bug report on <literal>pgsql-hackers</literal>,
   if the problem needs more review.
  </para> 
  -->
  <para>
还有，请<emphasis>不要</emphasis>向开发者邮件列表<email>pgsql-hackers@postgresql.org</email>
发送臭虫汇报。这个列表用于讨论<productname>PostgreSQL</productname>的开发，
因而我们很希望能和臭虫汇报分离开。如果修理某个毛病需要更多评论，
我们可能会在这个<literal>pgsql-hackers</literal>列表开一个关于你的臭虫的讨论会。
  </para>
  <!-- 
  <para>
   If you have a problem with the documentation, the best place to report it
   is the documentation mailing list <email>pgsql-docs@postgresql.org</email>.
   Please be specific about what part of the documentation you are unhappy
   with.
  </para> 
  -->
 <para>
如果你觉得文档有问题，请发电子邮件到文档邮件列表<email>pgsql-docs@postgresql.org</email>，
在你的问题汇报里面指明你认为哪部分有错误。
  </para>
  <!-- 
  <para>
   If your bug is a portability problem on a non-supported platform,
   send mail to <email>pgsql-hackers@postgresql.org</email>,
   so we (and you) can work on
   porting <productname>PostgreSQL</productname> to your platform.
  </para> 
  -->
  <para>
如果你的臭虫是一个在不支持平台上的移植性问题，
向移植性问题邮件列表<email>pgsql-hackers@postgresql.org</email>发送电子邮件，
这样我们(还有你)可以一起尝试把<productname>PostgreSQL</productname>移植到你的平台上。
  </para>
  <note>
   <!-- 
   <para>
    Due to the unfortunate amount of spam going around, all of the above
    email addresses are closed mailing lists. That is, you need to be
    subscribed to a list to be allowed to post on it.  (You need not be
    subscribed to use the bug-report web form, however.)
    If you would like to send mail but do not want to receive list traffic,
    you can subscribe and set your subscription option to <literal>nomail</>.
    For more information send mail to
    <email>majordomo@postgresql.org</email>
    with the single word <literal>help</> in the body of the message.
   </para> 
   -->
     <para>
由于我们不愿意看到各种各样的垃圾邮件，上面的所有电子邮件地址都是封闭的邮件地址。
也就是说，你需要先申请，然后才能发帖子(用 web 表单提交臭虫报告用不着申请)。
如果你只是想发送邮件而不想接受列表的往来邮件，你可以提交邮件并且把提交选项设置为
<literal>nomail</>。如果需要更多的信息，你可以向<email>majordomo@postgresql.org</email>
发送一封邮件，邮件的正文只有一个单词<literal>help</>就可以了。
  </para>
  </note>
 </sect2>
</sect1>
