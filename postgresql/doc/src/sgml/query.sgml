<!-- doc/src/sgml/query.sgml -->

 <chapter id="tutorial-sql">
 <!--
  <title>The <acronym>SQL</acronym> Language</title>
-->
<title><acronym>SQL</acronym>语言</title>
  <sect1 id="tutorial-sql-intro">
   <!--
   <title>Introduction</title>
-->
<title>介绍</title>
<!--
   <para>
    This chapter provides an overview of how to use
    <acronym>SQL</acronym> to perform simple operations.  This
    tutorial is only intended to give you an introduction and is in no
    way a complete tutorial on <acronym>SQL</acronym>.  Numerous books
    have been written on <acronym>SQL</acronym>, including <xref
    linkend="MELT93"> and <xref linkend="DATE97">.
    You should be aware that some <productname>PostgreSQL</productname>
    language features are extensions to the standard.
   </para>
-->
<para>
本章提供一个如何使用<acronym>SQL</acronym>执行简单操作的概述。本教程的
目的只是给你一个介绍，并非完整的<acronym>SQL</acronym>教程。有许多关于
<acronym>SQL</acronym>的书，包括<xref linkend="MELT93">和
<xref linkend="DATE97">。而且你还要知道有些<productname>PostgreSQL</productname>
语言特性是对标准的扩展。
</para>
<!--
   <para>
    In the examples that follow, we assume that you have created a
    database named <literal>mydb</literal>, as described in the previous
    chapter, and have been able to start <application>psql</application>.
   </para>
-->
<para>
在随后的例子里，我们假设你已经创建了名为<literal>mydb</literal>的数据库，
就像在前面的章里面介绍的一样，并且已经启动了<application>psql</application>。
</para>
<!--
   <para>
    Examples in this manual can also be found in the
    <productname>PostgreSQL</productname> source distribution
    in the directory <filename>src/tutorial/</filename>.  (Binary
    distributions of <productname>PostgreSQL</productname> might not
    compile these files.)  To use those
    files, first change to that directory and run <application>make</>:
-->
 <para>
本手册的例子也可以在<productname>PostgreSQL</productname>源代码发布目录里的
<filename>src/tutorial/</filename>中找到。（<productname>PostgreSQL</productname>
二进制包中可能不编译这些文件）要使用这些文件，先进入该目录然后运行<application>make</>： 
<screen>
<prompt>$</prompt> <userinput>cd <replaceable>....</replaceable>/src/tutorial</userinput>
<prompt>$</prompt> <userinput>make</userinput>
</screen>
<!--
    This creates the scripts and compiles the C files containing user-defined
    functions and types.  Then, to start the tutorial, do the following:
-->
这样就创建了那些脚本以及编译了包含用户定义函数和类型的C文件。如下开始本教程： 
<screen>
<prompt>$</prompt> <userinput>cd <replaceable>....</replaceable>/tutorial</userinput>
<prompt>$</prompt> <userinput>psql -s mydb</userinput>
<computeroutput>
...
</computeroutput>

<prompt>mydb=&gt;</prompt> <userinput>\i basics.sql</userinput>
</screen>
<!--
    The <literal>\i</literal> command reads in commands from the
    specified file. <command>psql</command>'s <literal>-s</> option puts you in
    single step mode which pauses before sending each statement to the
    server.  The commands used in this section are in the file
    <filename>basics.sql</filename>.
-->
<literal>\i</literal>命令从指定的文件中读取命令。 <command>psql</command>的<literal>-s</>
选项把你置于单步模式，它在向服务器发送每个语句之前暂停。本节使用的命令都在<filename>basics.sql</filename>文件中。
   </para>
  </sect1>


  <sect1 id="tutorial-concepts">
  <!--
   <title>Concepts</title>
-->
<title>概念</title>
   <para>
    <indexterm><primary>relational database</primary></indexterm>
    <indexterm><primary>hierarchical database</primary></indexterm>
    <indexterm><primary>object-oriented database</primary></indexterm>
    <indexterm><primary>relation</primary></indexterm>
    <indexterm><primary>table</primary></indexterm>
<!--
    <productname>PostgreSQL</productname> is a <firstterm>relational
    database management system</firstterm> (<acronym>RDBMS</acronym>).
    That means it is a system for managing data stored in
    <firstterm>relations</firstterm>.  Relation is essentially a
    mathematical term for <firstterm>table</firstterm>.  The notion of
    storing data in tables is so commonplace today that it might
    seem inherently obvious, but there are a number of other ways of
    organizing databases.  Files and directories on Unix-like
    operating systems form an example of a hierarchical database.  A
    more modern development is the object-oriented database.
-->
<productname>PostgreSQL</productname>是一种<firstterm>关系型数据库管理系统</firstterm>
(<acronym>RDBMS</acronym>)。这意味着它是一种用于管理那些以<firstterm>关系</firstterm>
形式存储数据的系统。关系实际上是<firstterm>表</firstterm>的数学称呼。今天，
把数据存储在表里的概念已经快成固有的常识了，但是还有其它一些方法用于组织数据库。
在类 Unix 操作系统上的文件和目录就形成了一种层次数据库的例子。更现代的发展是面
向对象的数据库。
   </para>

   <para>
    <indexterm><primary>row</primary></indexterm>
    <indexterm><primary>column</primary></indexterm>
<!--
    Each table is a named collection of <firstterm>rows</firstterm>.
    Each row of a given table has the same set of named
    <firstterm>columns</firstterm>,
    and each column is of a specific data type.  Whereas columns have
    a fixed order in each row, it is important to remember that SQL
    does not guarantee the order of the rows within the table in any
    way (although they can be explicitly sorted for display).
-->
每个表都是一个命名的<firstterm>行</firstterm>的集合。每一行由一组相同的命名
<firstterm>字段</firstterm>组成。而且每个字段都有一个特定的类型。虽然每个字
段在每一行里的位置是固定的，但一定要记住 SQL 并未对行在表中的顺序做任何保证
(但你可以对它们进行明确的排序显示)。
   </para>

   <para>
    <indexterm><primary>database cluster</primary></indexterm>
    <indexterm><primary>cluster</primary><secondary>of databases</secondary><see>database cluster</see></indexterm>
<!--
    Tables are grouped into databases, and a collection of databases
    managed by a single <productname>PostgreSQL</productname> server
    instance constitutes a database <firstterm>cluster</firstterm>.
-->
表组成数据库，一个由某个<productname>PostgreSQL</productname>服务器管理的数据库
集合组成一个数据库<firstterm>集群</firstterm>。
   </para>
  </sect1>


  <sect1 id="tutorial-table">
  <!--
   <title>Creating a New Table</title>
-->
<title>创建新表</title>
   <indexterm zone="tutorial-table">
    <primary>CREATE TABLE</primary>
   </indexterm>

   <para>
     <!--
    You  can  create  a  new  table by specifying the table
    name, along with all column names and their types:
-->
你可以通过声明表的名字和所有字段的名字及其类型来创建表：
<programlisting>
CREATE TABLE weather (
    city            varchar(80),
    temp_lo         int,           -- low temperature
    temp_hi         int,           -- high temperature
    prcp            real,          -- precipitation
    date            date
);
</programlisting>
<!--
    You can enter this into <command>psql</command> with the line
    breaks.  <command>psql</command> will recognize that the command
    is not terminated until the semicolon.
   </para>
-->
你可以在<command>psql</command>里连换行符一起键入这些东西。<command>psql</command>
可以识别该命令直到分号才结束。
</para>
<!--
   <para>
    White space (i.e., spaces, tabs, and newlines) can be used freely
    in SQL commands.  That means you can type the command aligned
    differently than above, or even all on one line.  Two dashes
    (<quote><literal>&#045;-</literal></quote>) introduce comments.
    Whatever follows them is ignored up to the end of the line.  SQL
    is case insensitive about key words and identifiers, except
    when identifiers are double-quoted to preserve the case (not done
    above).
   </para>
-->
<para>
你可以在 SQL 命令中自由使用空白(空格，tab，换行符)。这意味着你可以用
和上面不同的对齐方式(甚至在同一行中)键入命令。双划线(<quote><literal>--</literal></quote>)
引入注释，任何跟在它后面的东西直到该行的结尾都被忽略。SQL 是对关键字
和标识符大小写不敏感的语言，只有在标识符用双引号包围时才能保留它们的
大小写属性(上面没有这么干)。
</para>
<!--
   <para>
    <type>varchar(80)</type> specifies a data type that can store
    arbitrary character strings up to 80 characters in length.
    <type>int</type> is the normal integer type.  <type>real</type> is
    a type for storing single precision floating-point numbers.
    <type>date</type> should be self-explanatory.  (Yes, the column of
    type <type>date</type> is also named <structfield>date</structfield>.
    This might be convenient or confusing &mdash; you choose.)
   </para>
-->
<para>
<type>varchar(80)</type>声明一个可以存储最长 80 个字符的任意字符串的数据类型。
<type>int</type>是普通的整数类型。<type>real</type>是一种用于存储单精度浮点数
的类型。<type>date</type>类型应该可以自解释。没错，类型为<type>date</type>的字
段名字也是<structfield>date</structfield>。这么做可能比较方便，也可能容易让人
混淆，你自己看啦。
</para>
<!--
   <para>
    <productname>PostgreSQL</productname> supports the standard
    <acronym>SQL</acronym> types <type>int</type>,
    <type>smallint</type>, <type>real</type>, <type>double
    precision</type>, <type>char(<replaceable>N</>)</type>,
    <type>varchar(<replaceable>N</>)</type>, <type>date</type>,
    <type>time</type>, <type>timestamp</type>, and
    <type>interval</type>, as well as other types of general utility
    and a rich set of geometric types.
    <productname>PostgreSQL</productname> can be customized with an
    arbitrary number of user-defined data types.  Consequently, type
    names are not key words in the syntax, except where required to
    support special cases in the <acronym>SQL</acronym> standard.
   </para>
-->
<para>
<productname>PostgreSQL</productname>支持标准的<acronym>SQL</acronym>类型：
<type>int</type>, <type>smallint</type>, <type>real</type>, <type>double precision</type>, <type>char(<replaceable>N</>)</type>,
<type>varchar(<replaceable>N</>)</type>, <type>date</type>, <type>time</type>, <type>timestamp</type>,和
<type>interval</type>，还支持其它的通用类型和丰富的几何类型。<productname>PostgreSQL</productname>
允许你自定义任意数量的数据类型。因而类型名并不是语法关键字，除了<acronym>SQL</acronym>
标准要求支持的特例外。
</para>
<!--
   <para>
    The second example will store cities and their associated
    geographical location:
-->
<para>
第二个例子将保存城市和它们相关的地理位置：
<programlisting>
CREATE TABLE cities (
    name            varchar(80),
    location        point
);
</programlisting>
<!--
    The <type>point</type> type is an example of a
    <productname>PostgreSQL</productname>-specific data type.
-->
<type>point</type>类型就是一个<productname>PostgreSQL</productname>特有的数据类型的例子。
   </para>

   <para>
    <indexterm>
     <primary>DROP TABLE</primary>
    </indexterm>
<!--
    Finally, it should be mentioned that if you don't need a table any
    longer or want to recreate it differently you can remove it using
    the following command:
-->
最后，我们还要提到如果你不再需要某个表，或者你想创建一个不同的表，那么你可以用下面的命令删除它：
<synopsis>
DROP TABLE <replaceable>tablename</replaceable>;
</synopsis>
   </para>
  </sect1>


  <sect1 id="tutorial-populate">
  <!--
   <title>Populating a Table With Rows</title>
-->
<title>向表中添加行</title>
   <indexterm zone="tutorial-populate">
    <primary>INSERT</primary>
   </indexterm>

   <para>
   <!--
    The <command>INSERT</command> statement is used to populate a table  with
    rows:
-->
<command>INSERT</command>语句用于向表中添加行：
<programlisting>
INSERT INTO weather VALUES ('San Francisco', 46, 50, 0.25, '1994-11-27');
</programlisting>
<!--
    Note that all data types use rather obvious input formats.
    Constants that are not simple numeric values usually must be
    surrounded by single quotes (<literal>'</>), as in the example.
    The
    <type>date</type> type is actually quite flexible in what it
    accepts, but for this tutorial we will stick to the unambiguous
    format shown here.
-->
请注意所有数据类型都使用了相当明了的输入格式。那些不是简单数字值的常量必
需用单引号(<literal>'</>)包围，就像在例子里一样。<type>date</type>类型实际上
对可接收的格式相当灵活，不过在本教程里，我们应该坚持使用这里显示的格式。
   </para>
<!--
   <para>
    The <type>point</type> type requires a coordinate pair as input,
    as shown here:
-->
<para>
<type>point</type>类型要求一个坐标对作为输入，如下：
<programlisting>
INSERT INTO cities VALUES ('San Francisco', '(-194.0, 53.0)');
</programlisting>
   </para>
<!--
   <para>
    The syntax used so far requires you to remember the order of the
    columns.  An alternative syntax allows you to list the columns
    explicitly:
-->
<para>
到目前为止使用的语法要求你记住字段的顺序。一个可选的语法允许你明确地列出字段：
<programlisting>
INSERT INTO weather (city, temp_lo, temp_hi, prcp, date)
    VALUES ('San Francisco', 43, 57, 0.0, '1994-11-29');
</programlisting>
<!--
    You can list the columns in a different order if you wish or
    even omit some columns, e.g., if the precipitation is unknown:
-->
如果需要，你可以用另外一个顺序列出字段或者是忽略某些字段，比如说，我们不知道降水量：
<programlisting>
INSERT INTO weather (date, city, temp_hi, temp_lo)
    VALUES ('1994-11-29', 'Hayward', 54, 37);
</programlisting>
<!--
    Many developers consider explicitly listing the columns better
    style than relying on the order implicitly.
-->
许多开发人员认为明确列出字段要比依赖隐含的顺序是更好的风格。
   </para>
<!--
   <para>
    Please enter all the commands shown above so you have some data to
    work with in the following sections.
   </para>
-->
<para>
请输入上面显示的所有命令，这样你在随后的各节中才有可用的数据。
</para>
   <para>
    <indexterm>
     <primary>COPY</primary>
    </indexterm>
<!--
    You could also have used <command>COPY</command> to load large
    amounts of data from flat-text files.  This is usually faster
    because the <command>COPY</command> command is optimized for this
    application while allowing less flexibility than
    <command>INSERT</command>.  An example would be:
-->
你还可以使用<command>COPY</command>从文本文件中装载大量数据。这么干通常更快，
因为<command>COPY</command>命令就是为这类应用优化的，只是比<command>INSERT</command>
少一些灵活性。比如：
<programlisting>
COPY weather FROM '/home/user/weather.txt';
</programlisting>
<!--
    where the file name for the source file must be available on the
    machine running the backend process, not the client, since the backend process
    reads the file directly.  You can read more about the
    <command>COPY</command> command in <xref linkend="sql-copy">.
-->
这里源文件的文件名必须在运行后端进程的那台机器上有效，而不是在客户端上，因为后端进程直接读取这个文件。
你可以在<xref linkend="sql-copy">中读到更多有关<command>COPY</command>命令的信息。
   </para>
  </sect1>


  <sect1 id="tutorial-select">
  <!--
   <title>Querying a Table</title>
-->
<title>查询一个表</title>
   <para>
    <indexterm><primary>query</primary></indexterm>
    <indexterm><primary>SELECT</primary></indexterm>
<!--
    To retrieve data from a table, the table is
    <firstterm>queried</firstterm>.  An <acronym>SQL</acronym>
    <command>SELECT</command> statement is used to do this.  The
    statement is divided into a select list (the part that lists the
    columns to be returned), a table list (the part that lists the
    tables from which to retrieve the data), and an optional
    qualification (the part that specifies any restrictions).  For
    example, to retrieve all the rows of table
    <structname>weather</structname>, type:
-->
要从一个表中检索数据就是<firstterm>查询</firstterm>这个表。<acronym>SQL</acronym>
的<command>SELECT</command>语句就是做这个用途的。该语句分为选择列表(列出要返回的字
段)、表列表(列出从中检索数据的表)、以及可选的条件(声明任意限制)。比如，要检索表
<structname>weather</structname>的所有行，键入：
<programlisting>
SELECT * FROM weather;
</programlisting>
<!--
    Here <literal>*</literal> is a shorthand for <quote>all columns</quote>.
 --> 
 这里的<literal>*</literal>是<quote>所有字段</quote>的缩写。
 <footnote>
 <!--
      <para>
       While <literal>SELECT *</literal> is useful for off-the-cuff
       queries, it is widely considered bad style in production code,
       since adding a column to the table would change the results.
      </para>
   --> 
<para>
虽然<literal>SELECT *</literal>对于即兴的查询是有用的，但我们普遍认为在生产代码中
这是很糟糕的风格，因为给表增加一个字段就改变了结果。
</para>
     </footnote>
 <!-- 
    So the same result would be had with:
 --> 
因此同样的结果可以用下面的语句获得：
<programlisting>
SELECT city, temp_lo, temp_hi, prcp, date FROM weather;
</programlisting>
<!--
    The output should be:
--> 
而输出应该是：
<screen>
     city      | temp_lo | temp_hi | prcp |    date
---------------+---------+---------+------+------------
 San Francisco |      46 |      50 | 0.25 | 1994-11-27
 San Francisco |      43 |      57 |    0 | 1994-11-29
 Hayward       |      37 |      54 |      | 1994-11-29
(3 rows)
</screen>
   </para>

   <para>
 <!--  
    You can write expressions, not just simple column references, in the
    select list.  For example, you can do:
-->
你可以在选择列表中写任意表达式，而不仅仅是字段列表。比如，你可以：
<programlisting>
SELECT city, (temp_hi+temp_lo)/2 AS temp_avg, date FROM weather;
</programlisting>
<!-- 
    This should give:
-->
这样应该得到：
<screen>
     city      | temp_avg |    date
---------------+----------+------------
 San Francisco |       48 | 1994-11-27
 San Francisco |       50 | 1994-11-29
 Hayward       |       45 | 1994-11-29
(3 rows)
</screen>
<!--
    Notice how the <literal>AS</literal> clause is used to relabel the
    output column.  (The <literal>AS</literal> clause is optional.)
-->
请注意这里的<literal>AS</literal>子句是如何给输出字段重新命名的。<literal>AS</literal>
子句是可选的。
   </para>

   <para>
 <!--  
    A query can be <quote>qualified</> by adding a <literal>WHERE</>
    clause that specifies which rows are wanted.  The <literal>WHERE</>
    clause contains a Boolean (truth value) expression, and only rows for
    which the Boolean expression is true are returned.  The usual
    Boolean operators (<literal>AND</literal>,
    <literal>OR</literal>, and <literal>NOT</literal>) are allowed in
    the qualification.  For example, the following
    retrieves the weather of San Francisco on rainy days:
-->
一个查询可以使用<literal>WHERE</>子句进行<quote>修饰</>，声明需要哪些行。
<literal>WHERE</>子句包含一个布尔表达式（值为真），只有那些布尔表达式为
真的行才会被返回。允许你在条件中使用常用的布尔操作符(<literal>AND</literal>,
<literal>OR</literal>,<literal>NOT</literal>)。比如，下面的查询检索旧金山的下
雨天的天气：
<programlisting>
SELECT * FROM weather
    WHERE city = 'San Francisco' AND prcp &gt; 0.0;
</programlisting>
<!--
    Result:
-->
结果：
<screen>
     city      | temp_lo | temp_hi | prcp |    date
---------------+---------+---------+------+------------
 San Francisco |      46 |      50 | 0.25 | 1994-11-27
(1 row)
</screen>
   </para>

   <para>
    <indexterm><primary>ORDER BY</primary></indexterm>
<!--
    You can request that the results of a query
    be returned in sorted order:
-->
你可以要求返回的查询是排好序的：
<programlisting>
SELECT * FROM weather
    ORDER BY city;
</programlisting>

<screen>
     city      | temp_lo | temp_hi | prcp |    date
---------------+---------+---------+------+------------
 Hayward       |      37 |      54 |      | 1994-11-29
 San Francisco |      43 |      57 |    0 | 1994-11-29
 San Francisco |      46 |      50 | 0.25 | 1994-11-27
</screen>
<!--
    In this example, the sort order isn't fully specified, and so you
    might get the San Francisco rows in either order.  But you'd always
    get the results shown above if you do:
-->
在这个例子里，排序的顺序并非绝对清晰的，因此你可能看到 San Francisco 行
随机的排序。但是如果你使用下面的语句，那么就总是会得到上面的结果：
<programlisting>
SELECT * FROM weather
    ORDER BY city, temp_lo;
</programlisting>
   </para>

   <para>
    <indexterm><primary>DISTINCT</primary></indexterm>
    <indexterm><primary>duplicate</primary></indexterm>
<!--
    You can request that duplicate rows be removed from the result of
    a query:
-->
你可以要求查询的结果消除重复行的输出：
<programlisting>
SELECT DISTINCT city
    FROM weather;
</programlisting>

<screen>
     city
---------------
 Hayward
 San Francisco
(2 rows)
</screen>
<!--
    Here again, the result row ordering might vary.
    You can ensure consistent results by using <literal>DISTINCT</literal> and
    <literal>ORDER BY</literal> together:
-->
再次声明，结果行的顺序可能是随机的。你可以组合使用<literal>DISTINCT</literal>
和<literal>ORDER BY</literal>来获取一致的结果：
     <footnote>
 <!--
      <para>
       In some database systems, including older versions of
       <productname>PostgreSQL</productname>, the implementation of
       <literal>DISTINCT</literal> automatically orders the rows and
       so <literal>ORDER BY</literal> is unnecessary.  But this is not
       required by the SQL standard, and current
       <productname>PostgreSQL</productname> does not guarantee that
       <literal>DISTINCT</literal> causes the rows to be ordered.
      </para>
  -->
 <para>
在一些数据库系统里，包括老版本的<productname>PostgreSQL</productname>，
<literal>DISTINCT</literal>自动对行进行排序，因此<literal>ORDER BY</literal>
是多余的。但是这一点并不是 SQL 标准的要求，并且目前的<productname>PostgreSQL</productname>
并不保证<literal>DISTINCT</literal>导致数据行被排序。
</para> 
     </footnote>

<programlisting>
SELECT DISTINCT city
    FROM weather
    ORDER BY city;
</programlisting>
   </para>
  </sect1>


  <sect1 id="tutorial-join">
  <!--
   <title>Joins Between Tables</title>
-->
<title>在表间连接</title>
   <indexterm zone="tutorial-join">
    <primary>join</primary>
   </indexterm>

   <para>
   <!--
    Thus far, our queries have only accessed one table at a time.
    Queries can access multiple tables at once, or access the same
    table in such a way that multiple rows of the table are being
    processed at the same time.  A query that accesses multiple rows
    of the same or different tables at one time is called a
    <firstterm>join</firstterm> query.  As an example, say you wish to
    list all the weather records together with the location of the
    associated city.  To do that, we need to compare the <structfield>city</>
    column of each row of the <structname>weather</> table with the
    <structfield>name</> column of all rows in the <structname>cities</>
    table, and select the pairs of rows where these values match.
-->
到目前为止，我们的查询一次只访问了一个表。查询可以一次访问多个表，
或者用某种方式访问一个表，而同时处理该表的多个行。一个同时访问同一个或
者不同表的多个行的查询叫<firstterm>连接</firstterm>查询。举例来说，比如你
想列出所有天气记录以及这些记录相关的城市。要实现这个目标，我们需要拿
<structname>weather</>表每行的<structfield>city</>字段和<structname>cities</>
表所有行的<structfield>name</>字段进行比较，并选取那些这些数值相匹配的行。
    <note>
     <para>
 <!--
      This  is only a conceptual model.  The join is usually performed
      in a more efficient manner than actually comparing each possible
      pair of rows, but this is invisible to the user.
  -->
  这里只是一个概念上的模型。连接通常以比实际比较每个可能的配对行更高效
  的方式执行，但这些是用户看不到的。
     </para>
    </note>
<!--
    This would be accomplished by the following query:
-->
这个任务可以用下面的查询来实现：
<programlisting>
SELECT *
    FROM weather, cities
    WHERE city = name;
</programlisting>

<screen>
     city      | temp_lo | temp_hi | prcp |    date    |     name      | location
---------------+---------+---------+------+------------+---------------+-----------
 San Francisco |      46 |      50 | 0.25 | 1994-11-27 | San Francisco | (-194,53)
 San Francisco |      43 |      57 |    0 | 1994-11-29 | San Francisco | (-194,53)
(2 rows)
</screen>

   </para>

   <para>
   <!--
    Observe two things about the result set:
-->
观察结果集的两个方面：
    <itemizedlist>
     <listitem>
 <!--
      <para>
       There is no result row for the city of Hayward.  This is
       because there is no matching entry in the
       <structname>cities</structname> table for Hayward, so the join
       ignores the unmatched rows in the <structname>weather</> table.  We will see
       shortly how this can be fixed.
      </para>
  -->
<para>
没有城市 Hayward 的结果行。这是因为在<structname>cities</structname>表里面没有与
 Hayward 匹配的行，所以连接忽略了<structname>weather</>表里的不匹配行。我们稍后将
 看到如何修补这个问题。  
</para>
     </listitem>

     <listitem>
 <!--
      <para>
       There are two columns containing the city name.  This is
       correct because the lists of columns from the
       <structname>weather</structname> and
       <structname>cities</structname> tables are concatenated.  In
       practice this is undesirable, though, so you will probably want
       to list the output columns explicitly rather than using
       <literal>*</literal>:
   -->
 <para>
有两个字段包含城市名。这是正确的，因为<structname>weather</structname>和
<structname>cities</structname>表的字段是接在一起的。不过，实际上我们不想要这些，
因此你将可能希望明确列出输出字段而不是使用<literal>*</literal>： 
<programlisting>
SELECT city, temp_lo, temp_hi, prcp, date, location
    FROM weather, cities
    WHERE city = name;
</programlisting>
      </para>
     </listitem>
    </itemizedlist>
   </para>

   <formalpara>
   <!--
    <title>Exercise:</title>
-->
<title>练习:</title>
<!--
    <para>
     Attempt to determine the semantics of this query when the
     <literal>WHERE</literal> clause is omitted.
    </para>
-->
<para>
看看省略<literal>WHERE</literal>子句的含义是什么。
</para>
   </formalpara>

   <para>
   <!--
    Since the columns all had different names, the parser
    automatically found which table they belong to.  If there
    were duplicate column names in the two tables you'd need to
    <firstterm>qualify</> the column names to show which one you
    meant, as in:
-->
因为这些字段的名字都不一样，所以分析器自动找出它们属于哪个表，但是如果两个
表中有重复的字段名，你就必须使用字段全称<firstterm>限定</>你想要的字段：
<programlisting>
SELECT weather.city, weather.temp_lo, weather.temp_hi,
       weather.prcp, weather.date, cities.location
    FROM weather, cities
    WHERE cities.name = weather.city;
</programlisting>
<!--
    It is widely considered good style to qualify all column names
    in a join query, so that the query won't fail if a duplicate
    column name is later added to one of the tables.
-->
一般认为在连接查询里使用字段全称是很好的风格，这样，即使在将来向其中一个
表里添加了同名字段也不会引起混淆。
   </para>

   <para>
   <!--
    Join queries of the kind seen thus far can also be written in this
    alternative form:
-->
到目前为止，这种类型的连接查询也可以用下面这样的形式写出来：
<programlisting>
SELECT *
    FROM weather INNER JOIN cities ON (weather.city = cities.name);
</programlisting>
<!--
    This syntax is not as commonly used as the one above, but we show
    it here to help you understand the following topics.
-->
这个语法并非像上面那个那么常用，我们在这里写出来是为了让你更容易了解后面
的主题。
   </para>

   <para>
    <indexterm><primary>join</primary><secondary>outer</secondary></indexterm>
<!--
    Now we will figure out how we can get the Hayward records back in.
    What we want the query to do is to scan the
    <structname>weather</structname> table and for each row to find the
    matching <structname>cities</structname> row(s).  If no matching row is
    found we want some <quote>empty values</quote> to be substituted
    for the <structname>cities</structname> table's columns.  This kind
    of query is called an <firstterm>outer join</firstterm>.  (The
    joins we have seen so far are inner joins.)  The command looks
    like this:
-->
现在我们将看看如何能把 Hayward 记录找回来。我们想让查询干的事是扫描
<structname>weather</structname>表，并且对每一行都找出匹配的<structname>cities</structname>
表里面的行。如果没有找到匹配的行，那么需要一些<quote>空值</quote>代替
<structname>cities</structname>表的字段。这种类型的查询叫 <firstterm>外连接</firstterm>
(我们在此之前看到的连接都是内连接)。这样的命令看起来像这样：
<programlisting>
SELECT *
    FROM weather LEFT OUTER JOIN cities ON (weather.city = cities.name);

     city      | temp_lo | temp_hi | prcp |    date    |     name      | location
---------------+---------+---------+------+------------+---------------+-----------
 Hayward       |      37 |      54 |      | 1994-11-29 |               |
 San Francisco |      46 |      50 | 0.25 | 1994-11-27 | San Francisco | (-194,53)
 San Francisco |      43 |      57 |    0 | 1994-11-29 | San Francisco | (-194,53)
(3 rows)
</programlisting>
<!--
    This query is called a <firstterm>left outer
    join</firstterm> because the table mentioned on the left of the
    join operator will have each of its rows in the output at least
    once, whereas the table on the right will only have those rows
    output that match some row of the left table.  When outputting a
    left-table row for which there is no right-table match, empty (null)
    values are substituted for the right-table columns.
-->
这个查询是一个<firstterm>左外连接</firstterm>，因为连接操作符(LEFT OUTER JOIN)
左边的表中的行在输出中至少出现一次，而右边的表只输出那些与左边的表中的某些行匹
配的行。如果输出的左表中的行没有右表中的行与其对应，那么右表中的字段将填充为 NULL 。
   </para>

   <formalpara>
   <!--
    <title>Exercise:</title>
-->
<title>练习:</title>
<!--
    <para>
     There are also right outer joins and full outer joins.  Try to
     find out what those do.
    </para>
-->
<para>
还有右连接和全连接。试着找出来它们能干什么。
</para>
   </formalpara>

   <para>
    <indexterm><primary>join</primary><secondary>self</secondary></indexterm>
    <indexterm><primary>alias</primary><secondary>for table name in query</secondary></indexterm>
<!--
    We can also join a table against itself.  This is called a
    <firstterm>self join</firstterm>.  As an example, suppose we wish
    to find all the weather records that are in the temperature range
    of other weather records.  So we need to compare the
    <structfield>temp_lo</> and <structfield>temp_hi</> columns of
    each <structname>weather</structname> row to the
    <structfield>temp_lo</structfield> and
    <structfield>temp_hi</structfield> columns of all other
    <structname>weather</structname> rows.  We can do this with the
    following query:
-->
我们也可以把一个表和它自己连接起来。这叫<firstterm>自连接</firstterm>。
比如，假设我们想找出那些在其它天气记录的温度范围之外的天气记录。
这样我们就需要拿<structname>weather</structname>表里每行的<structfield>temp_lo</>和<structfield>temp_hi</>
字段与<structname>weather</structname>表里其它行的<structfield>temp_lo</structfield>
和<structfield>temp_hi</structfield>字段进行比较。我们可以用下面的查询实现这个目标：
<programlisting>
SELECT W1.city, W1.temp_lo AS low, W1.temp_hi AS high,
    W2.city, W2.temp_lo AS low, W2.temp_hi AS high
    FROM weather W1, weather W2
    WHERE W1.temp_lo &lt; W2.temp_lo
    AND W1.temp_hi &gt; W2.temp_hi;

     city      | low | high |     city      | low | high
---------------+-----+------+---------------+-----+------
 San Francisco |  43 |   57 | San Francisco |  46 |   50
 Hayward       |  37 |   54 | San Francisco |  46 |   50
(2 rows)
</programlisting>
<!--
    Here we have relabeled the weather table as <literal>W1</> and
    <literal>W2</> to be able to distinguish the left and right side
    of the join.  You can also use these kinds of aliases in other
    queries to save some typing, e.g.:
-->
在这里我们把 weather 表重新标记为<literal>W1</>和<literal>W2</>以区分连接的左边和右边。
你还可以用这样的别名在其它查询里节约一些敲键，比如：
<programlisting>
SELECT *
    FROM weather w, cities c
    WHERE w.city = c.name;
</programlisting>
<!--
    You will encounter this style of abbreviating quite frequently.
-->
以后会经常碰到这样的缩写。
   </para>
  </sect1>


  <sect1 id="tutorial-agg">
  <!--
   <title>Aggregate Functions</title>
   -->
<title>聚集函数</title>
   <indexterm zone="tutorial-agg">
    <primary>aggregate function</primary>
   </indexterm>
<!--
   <para>
    Like  most  other relational database products,
    <productname>PostgreSQL</productname> supports
    <firstterm>aggregate functions</>.
    An aggregate function computes a single result from multiple input rows.
    For example, there are aggregates to compute the
    <function>count</function>, <function>sum</function>,
    <function>avg</function> (average), <function>max</function> (maximum) and
    <function>min</function> (minimum) over a set of rows.
   </para>
  -->
<para> 
和大多数其它关系数据库产品一样，<productname>PostgreSQL</productname>支持<firstterm>聚集函数</>。
一个聚集函数从多个输入行中计算出一个结果。比如，我们有在一个行集合上计算<function>count</function>(数目),
<function>sum</function>(总和),<function>avg</function>(均值),<function>max</function>(最大值), 
<function>min</function>(最小值)的函数。
</para>
<!--
   <para>
    As an example, we can find the highest low-temperature reading anywhere
    with:
-->
<para>
比如，我们可以用下面的语句找出所有低温中的最高温度：
<programlisting>
SELECT max(temp_lo) FROM weather;
</programlisting>

<screen>
 max
-----
  46
(1 row)
</screen>
   </para>

   <para>
    <indexterm><primary>subquery</primary></indexterm>
<!--
    If we wanted to know what city (or cities) that reading occurred in,
    we might try:
-->
如果我们想知道该读数发生在哪个城市，可能会用：
<programlisting>
<!--
SELECT city FROM weather WHERE temp_lo = max(temp_lo);     <lineannotation>WRONG</lineannotation>
-->
SELECT city FROM weather WHERE temp_lo = max(temp_lo);     <lineannotation>错误</lineannotation>
</programlisting>

    <!-- 
but this will not work since the aggregate
    <function>max</function> cannot be used in the
    <literal>WHERE</literal> clause.  (This restriction exists because
    the <literal>WHERE</literal> clause determines which rows will be
    included in the aggregate calculation; so obviously it has to be evaluated
    before aggregate functions are computed.)
    However, as is often the case
    the query can be restated to accomplish the desired result, here
    by using a <firstterm>subquery</firstterm>: 
-->
不过这个方法不能运转，因为聚集函数<function>max</function>不能用于<literal>WHERE</literal>
子句中。存在这个限制是因为<literal>WHERE</literal>子句决定哪些行可以进入聚集阶段；
因此它必需在聚集函数之前计算。不过，我们可以用其它方法实现这个目的；
这里我们使用<firstterm>子查询</firstterm>：

<programlisting>
SELECT city FROM weather
    WHERE temp_lo = (SELECT max(temp_lo) FROM weather);
</programlisting>

<screen>
     city
---------------
 San Francisco
(1 row)
</screen>

<!--    
This is OK because the subquery is an independent computation
    that computes its own aggregate separately from what is happening
    in the outer query.
-->
这样做是可以的，因为子查询是一次独立的计算，它独立于外层查询计算自己的聚集。
   </para>

   <para>
    <indexterm><primary>GROUP BY</primary></indexterm>
    <indexterm><primary>HAVING</primary></indexterm>

    <!-- 
Aggregates are also very useful in combination with <literal>GROUP
    BY</literal> clauses.  For example, we can get the maximum low
    temperature observed in each city with:
-->
聚集同样也常用于 <literal>GROUP BY</literal>子句。比如，我们可以获取每个城市低温的最高值：
<programlisting>
SELECT city, max(temp_lo)
    FROM weather
    GROUP BY city;
</programlisting>

<screen>
     city      | max
---------------+-----
 Hayward       |  37
 San Francisco |  46
(2 rows)
</screen>

<!-- 
    which gives us one output row per city.  Each aggregate result is
    computed over the table rows matching that city.
    We can filter these grouped
    rows using <literal>HAVING</literal>:
-->
这样每个城市一个输出。每个聚集结果都是在匹配该城市的行上面计算的。
我们可以用<literal>HAVING</literal>过滤这些分组：
<programlisting>
SELECT city, max(temp_lo)
    FROM weather
    GROUP BY city
    HAVING max(temp_lo) &lt; 40;
</programlisting>

<screen>
  city   | max
---------+-----
 Hayward |  37
(1 row)
</screen>

<!-- 
    which gives us the same results for only the cities that have all
    <structfield>temp_lo</> values below 40.  Finally, if we only care about
    cities whose
    names begin with <quote><literal>S</literal></quote>, we might do: 
-->
这样就只给出那些<structfield>temp_lo</>值曾经有低于 40 度的城市。最后，
如果我们只关心那些名字以<quote><literal>S</literal></quote>开头的城市，我们可以用：
<programlisting>
SELECT city, max(temp_lo)
    FROM weather
    WHERE city LIKE 'S%'<co id="co.tutorial-agg-like">
    GROUP BY city
    HAVING max(temp_lo) &lt; 40;
</programlisting>
   <calloutlist>
    <callout arearefs="co.tutorial-agg-like">
    <!-- 
<para>
      The <literal>LIKE</literal> operator does pattern matching and
      is explained in <xref linkend="functions-matching">.
     </para> 
 -->
<para> 
语句中的<literal>LIKE</literal>执行模式匹配，在<xref linkend="functions-matching">里有解释。 
</para> 
    </callout>
   </calloutlist>
   </para>

<!-- 
   <para>
    It is important to understand the interaction between aggregates and
    <acronym>SQL</acronym>'s <literal>WHERE</literal> and <literal>HAVING</literal> clauses.
    The fundamental difference between <literal>WHERE</literal> and
    <literal>HAVING</literal> is this: <literal>WHERE</literal> selects
    input rows before groups and aggregates are computed (thus, it controls
    which rows go into the aggregate computation), whereas
    <literal>HAVING</literal> selects group rows after groups and
    aggregates are computed.  Thus, the
    <literal>WHERE</literal> clause must not contain aggregate functions;
    it makes no sense to try to use an aggregate to determine which rows
    will be inputs to the aggregates.  On the other hand, the
    <literal>HAVING</literal> clause always contains aggregate functions.
    (Strictly speaking, you are allowed to write a <literal>HAVING</literal>
    clause that doesn't use aggregates, but it's seldom useful. The same
    condition could be used more efficiently at the <literal>WHERE</literal>
    stage.)
   </para> 
   -->
<para>
理解聚集和<acronym>SQL</acronym>的<literal>WHERE</literal>和<literal>HAVING</literal>
子句之间的关系非常重要。<literal>WHERE</literal>和<literal>HAVING</literal>的基本区别如下：
<literal>WHERE</literal>在分组和聚集计算之前选取输入行(它控制哪些行进入聚集计算)，
而<literal>HAVING</literal>在分组和聚集之后选取输出行。因此，<literal>WHERE</literal>
子句不能包含聚集函数；因为试图用聚集函数判断那些行将要输入给聚集运算是没有意义的。
相反，<literal>HAVING</literal>子句总是包含聚集函数。当然，你可以写不使用聚集的<literal>HAVING</literal>
子句，但这样做没什么好处，因为同样的条件用在<literal>WHERE</literal>阶段会更有效。
</para>    
<!-- 
   <para>
    In the previous example, we can apply the city name restriction in
    <literal>WHERE</literal>, since it needs no aggregate.  This is
    more efficient than adding the restriction to <literal>HAVING</literal>,
    because we avoid doing the grouping and aggregate calculations
    for all rows that fail the <literal>WHERE</literal> check.
   </para> 
   -->
<para>
在前面的例子里，我们可以在<literal>WHERE</literal>里应用城市名称限制，因为它不需要聚集。
这样比在<literal>HAVING</literal>里增加限制更加高效，因为我们避免了为那些未通过
<literal>WHERE</literal>检查的行进行分组和聚集计算。
</para>   
  </sect1>


  <sect1 id="tutorial-update">
   <!-- <title>Updates</title> -->
<title>更新</title>
   <indexterm zone="tutorial-update">
    <primary>UPDATE</primary>
   </indexterm>

   <para>
<!-- 
    You can update existing rows using the
    <command>UPDATE</command> command.
    Suppose you discover the temperature readings are
    all off by 2 degrees after November 28.  You can correct the
    data as follows: 
-->
你可以用<command>UPDATE</command>命令更新现有的行。假设你发现所有 11 月 28 日的温度计数都低了两度，那么你就可以用下面的方式更新数据：

<programlisting>
UPDATE weather
    SET temp_hi = temp_hi - 2,  temp_lo = temp_lo - 2
    WHERE date &gt; '1994-11-28';
</programlisting>
   </para>

   <para>
    <!-- Look at the new state of the data: -->
看看数据的新状态：
<programlisting>
SELECT * FROM weather;

     city      | temp_lo | temp_hi | prcp |    date
---------------+---------+---------+------+------------
 San Francisco |      46 |      50 | 0.25 | 1994-11-27
 San Francisco |      41 |      55 |    0 | 1994-11-29
 Hayward       |      35 |      52 |      | 1994-11-29
(3 rows)
</programlisting>
   </para>
  </sect1>

  <sect1 id="tutorial-delete">
   <!-- <title>Deletions</title> -->
<title>删除</title>
   <indexterm zone="tutorial-delete">
    <primary>DELETE</primary>
   </indexterm>

   <para>
<!-- 
    Rows can be removed from a table using the <command>DELETE</command>
    command.
    Suppose you are no longer interested in the weather of Hayward.
    Then you can do the following to delete those rows from the table:
-->
数据行可以用<command>DELETE</command>命令从表中删除。假设你对 Hayward 的天气不再感兴趣，
那么你可以用下面的命令把那些行从表中删除：
<programlisting>
DELETE FROM weather WHERE city = 'Hayward';
</programlisting>

    <!-- All weather records belonging to Hayward are removed. -->
所有属于 Hayward 的天气记录都将被删除。
<programlisting>
SELECT * FROM weather;
</programlisting>

<screen>
     city      | temp_lo | temp_hi | prcp |    date
---------------+---------+---------+------+------------
 San Francisco |      46 |      50 | 0.25 | 1994-11-27
 San Francisco |      41 |      55 |    0 | 1994-11-29
(2 rows)
</screen>
   </para>

   <para>
    <!-- One should be wary of statements of the form -->
使用下面形式的语句时一定要小心：
<synopsis>
DELETE FROM <replaceable>tablename</replaceable>;
</synopsis>

<!-- 
    Without a qualification, <command>DELETE</command> will
    remove  <emphasis>all</>  rows from the given table, leaving it
    empty.  The system will not request confirmation before
    doing this! 
-->
如果没有指定条件，<command>DELETE</command>将从指定表中删除<emphasis>所有</>行。
做这些之前系统不会请求你确认！
   </para>
  </sect1>

 </chapter>