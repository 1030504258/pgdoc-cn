<!-- doc/src/sgml/pgstandby.sgml -->

<refentry id="pgstandby">
 <refmeta>
  <refentrytitle><application>pg_standby</application></refentrytitle>
  <manvolnum>1</manvolnum>
  <!--
  <refmiscinfo>Application</refmiscinfo>
  -->
  <refmiscinfo>应用</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>pg_standby</refname>
  <!--
  <refpurpose>supports the creation of a <productname>PostgreSQL</productname> warm standby server</refpurpose>
  -->
  <refpurpose>支持<productname>PostgreSQL</productname>热备份服务器的创建</refpurpose>
 </refnamediv>

 <indexterm zone="pgstandby">
  <primary>pg_standby</primary>
 </indexterm>

 <refsynopsisdiv>
  <cmdsynopsis>
   <command>pg_standby</command>
   <arg rep="repeat"><replaceable>option</replaceable></arg>
   <arg choice="plain"><replaceable>archivelocation</replaceable></arg>
   <arg choice="plain"><replaceable>nextwalfile</replaceable></arg>
   <arg choice="plain"><replaceable>xlogfilepath</replaceable></arg>
   <arg choice="opt"><replaceable>restartwalfile</replaceable></arg>
  </cmdsynopsis>
 </refsynopsisdiv>

 <refsect1>
  <!--
<title>Description</title>
-->
<title>描述</title>

 <!--
<para>
  <application>pg_standby</> supports creation of a <quote>warm standby</>
  database server.  It is designed to be a production-ready program, as well
  as a customizable template should you require specific modifications.
 </para>
-->
<para>
<application>pg_standby</>支持<quote>热备份</>数据库服务器的创建。
它设计为一个生产就绪程序，还有一个可定制的模板，定制你需要的特定修改。
</para>

 <!--
<para>
  <application>pg_standby</> is designed to be a waiting
  <varname>restore_command</>, which is needed to turn a standard
  archive recovery into a warm standby operation.  Other
  configuration is required as well, all of which is described in the main
  server manual (see <xref linkend="warm-standby">).
 </para>
-->
<para>
<application>pg_standby</>设计为一个等待的<varname>restore_command</>，
需要将标准归档恢复返回到一个热备份操作。也需要其他配置，
所有这些都在主要服务器手册(参阅<xref linkend="warm-standby">)中描述。
</para>

  <!--
<para>
   To configure a standby
   server to use <application>pg_standby</>, put this into its
   <filename>recovery.conf</filename> configuration file:
<programlisting>
restore_command = 'pg_standby <replaceable>archiveDir</> %f %p %r'
</programlisting>
   where <replaceable>archiveDir</> is the directory from which WAL segment
   files should be restored.
  </para>
-->
<para>
使用<application>pg_standby</>配置一个备用服务器，
将其放入<filename>recovery.conf</filename>配置文件中：
<programlisting>
restore_command = 'pg_standby <replaceable>archiveDir</> %f %p %r'
</programlisting>
这里的<replaceable>archiveDir</>是恢复WAL段文件的目录。
</para>
  <!--
<para>
   If <replaceable>restartwalfile</> is specified, normally by using the
   <literal>%r</literal> macro, then all WAL files logically preceding this
   file will be removed from <replaceable>archivelocation</>. This minimizes
   the number of files that need to be retained, while preserving
   crash-restart capability.  Use of this parameter is appropriate if the
   <replaceable>archivelocation</> is a transient staging area for this
   particular standby server, but <emphasis>not</> when the
   <replaceable>archivelocation</> is intended as a long-term WAL archive area.
  </para>
-->
<para>
如果声明了<replaceable>restartwalfile</>，通常通过使用<literal>%r</literal>宏，
然后所有逻辑上在这个文件之前的WAL文件都将从<replaceable>archivelocation</>
中删除。这最小化了保存崩溃重启能力时需要保留的文件数量。
如果<replaceable>archivelocation</>对于这个备用服务器来说是瞬态暂存区域，
则使用这个参数是合适的，但在打算将<replaceable>archivelocation</>
当做长期WAL归档区域时，这是<emphasis>不</>合适的。
</para>
  <!--
<para>
   <application>pg_standby</application> assumes that
   <replaceable>archivelocation</> is a directory readable by the
   server-owning user.  If <replaceable>restartwalfile</> (or <literal>-k</>)
   is specified,
   the <replaceable>archivelocation</> directory must be writable too.
  </para>
-->
<para>
<application>pg_standby</application>假设<replaceable>archivelocation</>
是拥有服务器的用户可读取的目录。如果声明了
<replaceable>restartwalfile</> (或 <literal>-k</>)，
那么<replaceable>archivelocation</>目录也必须是可写的。
</para>
  
<para>
<!-- 
   There are two ways to fail over to a <quote>warm standby</> database server
   when the master server fails:
-->
当主服务器故障时，有两种方法故障切换到<quote>热备用</>数据库服务器：

   <variablelist>
    <varlistentry>
     <!--
 <term>Smart Failover</term>
 -->
 <term>智能故障切换</term>
     <listitem>
<!--
      <para>
       In smart failover, the server is brought up after applying all WAL
       files available in the archive. This results in zero data loss, even if
       the standby server has fallen behind, but if there is a lot of
       unapplied WAL it can be a long time before the standby server becomes
       ready. To trigger a smart failover, create a trigger file containing
       the word <literal>smart</>, or just create it and leave it empty.
      </para>
-->
<para>
在智能故障切换下，在归档中应用所有WAL文件可用后启用备用服务器。
这样就会零数据丢失，即使备用服务器稍后失败，但是如果有大量未能应用的WAL，
那么在备用服务器准备好之前可能需要大量时间。要触发智能故障切换，
创建一个包含单词<literal>smart</>的触发器文件，或者只是创建它而不写内容。
</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <!--
 <term>Fast Failover</term>
 -->
 <term>快速故障切换</term>
     <listitem>
      <!--
<para>
       In fast failover, the server is brought up immediately. Any WAL files
       in the archive that have not yet been applied will be ignored, and
       all transactions in those files are lost. To trigger a fast failover,
       create a trigger file and write the word <literal>fast</> into it.
       <application>pg_standby</> can also be configured to execute a fast
       failover automatically if no new WAL file appears within a defined
       interval.
      </para>
-->
<para>
在快速故障切换下，备用服务器立即启用。归档中任何未应用的WAL文件都将被忽略，
并且所有在这些文件中的事务都丢失。要触发快速故障切换，创建一个触发器文件，
并写入单词<literal>fast</>。如果没有新的WAL文件出现在定义的间隔中，
则<application>pg_standby</>也可以配置为自动执行快速故障切换。
</para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>

 </refsect1>

 <refsect1>
  <!-- 
  <title>Options</title>
  -->
  <title>选项</title>

   
<para>
    <!--
<application>pg_standby</application> accepts the following command-line arguments:
-->
<application>pg_standby</application>接受下列的命令行参数：

    <variablelist>

     <varlistentry>
      <term><option>-c</option></term>
      <listitem>
<!--
       <para>
        Use <literal>cp</> or <literal>copy</> command to restore WAL files
        from archive.  This is the only supported behavior so this option is useless.
       </para>
-->
<para>
使用<literal>cp</>或<literal>copy</>命令从归档中恢复WAL文件。
这是唯一支持的行为，所以这个选项没什么用处。
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-d</option></term>
      <listitem>
       <!--
<para>
        Print lots of debug logging output on <filename>stderr</>.
       </para>
-->
<para>
在<filename>stderr</>上打印大量调试日志输出。
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-k</option></term>
      <listitem>
       <!--
<para>
        Remove files from <replaceable>archivelocation</replaceable> so that
        no more than this many WAL files before the current one are kept in the
        archive.  Zero (the default) means not to remove any files from
        <replaceable>archivelocation</replaceable>.
        This parameter will be silently ignored if
        <replaceable>restartwalfile</replaceable> is specified, since that
        specification method is more accurate in determining the correct
        archive cut-off point.
        Use of this parameter is <emphasis>deprecated</> as of
        <productname>PostgreSQL</> 8.3; it is safer and more efficient to
        specify a <replaceable>restartwalfile</replaceable> parameter.  A too
        small setting could result in removal of files that are still needed
        for a restart of the standby server, while a too large setting wastes
        archive space.
       </para>
-->
<para>
从<replaceable>archivelocation</replaceable>中删除文件，
这样在归档中保存的当前文件之前不超过这么多WAL文件。
0（缺省）意味着不从<replaceable>archivelocation</replaceable>中删除任何文件。
如果声明了<replaceable>restartwalfile</replaceable>，则忽略这个参数，
因为该声明方法更精确的决定了正确的归档截止点。
这个参数的使用到了<productname>PostgreSQL</> 8.3就<emphasis>废弃了</>；
声明一个<replaceable>restartwalfile</replaceable>参数更安全也更有效。
太小的设置可能导致删除备用服务器重启仍然需要的文件，
而太大的设置会浪费归档空间。
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-r</option> <replaceable>maxretries</></term>
      <listitem>
       <!--
<para>
        Set the maximum number of times to retry the copy command if
        it fails (default 3). After each failure, we wait for
        <replaceable>sleeptime</> * <replaceable>num_retries</>
        so that the wait time increases progressively.  So by default,
        we will wait 5 secs, 10 secs, then 15 secs before reporting
        the failure back to the standby server. This will be
        interpreted as end of recovery and the standby will come
        up fully as a result.
       </para>
-->
<para>
设置拷贝命令失败时重试的最大次数（缺省是3）。在每次失败之后，
我们等待<replaceable>sleeptime</> * <replaceable>num_retries</>，
所以等待时间逐渐增加。因此，默认的，在将失败报告给备用服务器之前，
我们将等待5秒、10秒、然后15秒。这将被解释为结束恢复，并且结果是备用服务器完全启动。
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-s</option> <replaceable>sleeptime</></term>
      <listitem>
       <!--
<para>
        Set the number of seconds (up to 60, default 5) to sleep between
        tests to see if the WAL file to be restored is available in
        the archive yet.  The default setting is not necessarily
        recommended; consult <xref linkend="warm-standby"> for discussion.
       </para>
-->
<para>
设置测试之间睡眠的秒数（最高60，缺省15），以查看要恢复的WAL文件在归档中是否已经可用。
不一定推荐缺省设置；查阅<xref linkend="warm-standby">获取讨论。
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-t</option> <replaceable>triggerfile</></term>
      <listitem>
       <!--
<para>
        Specify a trigger file whose presence should cause failover.
        It is recommended that you use a structured file name to
        avoid confusion as to which server is being triggered
        when multiple servers exist on the same system; for example
        <filename>/tmp/pgsql.trigger.5432</>.
       </para>
-->
<para>
声明一个触发器文件，它的存在会引起故障切换。建议使用结构化的文件名，
以避免多个服务器存在于同一个系统上时，混淆要触发的是哪个服务器；
例如<filename>/tmp/pgsql.trigger.5432</>。
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-V</></term>
      <term><option>--version</></term>
      <listitem>
       <!--
<para>
        Print the <application>pg_standby</application> version and exit.
       </para>
-->
<para>
打印<application>pg_standby</application>的版本并退出。
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-w</option> <replaceable>maxwaittime</></term>
      <listitem>
       <!--
<para>
        Set the maximum number of seconds to wait for the next WAL file,
        after which a fast failover will be performed.
        A setting of zero (the default) means wait forever.
        The default setting is not necessarily recommended;
        consult <xref linkend="warm-standby"> for discussion.
       </para>
-->
<para>
设置执行了快速故障切换之后，等待下一个WAL文件的最大秒数。
设置为0（缺省）意味着永远等待。不一定推荐缺省设置；
查阅<xref linkend="warm-standby">获取讨论。
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-?</></term>
      <term><option>--help</></term>
      <listitem>
       <!--
<para>
        Show help about <application>pg_standby</application> command line
        arguments, and exit.
       </para>
-->
<para>
显示关于<application>pg_standby</application>命令行参数的帮助，然后退出。
</para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>

 </refsect1>

 <refsect1>
  <!--
<title>Notes</title>
-->
<title>注意</title>

  <!--
<para>
   <application>pg_standby</application> is designed to work with
   <productname>PostgreSQL</> 8.2 and later.
  </para>
-->
<para>
<application>pg_standby</application>是设计在<productname>PostgreSQL</> 8.2
及更新版本上使用的。
</para>
  <!--
<para>
   <productname>PostgreSQL</> 8.3 provides the <literal>%r</literal> macro,
   which is designed to let <application>pg_standby</application> know the
   last file it needs to keep.  With <productname>PostgreSQL</> 8.2, the
   <literal>-k</literal> option must be used if archive cleanup is
   required.  This option remains available in 8.3, but its use is deprecated.
  </para>
-->
<para>
<productname>PostgreSQL</> 8.3提供了<literal>%r</literal>宏，
让<application>pg_standby</application>知道它需要保存的最后文件。
在<productname>PostgreSQL</> 8.2中，如果需要清理归档，则必须使用<literal>-k</literal>
选项。这个选项在8.3中保持可用，但是它的使用已经废弃了。
</para>
  <!--
<para>
   <productname>PostgreSQL</> 8.4 provides the
   <varname>recovery_end_command</> option.  Without this option
   a leftover trigger file can be hazardous.
  </para>
-->
<para>
<productname>PostgreSQL</> 8.4提供了<varname>recovery_end_command</>选项。
没有这个选项，那么剩下的触发器文件可能是危险的。
</para>

  <!--
<para>
   <application>pg_standby</application> is written in C and has an
   easy-to-modify source code, with specifically designated sections to modify
   for your own needs
  </para>
-->
<para>
<application>pg_standby</application>是使用C语言写的，
并且有一个容易修改的源代码，有专门指定的部分用来按你的需要修改。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>Examples</title>
-->
<title>例子</title>

 
<para>
<!-- 
On Linux or Unix systems, you might use: 
-->
在Linux或Unix系统上，你可能使用：

<programlisting>
archive_command = 'cp %p .../archive/%f'

restore_command = 'pg_standby -d -s 2 -t /tmp/pgsql.trigger.5442 .../archive %f %p %r 2>>standby.log'

recovery_end_command = 'rm -f /tmp/pgsql.trigger.5442'
</programlisting>
<!-- 
   where the archive directory is physically located on the standby server,
   so that the <varname>archive_command</> is accessing it across NFS,
   but the files are local to the standby (enabling use of <literal>ln</>).
   This will: 
-->
这里的归档目录在物理上位于备用服务器上，所以<varname>archive_command</>
通过NFS访问它，但是文件对于备用服务器来说是本地的（启用<literal>ln</>）。
这将：
  <itemizedlist>
   <listitem>
 <!--
 <para>
     produce debugging output in <filename>standby.log</>
    </para>
-->
<para>
在<filename>standby.log</>中产生调试输出
</para>
   </listitem>
   <listitem>
    <!--
<para>
     sleep for 2 seconds between checks for next WAL file availability
    </para>
-->
<para>
在检查下一个WAL文件可用性之前睡眠2秒
</para>
   </listitem>
   <listitem>
    <!--
<para>
     stop waiting only when a trigger file called
     <filename>/tmp/pgsql.trigger.5442</> appears,
     and perform failover according to its content
    </para>
-->
<para>
只在触发器文件调用<filename>/tmp/pgsql.trigger.5442</>出现时停止等待，
并根据它的内容执行故障切换
</para>
   </listitem>
   <listitem>
    <!--
<para>
     remove the trigger file when recovery ends
    </para>
-->
<para>
当恢复结束时删除触发器文件
</para>
   </listitem>
   <listitem>
    <!--
<para>
     remove no-longer-needed files from the archive directory
    </para>
-->
<para>
从归档目录中删除不再需要的文件
</para>
   </listitem>
  </itemizedlist>
  </para>
 
<para>
<!-- On Windows, you might use: -->
在Windows上，你可能使用：
<programlisting>
archive_command = 'copy %p ...\\archive\\%f'

restore_command = 'pg_standby -d -s 5 -t C:\pgsql.trigger.5442 ...\archive %f %p %r 2>>standby.log'

recovery_end_command = 'del C:\pgsql.trigger.5442'
</programlisting>
<!-- 
   Note that backslashes need to be doubled in the
   <varname>archive_command</>, but <emphasis>not</emphasis> in the
   <varname>restore_command</> or <varname>recovery_end_command</>.
   This will: 
-->
请注意，反斜杠在<varname>archive_command</>中需要双写，
但是在<varname>restore_command</>或<varname>recovery_end_command</>
中<emphasis>不</emphasis>需要。这将：
  <itemizedlist>
   <listitem>
<!--
    <para>
     use the <literal>copy</> command to restore WAL files from archive
    </para>
-->
<para>
使用<literal>copy</>命令从归档中恢复WAL文件
</para>
   </listitem>
   <listitem>
    <!--
<para>
     produce debugging output in <filename>standby.log</>
    </para>
-->
<para>
在<filename>standby.log</>中产生调试输出
</para>
   </listitem>
   <listitem>
    <!--
<para>
     sleep for 5 seconds between checks for next WAL file availability
    </para>
-->
<para>
在检查下一个WAL文件可用性之前睡眠5秒
</para>
   </listitem>
   <listitem>
    <!--
<para>
     stop waiting only when a trigger file called
     <filename>C:\pgsql.trigger.5442</> appears,
     and perform failover according to its content
    </para>
-->
<para>
只在触发器文件调用<filename>C:\pgsql.trigger.5442</>出现时停止等待，
并根据它的内容执行故障切换
</para>
   </listitem>
   <listitem>
    <!--
<para>
     remove the trigger file when recovery ends
    </para>
-->
<para>
当恢复结束时删除触发器文件
</para>
   </listitem>
   <listitem>
    <!--
<para>
     remove no-longer-needed files from the archive directory
    </para>
-->
<para>
从归档目录中删除不再需要的文件
</para>
   </listitem>
  </itemizedlist>
  </para>

  <!--
<para>
   The <literal>copy</> command on Windows sets the final file size
   before the file is completely copied, which would ordinarily confuse
   <application>pg_standby</application>.  Therefore
   <application>pg_standby</application> waits <literal>sleeptime</>
   seconds once it sees the proper file size.  GNUWin32's <literal>cp</>
   sets the file size only after the file copy is complete.
  </para>
-->
<para>
Windows上的<literal>copy</>命令在文件完全拷贝之前设置最后的文件大小，
这通常会混淆<application>pg_standby</application>。因此<application>pg_standby</application>
一到它认为合适的大小就等待<literal>sleeptime</>秒。
GNUWin32的<literal>cp</>只在文件拷贝完成之后设置文件的大小。
</para>

  <!--
<para>
   Since the Windows example uses <literal>copy</> at both ends, either
   or both servers might be accessing the archive directory across the
   network.
  </para>
-->
<para>
因为Windows示例在两端都使用<literal>copy</>，
所以一个或两个服务器可以通过网络访问归档目录。
</para>

 </refsect1>

 <refsect1>
  <!--
  <title>Author</title>
  -->
  <title>作者</title>
<para>
   Simon Riggs <email>simon@2ndquadrant.com</email>
  </para>
 </refsect1>

 <refsect1>
  <!--
<title>See Also</title>
-->
<title>又见</title>

  <simplelist type="inline">
   <member><xref linkend="pgarchivecleanup"></member>
  </simplelist>
 </refsect1>
</refentry>
