<!-- doc/src/sgml/contrib-spi.sgml -->

<sect1 id="contrib-spi" xreflabel="spi">
 <title>spi</title>

 <indexterm zone="contrib-spi">
  <primary>SPI</primary>
  <!-- 
  <secondary>examples</secondary>
  -->
  <secondary>例子</secondary>
 </indexterm>

 <!--
<para>
  The <application>spi</> module provides several workable examples
  of using SPI and triggers.  While these functions are of some value in
  their own right, they are even more useful as examples to modify for
  your own purposes.  The functions are general enough to be used
  with any table, but you have to specify table and field names (as described
  below) while creating a trigger.
 </para>
-->
<para>
<application>spi</>模块提供几个使用SPI和触发器的可行的示例。
当这些函数是它们自己正确的某些值时，它们对于你自己的目的是更有用的修改的例子。
该函数一般足够任意的表使用，但是你在创建一个触发器时必须指定表和字段名（正如下面描述）。
</para>

 <!--
<para>
  Each of the groups of functions described below is provided as a
  separately-installable extension.
 </para>
-->
<para>
下面描述的每一组函数都是作为一个独立可安装的扩展提供的。
</para>

 <sect2>
  <!--
  <title>refint &mdash; Functions for Implementing Referential Integrity</title>
  -->
  <title>refint &mdash; 实现参照完整性的函数</title>

  <!--
<para>
   <function>check_primary_key()</> and
   <function>check_foreign_key()</> are used to check foreign key constraints.
   (This functionality is long since superseded by the built-in foreign
   key mechanism, of course, but the module is still useful as an example.)
  </para>
-->
<para>
<function>check_primary_key()</>和<function>check_foreign_key()</>
用来检查外键约束。（这个功能早已被内置的外键机制取代，但是该模块作为一个例子仍然是有用的。）
</para>

  <!--
<para>
   <function>check_primary_key()</> checks the referencing table.
   To use, create a <literal>BEFORE INSERT OR UPDATE</> trigger using this
   function on a table referencing another table. Specify as the trigger
   arguments: the referencing table's column name(s) which form the foreign
   key, the referenced table name, and the column names in the referenced table
   which form the primary/unique key.  To handle multiple foreign
   keys, create a trigger for each reference.
  </para>
-->
<para>
<function>check_primary_key()</>检查引用表。为了使用该函数，创建一个
<literal>BEFORE INSERT OR UPDATE</>触发器，该触发器在一个表上使用这个函数引用另一个表。
作为触发器参数指定：来自外键的引用表的字段名，被引用的表名，来自主/唯一键的被引用表的字段名。
要处理多个外键，为每个引用创建一个外键。
</para>

  <!--
<para>
   <function>check_foreign_key()</> checks the referenced table.
   To use, create a <literal>BEFORE DELETE OR UPDATE</> trigger using this
   function on a table referenced by other table(s).  Specify as the trigger
   arguments: the number of referencing tables for which the function has to
   perform checking, the action if a referencing key is found
   (<literal>cascade</> &mdash; to delete the referencing row,
   <literal>restrict</> &mdash; to abort transaction if referencing keys
   exist, <literal>setnull</> &mdash; to set referencing key fields to null),
   the triggered table's column names which form the primary/unique key, then
   the referencing table name and column names (repeated for as many
   referencing tables as were specified by first argument).  Note that the
   primary/unique key columns should be marked NOT NULL and should have a
   unique index.
  </para>
-->
<para>
<function>check_foreign_key()</>检查被引用的表。为了使用该函数，创建一个
<literal>BEFORE DELETE OR UPDATE</>触发器，
该触发器在一个表上使用这个函数被另外一个表引用。作为触发器参数指定：
该函数必须执行检查的引用表的数量，如果发现一个引用键的动作
（<literal>cascade</> &mdash; 删除引用行，<literal>restrict</> &mdash; 
如果引用键退出则退出事务，<literal>setnull</> &mdash; 设置引用键字段为空），
来自主/唯一键的被触发表的字段名，然后是引用表名和字段名
（重复引用表的次数和第一个参数指定的一样多）。请注意，
主/唯一键字段应该标记为NOT NULL并且应该有一个唯一索引。
</para>

  <!--
<para>
   There are examples in <filename>refint.example</>.
  </para>
-->
<para>
示例在<filename>refint.example</>。
</para>
 </sect2>

 <sect2>
  <!--
  <title>timetravel &mdash; Functions for Implementing Time Travel</title>
  -->
  <title>timetravel &mdash; 实现时间行程的函数</title>

<para>
   <!-- 
   Long ago, <productname>PostgreSQL</> had a built-in time travel feature
   that kept the insert and delete times for each tuple.  This can be
   emulated using these functions.  To use these functions,
   you must add to a table two columns of <type>abstime</> type to store
   the date when a tuple was inserted (start_date) and changed/deleted
   (stop_date): 
   -->
   很久以前，<productname>PostgreSQL</>有一个内置的时间行程特性，
   保持为每个元组插入和删除时间。这个特性可以使用这些函数模仿。
   要使用这些函数，必须添加两个<type>abstime</>类型的字段到一个表，
   用来存储一个元组插入(start_date)和更改/删除(stop_date)的日期：

<programlisting>
CREATE TABLE mytab (
        ...             ...
        start_date      abstime,
        stop_date       abstime
        ...             ...
);
</programlisting>

   <!-- 
   The columns can be named whatever you like, but in this discussion
   we'll call them start_date and stop_date. 
   -->
   该字段可以随你喜欢任意命名，但是在这个讨论中我们将它们称作start_date和stop_date。
  </para>

  <!--
<para>
   When a new row is inserted, start_date should normally be set to
   current time, and stop_date to <literal>infinity</>.  The trigger
   will automatically substitute these values if the inserted data
   contains nulls in these columns.  Generally, inserting explicit
   non-null data in these columns should only be done when re-loading
   dumped data.
  </para>
-->
<para>
当插入一个新行时，start_date通常设置为当前时间，stop_date设置为<literal>infinity</>。
如果插入的数据在这些字段中包含空，那么触发器将自动的替换这些值。
通常只应该在重新加载转储的数据时在这些字段中明确的插入非空数据。
</para>

  <!--
<para>
   Tuples with stop_date equal to <literal>infinity</> are <quote>valid
   now</quote>, and can be modified.  Tuples with a finite stop_date cannot
   be modified anymore &mdash; the trigger will prevent it.  (If you need
   to do that, you can turn off time travel as shown below.)
  </para>
-->
<para>
stop_date等于<literal>infinity</>的元组是<quote>现在有效的</quote>，可以修改。
带有限定的stop_date的元组不能再被修改&mdash;触发器将阻止修改。
（如果需要修改，可以像下面显示的那样关闭时间行程。）
</para>

  <!--
<para>
   For a modifiable row, on update only the stop_date in the tuple being
   updated will be changed (to current time) and a new tuple with the modified
   data will be inserted.  Start_date in this new tuple will be set to current
   time and stop_date to <literal>infinity</>.
  </para>
-->
<para>
对于可修改的行，在更新时只有被更新的元组内的stop_date被更改（为当前时间）
并且插入一个带有修改数据的新的元组。在这个新元组内的Start_date设置为当前时间，
stop_date设置为<literal>infinity</>。
</para>

  <!--
<para>
   A delete does not actually remove the tuple but only sets its stop_date
   to current time.
  </para>
-->
<para>
删除并不实际删除元组，只是设置它的stop_date为当前时间。
</para>

  <!--
<para>
   To query for tuples <quote>valid now</quote>, include
   <literal>stop_date = 'infinity'</> in the query's WHERE condition.
   (You might wish to incorporate that in a view.)  Similarly, you can
   query for tuples valid at any past time with suitable conditions on
   start_date and stop_date.
  </para>
-->
<para>
要查询元组的<quote>现在有效</quote>，在查询的WHERE条件中包括
<literal>stop_date = 'infinity'</>。（你可能希望体现到一个视图中。）
相似的，你可以用合适的start_date和stop_date条件查询任意过去时间的元组有效性。
</para>

  <!--
<para>
   <function>timetravel()</> is the general trigger function that supports
   this behavior.  Create a <literal>BEFORE INSERT OR UPDATE OR DELETE</>
   trigger using this function on each time-traveled table. Specify two
   trigger arguments: the actual
   names of the start_date and stop_date columns.
   Optionally, you can specify one to three more arguments, which must refer
   to columns of type <type>text</>.  The trigger will store the name of
   the current user into the first of these columns during INSERT, the
   second column during UPDATE, and the third during DELETE.
  </para>
-->
<para>
<function>timetravel()</>是支持这个行为的常规触发器函数。
在每个时间行程表上创建一个使用这个函数的
<literal>BEFORE INSERT OR UPDATE OR DELETE</>触发器。
指定两个触发器参数：start_date和stop_date字段的实际名字。
可选的，你可以再指定一到三个参数，这些参数必须引用类型为<type>text</>的字段。
触发器将存储当前用户名到这些字段中，在INSERT期间存储到第一个中，
在UPDATE期间存储到第二个中，在DELETE期间存储到第三个中。
</para>

  <!--
<para>
   <function>set_timetravel()</> allows you to turn time-travel on or off for
   a table.
   <literal>set_timetravel('mytab', 1)</> will turn TT ON for table <literal>mytab</>.
   <literal>set_timetravel('mytab', 0)</> will turn TT OFF for table <literal>mytab</>.
   In both cases the old status is reported.  While TT is off, you can modify
   the start_date and stop_date columns freely.  Note that the on/off status
   is local to the current database session &mdash; fresh sessions will
   always start out with TT ON for all tables.
  </para>
-->
<para>
<function>set_timetravel()</>允许为一个表打开或关闭时间行程。<literal>set_timetravel('mytab', 1)</>
将为表<literal>mytab</>返回TT ON。<literal>set_timetravel('mytab', 0)</>将为表<literal>mytab</>
返回TT OFF。两种情况下都报道老的状态。当TT为off是，可以自由修改start_date和stop_date字段。
请注意，on/off状态对于当前数据库会话来说是局部的&mdash;新的会话将对于所有表来说总是以TT ON开始。
</para>

  <!--
<para>
   <function>get_timetravel()</> returns the TT state for a table without
   changing it.
  </para>
-->
<para>
<function>get_timetravel()</>为一个表返回TT的状态而不会改变这个表。
</para>

  <!--
<para>
   There is an example in <filename>timetravel.example</>.
  </para>
-->
<para>
在<filename>timetravel.example</>中有一个示例。
</para>
 </sect2>

 <sect2>
  <!-- 
  <title>autoinc &mdash; Functions for Autoincrementing Fields</title>
  -->
  <title>autoinc &mdash; 自增字段函数</title>

  <!--
<para>
   <function>autoinc()</> is a trigger that stores the next value of
   a sequence into an integer field.  This has some overlap with the
   built-in <quote>serial column</> feature, but it is not the same:
   <function>autoinc()</> will override attempts to substitute a
   different field value during inserts, and optionally it can be
   used to increment the field during updates, too.
  </para>
-->
<para>
<function>autoinc()</>是一个存储序列的下一个值到一个整数字段的触发器。
与内置的<quote>序列字段</>特性有些重叠，但是并不相同：<function>autoinc()</>
在插入时重写替代一个不同的字段值的尝试，并且可选择的，
它也可以用于在更新时增加字段。
</para>

  <!--
<para>
   To use, create a <literal>BEFORE INSERT</> (or optionally <literal>BEFORE
   INSERT OR UPDATE</>) trigger using this function.  Specify two
   trigger arguments: the name of the integer column to be modified,
   and the name of the sequence object that will supply values.
   (Actually, you can specify any number of pairs of such names, if
   you'd like to update more than one autoincrementing column.)
  </para>
-->
<para>
要使用该函数，创建一个使用该函数的<literal>BEFORE INSERT</>
(或者可选择的<literal>BEFORE INSERT OR UPDATE</>) 触发器。
指定两个触发器参数：要被修改的整数字段的名字，和将要填充值的序列对象名。
（实际上，可以指定任意数量的这样的名字对，如果想要更新多个自增字段。）
</para>

  <!--
<para>
   There is an example in <filename>autoinc.example</>.
  </para>
-->
<para>
在<filename>autoinc.example</>中有一个示例。
</para>

 </sect2>

 <sect2>
  <!--
  <title>insert_username &mdash; Functions for Tracking Who Changed a Table</title>
  -->
  <title>insert_username &mdash; 追踪谁改变了表的函数</title>

  <!--
<para>
   <function>insert_username()</> is a trigger that stores the current
   user's name into a text field.  This can be useful for tracking
   who last modified a particular row within a table.
  </para>
-->
<para>
<function>insert_username()</>是一个存储当前用户名到一个文本字段的触发器。
这对于追踪谁最后修改了表中指定的行是有用的。
</para>

  <!--
<para>
   To use, create a <literal>BEFORE INSERT</> and/or <literal>UPDATE</>
   trigger using this function.  Specify a single trigger
   argument: the name of the text column to be modified.
  </para>
-->
<para>
要使用该函数，创建一个使用该函数的<literal>BEFORE INSERT</>和/或<literal>UPDATE</>触发器。
指定一个触发器参数：要修改的文本字段名。
</para>

  <!--
<para>
   There is an example in <filename>insert_username.example</>.
  </para>
-->
<para>
在<filename>insert_username.example</>中有一个示例。
</para>

 </sect2>

 <sect2>
  <!--
  <title>moddatetime &mdash; Functions for Tracking Last Modification Time</title>
  -->
  <title>moddatetime &mdash; 追踪最后修改时间的函数</title>

  <!--
<para>
   <function>moddatetime()</> is a trigger that stores the current
   time into a <type>timestamp</> field.  This can be useful for tracking
   the last modification time of a particular row within a table.
  </para>
-->
<para>
<function>moddatetime()</>是一个存储当前时间到<type>timestamp</>字段的触发器。
这对于追踪一个表中指定的行的最后修改时间是有用的。
</para>

  <!--
<para>
   To use, create a <literal>BEFORE UPDATE</>
   trigger using this function.  Specify a single trigger
   argument: the name of the column to be modified.
   The column must be of type <type>timestamp</> or <type>timestamp with
   time zone</>.
  </para>
-->
<para>
要使用该函数，创建一个使用这个函数的<literal>BEFORE UPDATE</>触发器。
指定一个触发器参数：要修改的字段名。该字段必须是<type>timestamp</>
或<type>timestamp with time zone</>类型。
</para>

  <!--
<para>
   There is an example in <filename>moddatetime.example</>.
  </para>
-->
<para>
在<filename>moddatetime.example</>中有一个示例。
</para>

 </sect2>

</sect1>
