<!-- doc/src/sgml/rangetypes.sgml -->

<sect1 id="rangetypes">
 <!--
 <title>Range Types</title>
 -->
 <title>范围类型</title>
 
 <!--
 <indexterm>
  <primary>range type</primary>
 </indexterm>
 -->
  <indexterm>
  <primary>范围类型</primary>
 </indexterm>
 
 <!--
 <para>
  Range types are data types representing a range of values of some
  element type (called the range's <firstterm>subtype</>).
  For instance, ranges
  of <type>timestamp</type> might be used to represent the ranges of
  time that a meeting room is reserved. In this case the data type
  is <type>tsrange</type> (short for <quote>timestamp range</quote>),
  and <type>timestamp</type> is the subtype.  The subtype must have
  a total order so that it is well-defined whether element values are
  within, before, or after a range of values.
 </para>
 -->
 <para>
  范围数据类型代表着某一元素类型在一定范围内的值。
  (此元素类型称为该范围的 <firstterm>子类型</>)。
  例如，<type>timestamp</type> 范围可能被用于代表一间会议室被预定的时间范围。 这种情况下数据
  类型为<type>tsrange</type> (<quote>timestamp range</quote>的简写)，并且<type>timestamp</type>
  是子类型。子类型必须具备完整的排序，这样清晰定义了元素值在范围之内，之前，或者之后。
 </para>
 
 <!--
 <para>
  Range types are useful because they represent many element values in a
  single range value, and because concepts such as overlapping ranges can
  be expressed clearly. The use of time and date ranges for scheduling
  purposes is the clearest example; but price ranges, measurement
  ranges from an instrument, and so forth can also be useful.
 </para>
 -->
 <para>
  范围类型是有用的。因为他们代表了在单一范围内的许多元素值，并且清晰表达了诸如重叠范围等概念。
  出于计划目的的时间和日期范围的使用是一个最清晰的例子；价格范围，仪器测量的范围等也有用。 
 </para>
 
 <sect2 id="rangetypes-builtin">
  <!--
  <title>Built-in Range Types</title>
  -->
  <title>内嵌范围类型</title>
 
 <!--
 <para>
  PostgreSQL comes with the following built-in range types:
  <itemizedlist>
    <listitem>
      <para>
       <type>int4range</type> &mdash; Range of <type>integer</type>
      </para>
    </listitem>
    <listitem>
      <para>
       <type>int8range</type> &mdash; Range of <type>bigint</type>
      </para>
    </listitem>
    <listitem>
      <para>
       <type>numrange</type> &mdash; Range of <type>numeric</type>
      </para>
    </listitem>
    <listitem>
      <para>
       <type>tsrange</type> &mdash; Range of <type>timestamp without time zone</type>
      </para>
    </listitem>
    <listitem>
      <para>
       <type>tstzrange</type> &mdash; Range of <type>timestamp with time zone</type>
      </para>
    </listitem>
    <listitem>
      <para>
       <type>daterange</type> &mdash; Range of <type>date</type>
      </para>
    </listitem>
  </itemizedlist>
  In addition, you can define your own range types;
  see <xref linkend="SQL-CREATETYPE"> for more information.
 </para>
 -->
 <para>
  PostgreSQL 提供下列内嵌范围类型：
  <itemizedlist>
    <listitem>
      <para>
       <type>int4range</type> &mdash; <type>integer</type>的范围
      </para>
    </listitem>
    <listitem>
      <para>
       <type>int8range</type> &mdash;<type>bigint</type>的范围
      </para>
    </listitem>
    <listitem>
      <para>
       <type>numrange</type> &mdash;<type>numeric</type>的范围
      </para>
    </listitem>
    <listitem>
      <para>
       <type>tsrange</type> &mdash;<type>timestamp without time zone</type>的范围
      </para>
    </listitem>
    <listitem>
      <para>
       <type>tstzrange</type> &mdash;<type>timestamp with time zone</type>的范围
      </para>
    </listitem>
    <listitem>
      <para>
       <type>daterange</type> &mdash;<type>date</type>的范围
      </para>
    </listitem>
  </itemizedlist>
  此外，你可以定义你自己的范围类型；更多信息见<xref linkend="SQL-CREATETYPE">。
 </para>
 </sect2>

 <sect2 id="rangetypes-examples">
  <!--
  <title>Examples</title>
  -->
  <title>范例</title>

  <!--
  <para>
<programlisting>
CREATE TABLE reservation (room int, during tsrange);
INSERT INTO reservation VALUES
    (1108, '[2010-01-01 14:30, 2010-01-01 15:30)');

&#045; Containment
SELECT int4range(10, 20) @> 3;

&#045;- Overlaps
SELECT numrange(11.1, 22.2) &amp;&amp; numrange(20.0, 30.0);

&#045;- Extract the upper bound
SELECT upper(int8range(15, 25));

&#045;- Compute the intersection
SELECT int4range(10, 20) * int4range(15, 25);

&#045;- Is the range empty?
SELECT isempty(numrange(1, 5));
</programlisting>

   See <xref linkend="range-operators-table">
   and <xref linkend="range-functions-table"> for complete lists of
   operators and functions on range types.
  </para>
  -->
  <para>
<programlisting>
CREATE TABLE reservation (room int, during tsrange);
INSERT INTO reservation VALUES
    (1108, '[2010-01-01 14:30, 2010-01-01 15:30)');

-- 包含
SELECT int4range(10, 20) @> 3;

-- 重叠
SELECT numrange(11.1, 22.2) &amp;&amp; numrange(20.0, 30.0);

-- 提取上边界
SELECT upper(int8range(15, 25));

-- 计算交叉
SELECT int4range(10, 20) * int4range(15, 25);

-- 范围是否为空
SELECT isempty(numrange(1, 5));
</programlisting>

   范围类型的操作数和函数的完整列表见<xref linkend="range-operators-table">
   及<xref linkend="range-functions-table">。
  </para>
 </sect2>

 <sect2 id="rangetypes-inclusivity">
  <!--
  <title>Inclusive and Exclusive Bounds</title>
  -->
  <title>包含及不包含边界</title>

  <!--
  <para>
   Every non-empty range has two bounds, the lower bound and the upper
   bound. All points between these values are included in the range. An
   inclusive bound means that the boundary point itself is included in
   the range as well, while an exclusive bound means that the boundary
   point is not included in the range.
  </para>
  -->
  <para>
   每个非空范围有两个边界，下边界和上边界。这两个值之间的所有点都包含在范围内。
   包含边界意味着边界点本身包含在范围内，而不包含边界意味着边界点不包含在范围内。
  </para>

  <!--
  <para>
   In the text form of a range, an inclusive lower bound is represented by
   <quote><literal>[</literal></quote> while an exclusive lower bound is
   represented by <quote><literal>(</literal></quote>. Likewise, an inclusive upper bound is represented by
   <quote><literal>]</literal></quote>, while an exclusive upper bound is
   represented by <quote><literal>)</literal></quote>.
   (See <xref linkend="rangetypes-io"> for more details.)
  </para>
  -->
  <para>
   在一个文本格式的范围里，包含下边界由<quote><literal>[</literal></quote>代表，而不包含下边
   界由 <quote><literal>(</literal></quote>代表。同样，一个包含上边界由
   <quote><literal>]</literal></quote>代表，而不包含上边界由<quote><literal>)</literal></quote>
   代表。  
   (更多细节见<xref linkend="rangetypes-io">）
  </para>

  <!--
  <para>
   The functions <literal>lower_inc</literal>
   and <literal>upper_inc</literal> test the inclusivity of the lower
   and upper bounds of a range value, respectively.
  </para>
  -->
  <para>
   函数<literal>lower_inc</literal>和<literal>upper_inc</literal>分别检测一个范围值的上下边界
   是否包含。 
  </para>
 </sect2>

 <sect2 id="rangetypes-infinite">
  <!--
  <title>Infinite (Unbounded) Ranges</title>
  -->
  <title>无限（无边界）范围</title>

  <!--
  <para>
   The lower bound of a range can be omitted, meaning that all points less
   than the upper bound are included in the range. Likewise, if the upper
   bound of the range is omitted, then all points greater than the lower bound
   are included in the range. If both lower and upper bounds are omitted, all
   values of the element type are considered to be in the range.
  </para>
  -->
  <para>
   一个范围的下边界可以被省略，意味着小于上边界的所有点都包含在范围内。同样，如果范围的上边界
   被省略，那么所有大于下边界的点都包含在范围内。如果上下边界都被省略，那么所有元素类型的值都
   被认为在范围内。
  </para>

  <!--
  <para>
   This is equivalent to considering that the lower bound is <quote>minus
   infinity</quote>, or the upper bound is <quote>plus infinity</quote>,
   respectively.  But note that these infinite values are never values of
   the range's element type, and can never be part of the range.  (So there
   is no such thing as an inclusive infinite bound &mdash; if you try to
   write one, it will automatically be converted to an exclusive bound.)
  </para>
  -->
  <para>
   相当于分别认为下边界是<quote>负无穷大</quote>，或者上边界是<quote>正无穷大</quote>。但是注意
   这些无穷大值绝不是范围元素类型的值，而且绝不是范围的一部分。（所以没有包含无穷边界之类的东西 &mdash; 
   如果你尝试写一个，它会被自动转换成一个不包含边界。）
  </para>

  <!--
  <para>
   Also, some element types have a notion of <quote>infinity</>, but that
   is just another value so far as the range type mechanisms are concerned.
   For example, in timestamp ranges, <literal>[today,]</> means the same
   thing as <literal>[today,)</>.  But <literal>[today,infinity]</> means
   something different from <literal>[today,infinity)</> &mdash; the latter
   excludes the special <type>timestamp</> value <literal>infinity</>.
  </para>
  -->
  <para>
   某些元素类型还有一个<quote>无限</>的概念，但是只要涉及到范围类型机制它就只是另一个值。例如，
   在timestamp范围里，<literal>[today,]</>意味着和<literal>[today,)</>是相同的东西。但是
   <literal>[today,infinity]</>意味着与<literal>[today,infinity)</> 不同的东西 &mdash; 后者不
   包含特殊的<type>timestamp</>值<literal>infinity</>。
  </para>

  <!--
  <para>
   The functions <literal>lower_inf</literal>
   and <literal>upper_inf</literal> test for infinite lower
   and upper bounds of a range, respectively.
  </para>
  -->
  <para>
   函数<literal>lower_inf</literal>和<literal>upper_inf</literal>分别检测一个范围的无限下边界
   和上边界。
  </para>
 </sect2>

 <sect2 id="rangetypes-io">
  <!--
  <title>Range Input/Output</title>
  -->
  <title>范围输入/输出</title>

  <!--
  <para>
   The input for a range value must follow one of the following patterns:
<synopsis>
(<replaceable>lower-bound</replaceable>,<replaceable>upper-bound</replaceable>)
(<replaceable>lower-bound</replaceable>,<replaceable>upper-bound</replaceable>]
[<replaceable>lower-bound</replaceable>,<replaceable>upper-bound</replaceable>)
[<replaceable>lower-bound</replaceable>,<replaceable>upper-bound</replaceable>]
empty
</synopsis>
   The parentheses or brackets indicate whether the lower and upper bounds
   are exclusive or inclusive, as described previously.
   Notice that the final pattern is <literal>empty</literal>, which
   represents an empty range (a range that contains no points).
  </para>
  -->
  <para>
   范围值的输入必须遵循下面的格式：
<synopsis>
(<replaceable>下边界</replaceable>,<replaceable>上边界</replaceable>)
(<replaceable>下边界</replaceable>,<replaceable>上边界</replaceable>]
[<replaceable>下边界</replaceable>,<replaceable>上边界</replaceable>)
[<replaceable>下边界</replaceable>,<replaceable>上边界</replaceable>]
空
</synopsis>
   如前所述，圆括号或者方括号显示下边界和上边界是不包含的还是包含的。注意最后的格式是
   <literal>空</literal>，代表着一个空的范围（一个不含有值的范围）。
  </para>

  
  <!--
  <para>
   The <replaceable>lower-bound</replaceable> may be either a string
   that is valid input for the subtype, or empty to indicate no
   lower bound.  Likewise, <replaceable>upper-bound</replaceable> may be
   either a string that is valid input for the subtype, or empty to
   indicate no upper bound.
  </para>
  -->
  <para>
   <replaceable>下边界</replaceable>可以是子类型有效输入的一个字符串，或者是空以显示没有下边
   界。同样，<replaceable>上边界</replaceable>可以是子类型有效输入的一个字符串，或者是空以显
   示没有上边界。
  </para>

  <!--
  <para>
   Each bound value can be quoted using <literal>"</literal> (double quote)
   characters.  This is necessary if the bound value contains parentheses,
   brackets, commas, double quotes, or backslashes, since these characters
   would otherwise be taken as part of the range syntax.  To put a double
   quote or backslash in a quoted bound value, precede it with a
   backslash. (Also, a pair of double quotes within a double-quoted bound
   value is taken to represent a double quote character, analogously to the
   rules for single quotes in SQL literal strings.) Alternatively, you can
   avoid quoting and use backslash-escaping to protect all data characters
   that would otherwise be taken as range syntax.  Also, to write a bound
   value that is an empty string, write <literal>""</literal>, since writing
   nothing means an infinite bound.
  </para>
  -->
  <para>
   每个边界值可以用<literal>"</literal>（双引号）字符引用。如果边界值包含圆括号，方括号，逗号，
   双引号，或者反斜杠，这就很有必要。因为不这样的话，这些字符会被当成范围语法的一部分。要想把
   双引号或反斜杠放入一个引用的边界值，就在它前面加一个反斜杠。（另外，加了双引号的边界值内
   的两个连续的双引号用来表示一个双引号字符，类似于SQL文字串内的单引号规则。）或者，你可以避免用引号，使
   用反斜杠转义来保护所有数据字符不被认为是范围语法。而且，要写入一个空字符串边界值，用<literal>""</literal>
   。这是因为什么也不写入意味着无限边界。   
  </para>

  <!--
  <para>
   Whitespace is allowed before and after the range value, but any whitespace
   between the parentheses or brackets is taken as part of the lower or upper
   bound value.  (Depending on the element type, it might or might not be
   significant.)
  </para>
  -->
  <para>
   在范围值前后可以有空格，但是在圆括号和方括号之间的任何空格都被认为是上边界或下边界的一部分。
   （重要还是不重要取决于元素类型。）
  </para>

  <note>
   <!--
   <para>
    These rules are very similar to those for writing field values in
    composite-type literals.  See <xref linkend="rowtypes-io-syntax"> for
    additional commentary.
   </para>
   -->
   <para>
    这些规则很类似于在复合类型常量中写入字段值。更多注释见<xref linkend="rowtypes-io-syntax">。
   </para>
  </note>

  <!--
  <para>
  Examples:
<programlisting>
&#045;- includes 3, does not include 7, and does include all points in between
SELECT '[3,7)'::int4range;

&#045;- does not include either 3 or 7, but includes all points in between
SELECT '(3,7)'::int4range;

&#045;- includes only the single point 4
SELECT '[4,4]'::int4range;

&#045;- includes no points (and will be normalized to 'empty')
SELECT '[4,4)'::int4range;
</programlisting>
  </para>
  -->
  <para>
  例子：
<programlisting>
-- 包括3，不包括7，并且包括二者之间的所有点
SELECT '[3,7)'::int4range;

-- 不包括3和7，但是包括二者之间所有点
SELECT '(3,7)'::int4range;

-- 只包括单一值4
SELECT '[4,4]'::int4range;

-- 不包括点（被标准化为‘空’）
SELECT '[4,4)'::int4range;
</programlisting>
  </para>
 </sect2>

 <sect2 id="rangetypes-construct">
  <!--
  <title>Constructing Ranges</title>
  -->
  <title>构造范围</title>

  <!--
  <para>
   Each range type has a constructor function with the same name as the range
   type.  Using the constructor function is frequently more convenient than
   writing a range literal constant, since it avoids the need for extra
   quoting of the bound values.  The constructor function
   accepts two or three arguments.  The two-argument form constructs a range
   in standard form (lower bound inclusive, upper bound exclusive), while
   the three-argument form constructs a range with bounds of the form
   specified by the third argument.
   The third argument must be one of the strings
   <quote><literal>()</literal></quote>,
   <quote><literal>(]</literal></quote>,
   <quote><literal>[)</literal></quote>, or
   <quote><literal>[]</literal></quote>.
   For example:

<programlisting>
&#045;- The full form is: lower bound, upper bound, and text argument indicating
&#045;- inclusivity/exclusivity of bounds.
SELECT numrange(1.0, 14.0, '(]');

&#045;- If the third argument is omitted, '[)' is assumed.
SELECT numrange(1.0, 14.0);

&#045;- Although '(]' is specified here, on display the value will be converted to
&#045;- canonical form, since int8range is a discrete range type (see below).
SELECT int8range(1, 14, '(]');

&#045;- Using NULL for either bound causes the range to be unbounded on that side.
SELECT numrange(NULL, 2.2);
</programlisting>
  </para>
  -->
  <para>
   每个范围有一个与范围类型同名的构造函数。使用构造函数往往比写入一个范围文本常量更便利，因为
   它避免了额外引用边界值的需要。构造函数接受两到三个参数。两参数方式构造一个标准格式的范围（
   包含下边界，不包含上边界），而三参数方式用第三个参数指定边界来构造范围。
   第三个参数必须是下面的字符串之一
   <quote><literal>()</literal></quote>,
   <quote><literal>(]</literal></quote>,
   <quote><literal>[)</literal></quote>, 或
   <quote><literal>[]</literal></quote>.
   例如：

<programlisting>
-- 完整方式为：下边界，上边界，和指示包含还是不包含边界的文本参数
SELECT numrange(1.0, 14.0, '(]');

-- 如果第三个参数省略，使用‘[)’。
SELECT numrange(1.0, 14.0);

-- 尽管在这里指定了‘(]’，然而该值会被转换成标准格式。这是由于int8range是一个离散范围类型
（见下面）。
SELECT int8range(1, 14, '(]');

-- 使用NULL作任一边界会导致范围在那一边没有边界。
SELECT numrange(NULL, 2.2);
</programlisting>
  </para>
 </sect2>

 <sect2 id="rangetypes-discrete">
  <!--
  <title>Discrete Range Types</title>
  -->
  <title>离散范围类型</title>

  <!--
  <para>
   A discrete range is one whose element type has a well-defined
   <quote>step</quote>, such as <type>integer</type> or <type>date</type>.
   In these types two elements can be said to be adjacent, when there are
   no valid values between them.  This contrasts with continuous ranges,
   where it's always (or almost always) possible to identify other element
   values between two given values.  For example, a range over the
   <type>numeric</> type is continuous, as is a range over <type>timestamp</>.
   (Even though <type>timestamp</> has limited precision, and so could
   theoretically be treated as discrete, it's better to consider it continuous
   since the step size is normally not of interest.)
  </para>
  -->
  <para>
   离散范围的元素类型有一个完善定义的<quote>阶梯</quote>，例如<type>integer</type>或者
   <type>date</type>。当在这些类型里两个元素中间没有有效值时，它们可被称为是邻近的。与之形成
   对比的是连续范围，总是（或者几乎总是）可能在两个给定值之间找到其它元素。例如， 
   <type>numeric</>类型的范围是连续的，和<type>timestamp</>一样。（即使<type>timestamp</>精度
   有限，理论上可以被当做是离散的，但是既然不关心阶梯大小最好还是把它当做是连续的。) 
  </para>

  <!--
  <para>
   Another way to think about a discrete range type is that there is a clear
   idea of a <quote>next</> or <quote>previous</> value for each element value.
   Knowing that, it is possible to convert between inclusive and exclusive
   representations of a range's bounds, by choosing the next or previous
   element value instead of the one originally given.
   For example, in an integer range type <literal>[4,8]</> and
   <literal>(3,9)</> denote the same set of values; but this would not be so
   for a range over numeric.
  </para>
  -->
  <para>
   考虑一个离散范围的另一种方式是每一个元素值都清晰知道它的<quote>下一个</>或者<quote>上一个</>
   值。 知道了这个，通过选择下一个或者上一个元素值而不是开始给定的值，就可能在一个范围边界的包
   含和不包含表达之间进行转换。例如，在一个整数范围类型里<literal>[4,8]</>和<literal>(3,9)</>
   提供相同的值集合；但是数值范围不是这样。
  </para>

  <!--
  <para>
   A discrete range type should have a <firstterm>canonicalization</>
   function that is aware of the desired step size for the element type.
   The canonicalization function is charged with converting equivalent values
   of the range type to have identical representations, in particular
   consistently inclusive or exclusive bounds.
   If a canonicalization function is not specified, then ranges with different
   formatting will always be treated as unequal, even though they might
   represent the same set of values in reality.
  </para>
  -->
  <para>
   离散范围应当有一个<firstterm>标准化</>函数，该函数知道元素类型想要的阶梯大小。这个标准化函数
   负责把该范围类型的等效值转换成同一表达方式，尤其是包含或不包含边界。如果不指定一个标准化函数，
   不同格式的范围会被认为是不相等的，即使它们实际上可能代表相同的值集合。   
  </para>

  <!--
  <para>
   The built-in range types <type>int4range</type>, <type>int8range</type>,
   and <type>daterange</type> all use a canonical form that includes
   the lower bound and excludes the upper bound; that is,
   <literal>[)</literal>. User-defined range types can use other conventions,
   however.
  </para>
  -->
  <para>
   内嵌范围类型<type>int4range</type>，<type>int8range</type>，和<type>daterange</type>都使用
   包括下边界不包含上边界的标准格式；即，<literal>[)</literal>。然而用户定义的范围类型可以使用
   其他规则。
  </para>
 </sect2>

 <sect2 id="rangetypes-defining">
  <!--
  <title>Defining New Range Types</title>
  -->
  <title>定义新的范围类型</title>

  <!--
  <para>
   Users can define their own range types. The most common reason to do
   this is to use ranges over subtypes not provided among the built-in
   range types.
   For example, to define a new range type of subtype <type>float8</type>:

<programlisting>
CREATE TYPE floatrange AS RANGE (
    subtype = float8,
    subtype_diff = float8mi
);

SELECT '[1.234, 5.678]'::floatrange;
</programlisting>

   Because <type>float8</type> has no meaningful
   <quote>step</quote>, we do not define a canonicalization
   function in this example.
  </para>
  -->
  <para>
   用户可以定义他们自己的范围类型。这么做通常是为了使用内嵌范围类型所不提供的子类型范围。
   例如，定义一个新的范围子类型<type>float8</type>:

<programlisting>
CREATE TYPE floatrange AS RANGE (
    subtype = float8,
    subtype_diff = float8mi
);

SELECT '[1.234, 5.678]'::floatrange;
</programlisting>

   因为<type>float8</type>没有有意义的<quote>阶梯</quote>，我们在此例中不定义一个标准化函数。
  </para>

  <!--
  <para>
   If the subtype is considered to have discrete rather than continuous
   values, the <command>CREATE TYPE</> command should specify a
   <literal>canonical</> function.
   The canonicalization function takes an input range value, and must return
   an equivalent range value that may have different bounds and formatting.
   The canonical output for two ranges that represent the same set of values,
   for example the integer ranges <literal>[1, 7]</literal> and <literal>[1,
   8)</literal>, must be identical.  It doesn't matter which representation
   you choose to be the canonical one, so long as two equivalent values with
   different formattings are always mapped to the same value with the same
   formatting.  In addition to adjusting the inclusive/exclusive bounds
   format, a canonicalization function might round off boundary values, in
   case the desired step size is larger than what the subtype is capable of
   storing.  For instance, a range type over <type>timestamp</> could be
   defined to have a step size of an hour, in which case the canonicalization
   function would need to round off bounds that weren't a multiple of an hour,
   or perhaps throw an error instead.
  </para>
  -->
  <para>
   如果子类型被认为含有离散的而不是连续的值，命令<command>CREATE TYPE</>应当指定一个
   <literal>canonical</>(标准化)函数。
   标准化函数使用一个输入范围值，并且必须返回一个可能含有不同边界和格式的相应的范围值。代表相同
   值集合的两个范围的输出必须相同，比如整数范围<literal>[1, 7]</literal>和<literal>[1,8)</literal>。
   你选择哪个表达方式作为标准没有关系，只要两个内容相当但格式不同的值总是映射到相同格
   式的相同值。除了调整包含/不包含边界格式以外，一旦想要的阶梯大小大于子类型能够储存的范围，
   标准化函数可能取整边界值。例如，<type>timestamp</>范围类型可以被定义为以一个小时作为阶梯值。这
   种情况下标准化函数需要把不是一小时的整数倍的值化成一小时的整数倍，或者可能抛出一个错误。
  </para>

  <!--
  <para>
   Defining your own range type also allows you to specify a different
   subtype B-tree operator class or collation to use, so as to change the sort
   ordering that determines which values fall into a given range.
  </para>
  -->
  <para>
   定义你自己的范围类型也允许你指定使用一个不同的子类型B-tree操作符类或排序规则，以便改变排序次序
   来决定哪些值落入一个给定的范围。
  </para>

  <!--
  <para>
   In addition, any range type that is meant to be used with GiST or SP-GiST indexes
   should define a subtype difference, or <literal>subtype_diff</>, function.
   (the index will still work without <literal>subtype_diff</>, but it is
   likely to be considerably less efficient than if a difference function is
   provided.)  The subtype difference function takes two input values of the
   subtype, and returns their difference (i.e., <replaceable>X</> minus
   <replaceable>Y</>) represented as a <type>float8</> value.  In our example
   above, the function that underlies the regular <type>float8</> minus
   operator can be used; but for any other subtype, some type conversion would
   be necessary.  Some creative thought about how to represent differences as
   numbers might be needed, too.  To the greatest extent possible, the
   <literal>subtype_diff</> function should agree with the sort ordering
   implied by the selected operator class and collation; that is, its result
   should be positive whenever its first argument is greater than its second
   according to the sort ordering.
  </para>
  -->
  <para>
   此外，任何打算要使用GiST或SP-GiST索引的范围类型应当定义一个子类型差异，或者
   <literal>subtype_diff</>函数。（没有<literal>subtype_diff</>索引仍然可以起作用，但是比起提
   供差异函数时可能相当低效。）子类型差异函数采用子类型的两个输入值，并返回它们之间表示为
   <type>float8</>值的差异（就是说，<replaceable>X</>减去<replaceable>Y</>）。在我们上面的例子
   中，可以使用常规<type>float8</>减操作符调用的函数；但是对其它子类型，类型转换似乎是必要的。
   关于怎样将差异表示为数字的某些创新想法可能也是必要的。 <literal>subtype_diff</>函数应当尽最
   大可能与所选操作符类和排序规则表明的排序次序相一致；即，每当根据排序次序第一个参数大于第
   二个参数时，结果应当是正数。
  </para>

  <!--
  <para>
   See <xref linkend="SQL-CREATETYPE"> for more information about creating
   range types.
  </para>
  -->
  <para>
   更多创建范围类型的信息见<xref linkend="SQL-CREATETYPE">。
  </para>
 </sect2>

 <sect2 id="rangetypes-indexing">
  <!--
  <title>Indexing</title>
  -->
  <title>索引</title>

  <indexterm>
    <!--
<primary>range type</primary>
    <secondary>indexes on</secondary>
-->
<primary>范围类型</primary>
    <secondary>的索引</secondary>
  </indexterm>

  <!--
  <para>
   GiST and SP-GiST indexes can be created for table columns of range types.
   For instance, to create a GiST index:
<programlisting>
CREATE INDEX reservation_idx ON reservation USING gist (during);
</programlisting>
   A GiST or SP-GiST index can accelerate queries involving these range operators:
   <literal>=</>,
   <literal>&amp;&amp;</>,
   <literal>&lt;@</>,
   <literal>@&gt;</>,
   <literal>&lt;&lt;</>,
   <literal>&gt;&gt;</>,
   <literal>-|-</>,
   <literal>&amp;&lt;</>, and
   <literal>&amp;&gt;</>
   (see <xref linkend="range-operators-table"> for more information).
  </para>
  -->
  <para>
   可以对范围类型的表列创建GiST和SP-GiST索引。例如，要创建一个GiST索引：
<programlisting>
CREATE INDEX reservation_idx ON reservation USING gist (during);
</programlisting>
   一个GiST或者SP-GiST索引可以加速包含这些范围操作符的查询：
   <literal>=</>,
   <literal>&amp;&amp;</>,
   <literal>&lt;@</>,
   <literal>@&gt;</>,
   <literal>&lt;&lt;</>,
   <literal>&gt;&gt;</>,
   <literal>-|-</>,
   <literal>&amp;&lt;</>, and
   <literal>&amp;&gt;</>
   （更多信息见<xref linkend="range-operators-table">）。
  </para>

  <!--
  <para>
   In addition, B-tree and hash indexes can be created for table columns of
   range types.  For these index types, basically the only useful range
   operation is equality.  There is a B-tree sort ordering defined for range
   values, with corresponding <literal>&lt;</> and <literal>&gt;</> operators,
   but the ordering is rather arbitrary and not usually useful in the real
   world.  Range types' B-tree and hash support is primarily meant to
   allow sorting and hashing internally in queries, rather than creation of
   actual indexes.
  </para>
  -->
  <para>
   此外，对范围类型的表列可以创建B-tree和哈希索引。对这些索引类型，基本上唯一可用的范围操作是等
   于。用相应的<literal>&lt;</>和<literal>&gt;</>操作符可以为范围索引定义一个B-tree排序次序，但
   是这个次序相当武断，在现实世界中通常没有用。范围类型的B-tree和哈希支持主要是用于查询内部的排
   序和哈希操作，而不是用于实际索引的创建。
  </para>
 </sect2>

 <sect2 id="rangetypes-constraint">
  <!--
  <title>Constraints on Ranges</title>
  -->
  <title>范围上的约束</title>


  <indexterm>
    <!--
<primary>range type</primary>
    <secondary>exclude</secondary>
-->
<primary>范围类型</primary>
    <secondary>不包含</secondary>
  </indexterm>
  
  <!--
  <para>
   While <literal>UNIQUE</literal> is a natural constraint for scalar
   values, it is usually unsuitable for range types. Instead, an
   exclusion constraint is often more appropriate
   (see <link linkend="SQL-CREATETABLE-EXCLUDE">CREATE TABLE
   ... CONSTRAINT ... EXCLUDE</link>). Exclusion constraints allow the
   specification of constraints such as <quote>non-overlapping</quote> on a
   range type. For example:

<programlisting>
CREATE TABLE reservation (
    during tsrange,
    EXCLUDE USING gist (during WITH &amp;&amp;)
);
</programlisting>

   That constraint will prevent any overlapping values from existing
   in the table at the same time:

<programlisting>
INSERT INTO reservation VALUES
    ('[2010-01-01 11:30, 2010-01-01 15:00)');
INSERT 0 1

INSERT INTO reservation VALUES
    ('[2010-01-01 14:45, 2010-01-01 15:45)');
ERROR:  conflicting key value violates exclusion constraint "reservation_during_excl"
DETAIL:  Key (during)=(["2010-01-01 14:45:00","2010-01-01 15:45:00")) conflicts
with existing key (during)=(["2010-01-01 11:30:00","2010-01-01 15:00:00")).
</programlisting>
  </para>
  -->
  <para>
   当<literal>UNIQUE</literal>是一个对标量值的自然约束时，对范围类型通常是不合适的。反而不包含
   约束往往更合适（见<link linkend="SQL-CREATETABLE-EXCLUDE">CREATE TABLE
   ... CONSTRAINT ... EXCLUDE</link>）。不包含约束允许对一个范围类型指定约束，比如
   <quote>非重叠</quote>。例如： 

<programlisting>
CREATE TABLE reservation (
    during tsrange,
    EXCLUDE USING gist (during WITH &amp;&amp;)
);
</programlisting>

   这个约束将会防止任何重叠的值同时存在于表中：
<programlisting>
INSERT INTO reservation VALUES
    ('[2010-01-01 11:30, 2010-01-01 15:00)');
INSERT 0 1

INSERT INTO reservation VALUES
    ('[2010-01-01 14:45, 2010-01-01 15:45)');
ERROR:  conflicting key value violates exclusion constraint "reservation_during_excl"
DETAIL:  Key (during)=(["2010-01-01 14:45:00","2010-01-01 15:45:00")) conflicts
with existing key (during)=(["2010-01-01 11:30:00","2010-01-01 15:00:00")).
</programlisting>
  </para>

  <!--
  <para>
   You can use the <link linkend="btree-gist"><literal>btree_gist</></link>
   extension to define exclusion constraints on plain scalar data types, which
   can then be combined with range exclusions for maximum flexibility.  For
   example, after <literal>btree_gist</literal> is installed, the following
   constraint will reject overlapping ranges only if the meeting room numbers
   are equal:

<programlisting>
CREATE EXTENSION btree_gist;
CREATE TABLE room_reservation (
    room text,
    during tsrange,
    EXCLUDE USING gist (room WITH =, during WITH &amp;&amp;)
);

INSERT INTO room_reservation VALUES
    ('123A', '[2010-01-01 14:00, 2010-01-01 15:00)');
INSERT 0 1

INSERT INTO room_reservation VALUES
    ('123A', '[2010-01-01 14:30, 2010-01-01 15:30)');
ERROR:  conflicting key value violates exclusion constraint "room_reservation_room_during_excl"
DETAIL:  Key (room, during)=(123A, ["2010-01-01 14:30:00","2010-01-01 15:30:00")) conflicts
with existing key (room, during)=(123A, ["2010-01-01 14:00:00","2010-01-01 15:00:00")).

INSERT INTO room_reservation VALUES
    ('123B', '[2010-01-01 14:30, 2010-01-01 15:30)');
INSERT 0 1
</programlisting>
  </para>
  -->
  <para>
   你可以使用<link linkend="btree-gist"><literal>btree_gist</></link>扩展对简单标量数据类型
   定义不包含约束。简单标量数据类型可以和范围不包含结合来获得最大的灵活性。例如，
   在<literal>btree_gist</literal>安装后，下列的约束排除重叠的范围，除非会议室房间号相等：

<programlisting>
CREATE EXTENSION btree_gist;
CREATE TABLE room_reservation (
    room text,
    during tsrange,
    EXCLUDE USING gist (room WITH =, during WITH &amp;&amp;)
);

INSERT INTO room_reservation VALUES
    ('123A', '[2010-01-01 14:00, 2010-01-01 15:00)');
INSERT 0 1

INSERT INTO room_reservation VALUES
    ('123A', '[2010-01-01 14:30, 2010-01-01 15:30)');
ERROR:  conflicting key value violates exclusion constraint "room_reservation_room_during_excl"
DETAIL:  Key (room, during)=(123A, ["2010-01-01 14:30:00","2010-01-01 15:30:00")) conflicts
with existing key (room, during)=(123A, ["2010-01-01 14:00:00","2010-01-01 15:00:00")).

INSERT INTO room_reservation VALUES
    ('123B', '[2010-01-01 14:30, 2010-01-01 15:30)');
INSERT 0 1
</programlisting>
  </para>
 </sect2>
</sect1>