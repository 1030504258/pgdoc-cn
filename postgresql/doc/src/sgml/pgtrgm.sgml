<!-- doc/src/sgml/pgtrgm.sgml -->

<sect1 id="pgtrgm" xreflabel="pg_trgm">
 <title>pg_trgm</title>

 <indexterm zone="pgtrgm">
  <primary>pg_trgm</primary>
 </indexterm>

 <!-- 
 <para>
  The <filename>pg_trgm</filename> module provides functions and operators
  for determining the similarity of
  alphanumeric text based on trigram matching, as
  well as index operator classes that support fast searching for similar
  strings.
 </para>
 -->
 <para>
  <filename>pg_trgm</filename>模块提供用于决定基于 trigram 
  匹配的字母数字文本相似度的函数和操作符，以及支持快速搜索相似字符串的索引操作符类。
 </para>

 <sect2>
  <!-- 
  <title>Trigram (or Trigraph) Concepts</title>
  -->
  <title>Trigram（或者 Trigraph）概念</title>

  <!-- 
  <para>
   A trigram is a group of three consecutive characters taken
   from a string.  We can measure the similarity of two strings by
   counting the number of trigrams they share.  This simple idea
   turns out to be very effective for measuring the similarity of
   words in many natural languages.
  </para>
  -->
  <para>
   一个 trigram 是从一个字符串中取出的由三个连续字符组成的组。
   我们可以通过对两个字符串之间共享的 trigram 计数来测量它们的相似度。
   这种简单的思想已经成为在很多自然语言中度量词相似度的有效方法。
  </para>

  <note>
   <!-- 
   <para>
    <filename>pg_trgm</filename> ignores non-word characters
    (non-alphanumerics) when extracting trigrams from a string.
    Each word is considered to have two spaces
    prefixed and one space suffixed when determining the set
    of trigrams contained in the string.
    For example, the set of trigrams in the string
    <quote><literal>cat</literal></quote> is
    <quote><literal>  c</literal></quote>,
    <quote><literal> ca</literal></quote>,
    <quote><literal>cat</literal></quote>, and
    <quote><literal>at </literal></quote>.
    The set of trigrams in the string
    <quote><literal>foo|bar</literal></quote> is
    <quote><literal>  f</literal></quote>,
    <quote><literal> fo</literal></quote>,
    <quote><literal>foo</literal></quote>,
    <quote><literal>oo </literal></quote>,
    <quote><literal>  b</literal></quote>,
    <quote><literal> ba</literal></quote>,
    <quote><literal>bar</literal></quote>, and
    <quote><literal>ar </literal></quote>.
   </para> 
   -->
   <para>
    在从一个字符串中提取trigram 时，<filename>pg_trgm</filename>会忽略非词字符
    （非字母数字）。在决定字符串中所含的 trigram 集合时，
    每一个词被认为具有两个空格前缀和一个空格后缀。例如，
    字符串<quote><literal>cat</literal></quote>中的 trigram 集合是：
    <quote><literal>  c</literal></quote>、
    <quote><literal> ca</literal></quote>、
    <quote><literal>cat</literal></quote>以及
    <quote><literal>at </literal></quote>。
    字符串<quote><literal>foo|bar</literal></quote>中的 trigram 集合是：
    <quote><literal>  f</literal></quote>、
    <quote><literal> fo</literal></quote>、
    <quote><literal>foo</literal></quote>、
    <quote><literal>oo </literal></quote>、
    <quote><literal>  b</literal></quote>、
    <quote><literal> ba</literal></quote>、
    <quote><literal>bar</literal></quote>以及
    <quote><literal>ar </literal></quote>。
   </para>
  </note>
 </sect2>

 <sect2>
  <!-- 
  <title>Functions and Operators</title>
  -->
  <title>函数和操作符</title>

  <!-- 
  <para>
   The functions provided by the <filename>pg_trgm</filename> module
   are shown in <xref linkend="pgtrgm-func-table">, the operators
   in <xref linkend="pgtrgm-op-table">.
  </para>
  -->
  <para>
   <filename>pg_trgm</filename>模块所提供的函数在
   <xref linkend="pgtrgm-func-table">中显示，提供的操作符在
   <xref linkend="pgtrgm-op-table">中显示。
  </para>

  <table id="pgtrgm-func-table">
   <!-- 
   <title><filename>pg_trgm</filename> Functions</title>
   -->
   <title><filename>pg_trgm</filename> 函数</title>
   <tgroup cols="3">
    <thead>
     <row>
      <!-- 
      <entry>Function</entry>
      <entry>Returns</entry>
      <entry>Description</entry>
      -->
      <entry>函数</entry>
      <entry>返回</entry>
      <entry>描述</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><function>similarity(text, text)</function><indexterm><primary>similarity</primary></indexterm></entry>
      <entry><type>real</type></entry>
      <!-- 
      <entry>
       Returns a number that indicates how similar the two arguments are.
       The range of the result is zero (indicating that the two strings are
       completely dissimilar) to one (indicating that the two strings are
       identical).
      </entry>
      -->
      <entry>
       返回一个数字指示两个参数有多相似。该结果的范围是 0（指示两个字符串完全不相似）
       到 1（指示两个字符串完全一样）。
      </entry>
     </row>
     <row>
      <entry><function>show_trgm(text)</function><indexterm><primary>show_trgm</primary></indexterm></entry>
      <entry><type>text[]</type></entry>
      <!-- 
      <entry>
       Returns an array of all the trigrams in the given string.
       (In practice this is seldom useful except for debugging.)
      </entry>
      -->
      <entry>
       返回一个给定字符串中所有的 trigram 的数组（实际上除了调试很少有用）。
      </entry>
     </row>
     <row>
      <entry><function>show_limit()</function><indexterm><primary>show_limit</primary></indexterm></entry>
      <entry><type>real</type></entry>
      <!-- 
      <entry>
       Returns the current similarity threshold used by the <literal>%</>
       operator.  This sets the minimum similarity between
       two words for them to be considered similar enough to
       be misspellings of each other, for example.
      </entry>
      -->
      <entry>
       返回<literal>%</>操作符使用的当前相似度阈值。例如，
       这将两个单词之间的最小相似性设置为被认为足够相似以致彼此拼写错误。
      </entry>
     </row>
     <row>
      <entry><function>set_limit(real)</function><indexterm><primary>set_limit</primary></indexterm></entry>
      <entry><type>real</type></entry>
      <!-- 
      <entry>
       Sets the current similarity threshold that is used by the <literal>%</>
       operator.  The threshold must be between 0 and 1 (default is 0.3).
       Returns the same value passed in.
      </entry>
      -->
      <entry>
       设定<literal>%</>操作符使用的当前相似度阈值。该阈值必须介于 0 和 1 之间
       （默认为 0.3）。返回传递进来的相同值。
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <table id="pgtrgm-op-table">
   <!-- 
   <title><filename>pg_trgm</filename> Operators</title>
   -->
   <title><filename>pg_trgm</filename> 操作符</title>
   <tgroup cols="3">
    <thead>
     <row>
      <!-- 
      <entry>Operator</entry>
      <entry>Returns</entry>
      <entry>Description</entry>
      -->
      <entry>操作符</entry>
      <entry>返回</entry>
      <entry>描述</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><type>text</> <literal>%</literal> <type>text</></entry>
      <entry><type>boolean</type></entry>
      <!-- 
      <entry>
       Returns <literal>true</> if its arguments have a similarity that is
       greater than the current similarity threshold set by
       <function>set_limit</>.
      </entry>
      -->
      <entry>
       如果它的参数的相似度高于<function>set_limit</>设置的当前相似度阈值，
       则返回<literal>true</>。
      </entry>
     </row>
     <row>
      <entry><type>text</> <literal>&lt;-&gt;</literal> <type>text</></entry>
      <entry><type>real</type></entry>
      <!-- 
      <entry>
       Returns the <quote>distance</> between the arguments, that is
       one minus the <function>similarity()</> value.
      </entry>
      -->
      <entry>
       返回参数之间的<quote>距离</>，即 1 减去<function>similarity()</>值。
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </sect2>

 <sect2>
  <!-- 
  <title>Index Support</title>
  -->
  <title>索引支持</title>

  <!--
  <para>
   The <filename>pg_trgm</filename> module provides GiST and GIN index
   operator classes that allow you to create an index over a text column for
   the purpose of very fast similarity searches.  These index types support
   the above-described similarity operators, and additionally support
   trigram-based index searches for <literal>LIKE</>, <literal>ILIKE</>,
   <literal>~</> and <literal>~*</> queries.  (These indexes do not
   support equality nor simple comparison operators, so you may need a
   regular B-tree index too.)
  </para>
  -->
  <para>
   <filename>pg_trgm</filename>模块提供了 GiST 和 GIN 索引操作符类，
   这允许你在一个文本列上创建索引用于快速相似度搜索的目的。
   这些索引类型支持上述的相似度操作符，并且额外支持基于 trigram 的索引搜索用于
   <literal>LIKE</>、<literal>ILIKE</>、<literal>~</>和<literal>~*</>查询。
   （这些索引不支持等值或简单比较操作符，因此你可能还需要一个普通的 B-树索引）。
  </para>

  <para>
   <!-- Example: -->
   例子：

<programlisting>
CREATE TABLE test_trgm (t text);
CREATE INDEX trgm_idx ON test_trgm USING GIST (t gist_trgm_ops);
</programlisting>
<!-- or -->
或
<programlisting>
CREATE INDEX trgm_idx ON test_trgm USING GIN (t gin_trgm_ops);
</programlisting>
  </para>

  <para>
   <!-- 
   At this point, you will have an index on the <structfield>t</> column that
   you can use for similarity searching.  A typical query is
   -->
   此时，你将有一个在<structfield>t</>列上的索引，你可以用它进行相似度搜索。
   一个典型的查询是
<programlisting>
SELECT t, similarity(t, '<replaceable>word</>') AS sml
  FROM test_trgm
  WHERE t % '<replaceable>word</>'
  ORDER BY sml DESC, t;
</programlisting>
   <!-- 
   This will return all values in the text column that are sufficiently
   similar to <replaceable>word</>, sorted from best match to worst.  The
   index will be used to make this a fast operation even over very large data
   sets.
   -->
   这将返回在文本列中与<replaceable>word</>足够相似的所有值，
   按最佳匹配到最差匹配的方式排序。索引将被用来使这是一个快速操作，
   即使在一个非常大的数据集上。
  </para>

  <para>
   <!-- A variant of the above query is -->
   上述查询的一种变体是
<programlisting>
SELECT t, t &lt;-&gt; '<replaceable>word</>' AS dist
  FROM test_trgm
  ORDER BY dist LIMIT 10;
</programlisting>
   <!-- 
   This can be implemented quite efficiently by GiST indexes, but not
   by GIN indexes.  It will usually beat the first formulation when only
   a small number of the closest matches is wanted.
   -->
   这个可以通过 GiST 索引有效地实现，但是用 GIN 索引无法做到。
   当只想要少数最接近的匹配时，这通常会比第一种形式更好。
  </para>

  <para>
   <!-- 
   Beginning in <productname>PostgreSQL</> 9.1, these index types also support
   index searches for <literal>LIKE</> and <literal>ILIKE</>, for example
   -->
   从<productname>PostgreSQL</> 9.1 开始，这些索引类型也支持用于
   <literal>LIKE</>和<literal>ILIKE</>的索引搜索，例如
<programlisting>
SELECT * FROM test_trgm WHERE t LIKE '%foo%bar';
</programlisting>
   <!-- 
   The index search works by extracting trigrams from the search string
   and then looking these up in the index.  The more trigrams in the search
   string, the more effective the index search is.  Unlike B-tree based
   searches, the search string need not be left-anchored.
   -->
   该索引搜索通过从搜索字符串中提取 trigram 并且在索引中查找它们来工作。
   搜索字符串中的 trigram 越多，索引搜索的效率越高。不像基于 B-树的搜索，
   搜索字符串不需要是左锚定的。
  </para>

  <para>
   <!-- 
   Beginning in <productname>PostgreSQL</> 9.3, these index types also support
   index searches for regular-expression matches
   (<literal>~</> and <literal>~*</> operators), for example
   -->
   从<productname>PostgreSQL</> 9.3 开始，这些索引类型也支持用于正则表达式匹配
   （<literal>~</>和<literal>~*</>操作符）的索引搜索，例如
<programlisting>
SELECT * FROM test_trgm WHERE t ~ '(foo|bar)';
</programlisting>
   <!-- 
   The index search works by extracting trigrams from the regular expression
   and then looking these up in the index.  The more trigrams that can be
   extracted from the regular expression, the more effective the index search
   is.  Unlike B-tree based searches, the search string need not be
   left-anchored.
   -->
   该索引搜索通过从正则表达式中提取 trigram 并且在索引中查找它们来工作。
   搜索字符串中的 trigram 越多，索引搜索的效率越高。不像基于 B-树的搜索，
   搜索字符串不需要是左锚定的。
  </para>

  <!-- 
  <para>
   For both <literal>LIKE</> and regular-expression searches, keep in mind
   that a pattern with no extractable trigrams will degenerate to a full-index
   scan.
  </para>
  -->
  <para>
   对于<literal>LIKE</>和正则表达式搜索，记住没有可提取 trigram 
   的模式将退化成一个全文索引扫描。
  </para>

  <!-- 
  <para>
   The choice between GiST and GIN indexing depends on the relative
   performance characteristics of GiST and GIN, which are discussed elsewhere.
   As a rule of thumb, a GIN index is faster to search than a GiST index, but
   slower to build or update; so GIN is better suited for static data and GiST
   for often-updated data.
  </para>
  -->
  <para>
   选择GiST还是GIN索引取决于GiST和GIN的相对性能特征，这在其他地方讨论。
   一般来说，搜索 GIN 索引比 GiST 索引更快，但是在构建或者更新时要慢。
   所以 GIN 更适合于静态数据，而 GiST 更适合于经常更新的数据。
  </para>
 </sect2>

 <sect2>
  <!-- 
  <title>Text Search Integration</title>
  -->
  <title>文本搜索集成</title>

  <!-- 
  <para>
   Trigram matching is a very useful tool when used in conjunction
   with a full text index.  In particular it can help to recognize
   misspelled input words that will not be matched directly by the
   full text search mechanism.
  </para>
  -->
  <para>
   在与一个全文索引联合使用时，trigram 匹配是一个非常有用的工具。
   特别是它能有助于识别拼写错误的输入词，这些词直接用全文搜索机制是不会被匹配的。
  </para>

  <para>
   <!-- 
   The first step is to generate an auxiliary table containing all
   the unique words in the documents:
   -->
   第一步是生成一个包含文档中所有唯一词的辅助表：

<programlisting>
CREATE TABLE words AS SELECT word FROM
        ts_stat('SELECT to_tsvector(''simple'', bodytext) FROM documents');
</programlisting>

   <!-- 
   where <structname>documents</> is a table that has a text field
   <structfield>bodytext</> that we wish to search.  The reason for using
   the <literal>simple</> configuration with the <function>to_tsvector</>
   function, instead of using a language-specific configuration,
   is that we want a list of the original (unstemmed) words.
   -->
   其中<structname>documents</>是一个具有我们希望搜索的文本域
   <structfield>bodytext</>的表。对<function>to_tsvector</>函数使用
   <literal>simple</>配置而不是使用语言特定的配置的原因是，我们想要一个原始
   （没有去掉词根的）词的列表。
  </para>

  <para>
   <!-- 
   Next, create a trigram index on the word column:
   -->
   接下来，在词列上创建一个 trigram 索引：

<programlisting>
CREATE INDEX words_idx ON words USING GIN(word gin_trgm_ops);
</programlisting>

   <!-- 
   Now, a <command>SELECT</command> query similar to the previous example can
   be used to suggest spellings for misspelled words in user search terms.
   A useful extra test is to require that the selected words are also of
   similar length to the misspelled word.
   -->
   现在，类似于前面例子的一个<command>SELECT</command>
   查询可以被用来为用户搜索术语中的拼写不当的词建议拼写。
   有用的额外测试是要求所选择的词也具有与拼写错误的词相似的长度。
  </para>

  <note>
   <!-- 
   <para>
    Since the <structname>words</> table has been generated as a separate,
    static table, it will need to be periodically regenerated so that
    it remains reasonably up-to-date with the document collection.
    Keeping it exactly current is usually unnecessary.
   </para>
   -->
   <para>
    由于<structname>words</>表已经被生成为一个单独的、静态的表，
    它将需要定期地重新生成，这样它能合理地与文档集合保持一致。
    但是保持它完全与文档集合同步通常是不必要的。
   </para>
  </note>
 </sect2>

 <sect2>
  <!-- 
  <title>References</title>
  -->
  <title>参考</title>

  <!-- 
  <para>
   GiST Development Site
   <ulink url="http://www.sai.msu.su/~megera/postgres/gist/"></ulink>
  </para>
  -->
  <para>
   GiST 开发站点
   <ulink url="http://www.sai.msu.su/~megera/postgres/gist/"></ulink>
  </para>
  <!-- 
  <para>
   Tsearch2 Development Site
   <ulink url="http://www.sai.msu.su/~megera/postgres/gist/tsearch/V2/"></ulink>
  </para>
  -->
  <para>
   Tsearch2 开发站点
   <ulink url="http://www.sai.msu.su/~megera/postgres/gist/tsearch/V2/"></ulink>
  </para>
 </sect2>

 
 <sect2>
  <!-- 
  <title>Authors</title>
  -->
  <title>作者</title>

  <!-- 
  <para>
   Oleg Bartunov <email>oleg@sai.msu.su</email>, Moscow, Moscow University, Russia
  </para>
  -->
  <para>
   Oleg Bartunov <email>oleg@sai.msu.su</email>，俄罗斯莫斯科大学
  </para>
  <!-- 
  <para>
   Teodor Sigaev <email>teodor@sigaev.ru</email>, Moscow, Delta-Soft Ltd.,Russia
  </para>
  -->
  <para>
   Teodor Sigaev <email>teodor@sigaev.ru</email>，俄罗斯莫斯科 Delta-Soft 有限责任公司
  </para>
  <!-- 
  <para>
   Documentation: Christopher Kings-Lynne
  </para>
  -->
  <para>
   文档：Christopher Kings-Lynne
  </para>
  <!-- 
  <para>
   This module is sponsored by Delta-Soft Ltd., Moscow, Russia.
  </para>
  -->
  <para>
   这个模块由俄罗斯莫斯科 Delta-Soft 有限责任公司赞助的。
  </para>
 </sect2>

</sect1>
