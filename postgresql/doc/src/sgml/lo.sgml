<!-- doc/src/sgml/lo.sgml -->

<sect1 id="lo" xreflabel="lo">
 <title>lo</title>

 <indexterm zone="lo">
  <primary>lo</primary>
 </indexterm>

 <!--
<para>
  The <filename>lo</> module provides support for managing Large Objects
  (also called LOs or BLOBs).  This includes a data type <type>lo</>
  and a trigger <function>lo_manage</>.
 </para>
-->
<para>
<filename>lo</>模块为管理大对象（也叫做LO或BLOB）提供支持。
包括数据类型<type>lo</>和触发器<function>lo_manage</>。
</para>

 <sect2>
  <!--
  <title>Rationale</title>
  -->
  <title>原理</title>

  <!--
<para>
   One of the problems with the JDBC driver (and this affects the ODBC driver
   also), is that the specification assumes that references to BLOBs (Binary
   Large OBjects) are stored within a table, and if that entry is changed, the
   associated BLOB is deleted from the database.
  </para>
-->
<para>
JDBC驱动的问题之一（也影响ODBC驱动），是规范假设BLOB（二进制大对象）的参数是存储在一个表内的，
并且如果该项改变了，那么相关的BLOB会从数据库中删除。
</para>

  <!--
<para>
   As <productname>PostgreSQL</> stands, this doesn't occur.  Large objects
   are treated as objects in their own right; a table entry can reference a
   large object by OID, but there can be multiple table entries referencing
   the same large object OID, so the system doesn't delete the large object
   just because you change or remove one such entry.
  </para>
-->
<para>
作为<productname>PostgreSQL</>标准，这个不会发生。大对象被视为对象；
一个表项可以通过OID引用一个大对象，不过可能多个表项引用同一个大对象OID，
所以系统不会因为你改变或删除一个表项就删除大对象。
</para>

  <!--
<para>
   Now this is fine for <productname>PostgreSQL</>-specific applications, but
   standard code using JDBC or ODBC won't delete the objects, resulting in
   orphan objects &mdash; objects that are not referenced by anything, and
   simply occupy disk space.
  </para>
-->
<para>
这对<productname>PostgreSQL</>专有应用来说很好，但是使用JDBC或ODBC的标准代码不会删除大对象，
导致孤独的对象&mdash;对象不被任何东西引用，只是简单的占用磁盘空间。
</para>

  <!--
<para>
   The <filename>lo</> module allows fixing this by attaching a trigger
   to tables that contain LO reference columns.  The trigger essentially just
   does a <function>lo_unlink</> whenever you delete or modify a value
   referencing a large object.  When you use this trigger, you are assuming
   that there is only one database reference to any large object that is
   referenced in a trigger-controlled column!
  </para>
-->
<para>
<filename>lo</>模块允许通过在包含LO引用字段的表上附加一个触发器修复这个问题。
该触发器本质上只是在你删除或修改一个引用大对象的值时做<function>lo_unlink</>。
当使用这个触发器时，假设只有一个数据库引用被触发器控制字段引用的任意的大对象。
</para>

  <!--
<para>
   The module also provides a data type <type>lo</>, which is really just
   a domain of the <type>oid</> type.  This is useful for differentiating
   database columns that hold large object references from those that are
   OIDs of other things.  You don't have to use the <type>lo</> type to
   use the trigger, but it may be convenient to use it to keep track of which
   columns in your database represent large objects that you are managing with
   the trigger.  It is also rumored that the ODBC driver gets confused if you
   don't use <type>lo</> for BLOB columns.
  </para>
-->
<para>
该模块也支持数据类型<type>lo</>，该类型实际上只是一个<type>oid</>类型的域。
这对于区别持有大对象引用的数据库字段和那些其他事情的OID有帮助。
你不必使用<type>lo</>类型来使用该触发器，
但是使用它会很方便的记录你的数据库中的哪个字段代表管理该触发器的大对象，
如果你不为BLOB字段使用<type>lo</>，据说ODBC驱动器也会感到迷惑。
</para>
 </sect2>

 <sect2>
  <!-- 
  <title>How to Use It</title>
  -->
  <title>怎样使用</title>

  <!--
<para>
   Here's a simple example of usage:
  </para>
-->
<para>
这是一个使用的简单的例子：
</para>

<programlisting>
CREATE TABLE image (title TEXT, raster lo);

CREATE TRIGGER t_raster BEFORE UPDATE OR DELETE ON image
    FOR EACH ROW EXECUTE PROCEDURE lo_manage(raster);
</programlisting>

  <!--
<para>
   For each column that will contain unique references to large objects,
   create a <literal>BEFORE UPDATE OR DELETE</> trigger, and give the column
   name as the sole trigger argument.  You can also restrict the trigger
   to only execute on updates to the column by using <literal>BEFORE UPDATE
   OF</literal> <replaceable class="parameter">column_name</replaceable>.
   If you need multiple <type>lo</>
   columns in the same table, create a separate trigger for each one,
   remembering to give a different name to each trigger on the same table.
  </para>
-->
<para>
对于每个将要包含大对象的唯一引用的字段，创建一个<literal>BEFORE UPDATE OR DELETE</>
触发器，并将字段名作为触发器唯一的参数。你也可以通过使用<literal>BEFORE UPDATE
   OF</literal> <replaceable class="parameter">column_name</replaceable>
限制触发器只在该字段更新时执行。如果你在相同的表中需要多个<type>lo</>字段，
那么为每个字段创建一个单独的触发器，记得给相同表上的每个触发器以不同的名字。
</para>
 </sect2>

 <sect2>
  <!-- 
  <title>Limitations</title>
  -->
  <title>限制</title>

  <itemizedlist>
   <listitem>
    <!--
<para>
     Dropping a table will still orphan any objects it contains, as the trigger
     is not executed.  You can avoid this by preceding the <command>DROP
     TABLE</> with <command>DELETE FROM <replaceable>table</></command>.
    </para>
-->
<para>
删除一个表仍然将孤立它包含的任意对象，因为触发器没有执行。你可以通过在<command>DROP
     TABLE</>之前<command>DELETE FROM <replaceable>table</></command>来避免这个问题。
</para>

    <!--
<para>
     <command>TRUNCATE</> has the same hazard.
    </para>
-->
<para>
<command>TRUNCATE</>有同样的危险。
</para>

    <!--
<para>
     If you already have, or suspect you have, orphaned large objects, see the
     <xref linkend="vacuumlo"> module to help
     you clean them up.  It's a good idea to run <application>vacuumlo</>
     occasionally as a back-stop to the <function>lo_manage</> trigger.
    </para>
-->
<para>
如果你已经有或者怀疑你有孤立的大对象，参阅<xref linkend="vacuumlo">
模块帮助你清除它们。偶尔运行<xref linkend="vacuumlo">
作为<function>lo_manage</>触发器的后备是一个好主意。
</para>
   </listitem>

   <listitem>
    <!--
<para>
     Some frontends may create their own tables, and will not create the
     associated trigger(s).  Also, users may not remember (or know) to create
     the triggers.
    </para>
-->
<para>
一些前端可能创建他们自己的表，并且不创建相关的触发器。还有，用户可能不记得（或知道）
创建触发器。
</para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2>
  <!--
  <title>Author</title>
  -->
  <title>作者</title>
  
<para>
   Peter Mount <email>peter@retep.org.uk</email>
  </para>
 </sect2>

</sect1>
