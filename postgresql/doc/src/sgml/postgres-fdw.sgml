<!-- doc/src/sgml/postgres-fdw.sgml -->

<sect1 id="postgres-fdw" xreflabel="postgres_fdw">
 <title>postgres_fdw</title>

 <indexterm zone="postgres-fdw">
  <primary>postgres_fdw</primary>
 </indexterm>

 <!-- 
  The <filename>postgres_fdw</> module provides the foreign-data wrapper
  <literal>postgres_fdw</literal>, which can be used to access data
  stored in external <productname>PostgreSQL</productname> servers.
  -->
 <para>
  <filename>postgres_fdw</>模块提供外部数据封装器的功能，PostgreSQL通过
  它可以访问存储在外部的 <productname>PostgreSQL</productname>服务器上的数据。
 </para>
 <!--
  The functionality provided by this module overlaps substantially
  with the functionality of the older <xref linkend="dblink"> module.
  But <filename>postgres_fdw</> provides more transparent and
  standards-compliant syntax for accessing remote tables, and can give
  better performance in many cases.
 -->
 <para>
  本模块提供的功能不但涵盖老版本中<xref linkend="dblink">模块实现的功能，
  而且postgres_fdw提供更加透明和符合标准的语法来访问远程表，并在许多情况下
  提供更好的性能。 
 </para>
 <para>
  <!--To prepare for remote access using <filename>postgres_fdw</>:-->
  使用<filename>postgres_fdw</>模块做远程访问的准备:
  <orderedlist spacing="compact">
   <listitem>
    <para>
     <!--Install the  <filename>postgres_fdw</> extension using <xref
     linkend="sql-createextension">.-->
     使用<xref linkend="sql-createextension">语句安装<filename>postgres_fdw</>.
    </para>
   </listitem>
   <listitem>
    <para>
     <!--Create a foreign server object, using <xref linkend="sql-createserver">,
     to represent each remote database you want to connect to.
     Specify connection information, except <literal>user</literal> and
     <literal>password</literal>, as options of the server object.-->
     使用<xref linkend="sql-createserver">语句,为每个需要连接的远程数据库
     创建一个外部服务器对象。指定除了<literal>user</literal>和<literal>password</literal>
     以外的连接信息作为服务器对象的选项。
    </para>
   </listitem>
   <listitem>
    <para>
     <!--Create a user mapping, using <xref linkend="sql-createusermapping">, for
     each database user you want to allow to access each foreign server.
     Specify the remote user name and password to use as
     <literal>user</literal> and <literal>password</literal> options of the
     user mapping.-->
     使用<xref linkend="sql-createusermapping">语句，为每个需要通过外部服务器
     访问的数据库创建用户映射。指定远程的和密码作为映射用户的<literal>user</literal>
     和<literal>password</literal>。
    </para>
   </listitem>
   <listitem>
    <para>
     <!--Create a foreign table, using <xref linkend="sql-createforeigntable">,
     for each remote table you want to access.  The columns of the foreign
     table must match the referenced remote table.  You can, however, use
     table and/or column names different from the remote table's, if you
     specify the correct remote names as options of the foreign table object.-->
     使用<xref linkend="sql-createforeigntable">语句，为每个需要访问的远程表创建外部表。
     创建的外部表的对应列必须与远程表匹配。也可以在外部表中使用与远程表不同的表名和列名，
     但前提是你必须将正确的远程对象名作为创建外部表对象的选项。
    </para>
   </listitem>
  </orderedlist>
 </para>

 <!--
  Now you need only <command>SELECT</> from a foreign table to access
  the data stored in its underlying remote table.  You can also modify
  the remote table using <command>INSERT</>, <command>UPDATE</>, or
  <command>DELETE</>.  (Of course, the remote user you have specified
  in your user mapping must have privileges to do these things.)
 -->
 <para>
  上面的操作成功后就可以使用<command>SELECT</>外部表的方式访问存储在
  远程表中的数据了。同样<command>INSERT</>, <command>UPDATE</>和
  <command>DELETE</>操作都是可以执行的。（映射的远程用户需要有能做这些操作的权限）
 </para>
 <!--
  It is generally recommended that the columns of a foreign table be declared
  with exactly the same data types, and collations if applicable, as the
  referenced columns of the remote table.  Although <filename>postgres_fdw</>
  is currently rather forgiving about performing data type conversions at
  need, surprising semantic anomalies may arise when types or collations do
  not match, due to the remote server interpreting <literal>WHERE</> clauses
  slightly differently from the local server.
  -->
 <para> 
  建议外部表的字段和相关联的远程表使用相同的数据类型和校对规则，虽然
  <filename>postgres_fdw</>允许在需要的时候进行字符类型的转换，但当数据
  类型和校对规则不匹配的时候，由于远程服务器和本地服务器对于
  <literal>WHERE</>条件的不同解释，也许会造成语义的错误。
 </para>
 <!-- 
  Note that a foreign table can be declared with fewer columns, or with a
  different column order, than its underlying remote table has.  Matching
  of columns to the remote table is by name, not position.
  -->
 <para>
  需要注意的是一个外部表可以声明比和他关联的远程表更少的列，列的排序也可以
  不同。和远程表列的关联用的是列名，和列的位置无关。
 </para>
 <sect2>
  <!--<title>FDW Options of postgres_fdw</title> -->
  <title>postgres_fdw中FDW选项</title>

  <sect3>
   <!--<title>Connection Options</title>-->
   <title>连接选项</title>
   <para>
    <!-- A foreign server using the <filename>postgres_fdw</> foreign data wrapper
    can have the same options that <application>libpq</> accepts in
    connection strings, as described in <xref linkend="libpq-paramkeywords">,
    except that these options are not allowed: -->
    一个作为封装外部数据使用的外部服务器，可以使用libpq接受的连接字符串，详见
    <xref linkend="libpq-paramkeywords">，除了下面的选项是不允许使用的：
    <itemizedlist spacing="compact">
     <listitem>
      <para>
       <!-- <literal>user</literal> and <literal>password</literal> (specify these
       for a user mapping, instead) -->
       <literal>user</literal>和<literal>password</literal>（将在用户映射中指定）
       </para>
     </listitem>
     
     <listitem>
      <para>
       <!-- <literal>client_encoding</> (this is automatically set from the local
       server encoding) -->
       <literal>client_encoding</>(根据本地服务器编码自动设定）
      </para> 
     </listitem>
     <listitem>
      <para>
       <!-- <literal>fallback_application_name</> (always set to
       <literal>postgres_fdw</>) -->
       <literal>fallback_application_name</>(设定为<literal>postgres_fdw</>）
      </para>
     </listitem>
    </itemizedlist>
   </para>

   <para>
    <!-- Only superusers may connect to foreign servers without password
    authentication, so always specify the <literal>password</literal> option
    for user mappings belonging to non-superusers. -->
    只有超级用户连接到外部服务器是不需要密码的，所以需要为映射的普通用户指定
    <literal>password</literal>。
   </para>
  </sect3>

  <sect3>
   <!--<title>Object Name Options</title>-->
   <title>对象名称选项</title>
   <para>
    <!--These options can be used to control the names used in SQL statements
    sent to the remote <productname>PostgreSQL</productname> server.  These
    options are needed when a foreign table is created with names different
    from the underlying remote table's names.-->
    这些设置选项被用来控制被发往远程postgres服务器中的sql语句对象名称。
    在外部表的名和关联的远程表名不同时，用于设置关联。
   </para>

   <variablelist>

    <varlistentry>
     <term><literal>schema_name</literal></term>
     <listitem>
      <para>
       <!--This option, which can be specified for a foreign table, gives the
       schema name to use for the foreign table on the remote server.  If this
       option is omitted, the name of the foreign table's schema is used.-->
       这个选项可以为外部表指定模式名，和远程服务器上的表做关联。如果忽略
       这个选项，远程表本身的模式名会被外部表使用。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>table_name</literal></term>
     <listitem>
      <para>
       <!--This option, which can be specified for a foreign table, gives the
       table name to use for the foreign table on the remote server.  If this
       option is omitted, the foreign table's name is used.-->
       这个选项可以为外部表指定表名，和远程服务器上的表做关联。如果忽略
       这个选项，远程表本身的表名会被外部表使用。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>column_name</literal></term>
     <listitem>
      <para>
       <!--This option, which can be specified for a column of a foreign table,
       gives the column name to use for the column on the remote server.
       If this option is omitted, the column's name is used.-->
       这个选项可以为外部表列指定表名，和远程服务器上的列做关联。如果忽略
       这个选项，远程表本身的列名会被外部表使用。
      </para>
     </listitem>
    </varlistentry>

   </variablelist>

  </sect3>

  <sect3>
   <!--<title>Cost Estimation Options</title>-->
   <title>成本估算选项</title>
   <para>
    <!--<filename>postgres_fdw</> retrieves remote data by executing queries
    against remote servers, so ideally the estimated cost of scanning a
    foreign table should be whatever it costs to be done on the remote
    server, plus some overhead for communication.  The most reliable way to
    get such an estimate is to ask the remote server and then add something
    for overhead &mdash; but for simple queries, it may not be worth the cost
    of an additional remote query to get a cost estimate.
    So <filename>postgres_fdw</> provides the following options to control
    how cost estimation is done:-->
    <filename>postgres_fdw</>检索数据是在远程服务器上执行的，所以成本的估算
    不只是远程服务器扫描外部表的效率，还应该加上网络通信的开销。想要获得预期
    结果最可靠的方式是对远程服务器做请求增加开销，但是对于一些简单查询来说可能
    不值得这样做，所<filename>postgres_fdw</>提供如下选项做成本估算：
    
   </para>

   <variablelist>

    <varlistentry>
     <term><literal>use_remote_estimate</literal></term>
     <listitem>
      <para>
       <!--This option, which can be specified for a foreign table or a foreign
       server, controls whether <filename>postgres_fdw</> issues remote
       <command>EXPLAIN</command> commands to obtain cost estimates.
       A setting for a foreign table overrides any setting for its server,
       but only for that table.
       The default is <literal>false</literal>.-->
       外部表或者外部服务器可以指定该选项，用来控制<filename>postgres_fdw</>是否发出远程的
       <command>EXPLAIN</command>命令来获取成本估算。表的设定优先于服务器的设定，但只限于
       设定的表。默认值的false。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>fdw_startup_cost</literal></term>
     <listitem>
      <para>
       <!--This option, which can be specified for a foreign server, is a numeric
       value that is added to the estimated startup cost of any foreign-table
       scan on that server.  This represents the additional overhead of
       establishing a connection, parsing and planning the query on the
       remote side, etc.
       The default value is <literal>100</literal>.-->
       外部服务器可以指定该选项，该数值类型的选项会在每个外部表的查询开始前加入
       一个数值成本。用这个值代表建立连接，在远程端的查询分析和规划的额外开销。
       默认值是 <literal>100</literal>。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>fdw_tuple_cost</literal></term>
     <listitem>
      <para>
       <!--This option, which can be specified for a foreign server, is a numeric
       value that is used as extra cost per-tuple for foreign-table
       scans on that server.  This represents the additional overhead of
       data transfer between servers.  You might increase or decrease this
       number to reflect higher or lower network delay to the remote server.
       The default value is <literal>0.01</literal>.-->
       外部服务器可以指定该选项，该数值类型的选项会根据外部表扫描结果为每行加入
       一个额外的成本。这个代表服务器间传输数据的额外的网络开销。可以用这个数值
       的高低来反应到远程服务器的网络延迟。默认值是<literal>0.01</literal>。
      </para>
     </listitem>
    </varlistentry>

   </variablelist>

   <para>
    <!--When <literal>use_remote_estimate</literal> is true,
    <filename>postgres_fdw</> obtains row count and cost estimates from the
    remote server and then adds <literal>fdw_startup_cost</literal> and
    <literal>fdw_tuple_cost</literal> to the cost estimates.  When
    <literal>use_remote_estimate</literal> is false,
    <filename>postgres_fdw</> performs local row count and cost estimation
    and then adds <literal>fdw_startup_cost</literal> and
    <literal>fdw_tuple_cost</literal> to the cost estimates.  This local
    estimation is unlikely to be very accurate unless local copies of the
    remote table's statistics are available.  Running
    <xref linkend="sql-analyze"> on the foreign table is the way to update
    the local statistics; this will perform a scan of the remote table and
    then calculate and store statistics just as though the table were local.
    Keeping local statistics can be a useful way to reduce per-query planning
    overhead for a remote table &mdash; but if the remote table is
    frequently updated, the local statistics will soon be obsolete.-->
     <literal>use_remote_estimate</literal>值为真的时候，成本估算的方法是
     <filename>postgres_fdw</>获取远程服务器的语句执行操作成本估算值加上
     <literal>fdw_startup_cost</literal>和<literal>use_remote_estimate</literal>。
     当值为假的时候，成本估算方法只能是按照语句本地的执行成本加上
     <literal>fdw_startup_cost</literal>和<literal>use_remote_estimate</literal>。
     除非本地表的统计信息和远程表统计信息的相同，否则本地的估算一般是不精确的。
     在外部表执行<xref linkend="sql-analyze">操作来刷新远程表的统计信息，
     这个操作会扫描远程表，使计算和存储统计信息就像在本地一样。在本地保存统计信息
     可以减少远程表的每个查询的执行计划都造成系统开销。但是如果远程表被更新的频率
     太高，本地的统计信息也会很快失去应有的作用。
   </para>

  </sect3>

  <sect3>
   <!--<title>Updatability Options</title>-->
   <title>更新选型</title>
   <para>
    <!--By default all foreign tables using <filename>postgres_fdw</> are assumed
    to be updatable.  This may be overridden using the following option:-->
    默认情况下，所有<filename>postgres_fdw</>相关外部表都假设是可以更新的。应用时
    优先下面的选项
    功能:
   </para>

   <variablelist>

    <varlistentry>
     <term><literal>updatable</literal></term>
     <listitem>
      <para>
       <!--This option controls whether <filename>postgres_fdw</> allows foreign
       tables to be modified using <command>INSERT</>, <command>UPDATE</> and
       <command>DELETE</> commands.  It can be specified for a foreign table
       or a foreign server.  A table-level option overrides a server-level
       option.
       The default is <literal>true</>.-->
       这个选项用来控制外部表是否可以用<command>INSERT</>,<command>UPDATE</>和
       <command>DELETE</>来修改。该选项可以被外部表或者外部服务器指定。表级别的
       选项优先于服务器级别的。默认值是<literal>true</>。
      </para>

      <para>
       <!--Of course, if the remote table is not in fact updatable, an error
       would occur anyway.  Use of this option primarily allows the error to
       be thrown locally without querying the remote server.  Note however
       that the <literal>information_schema</> views will report a
       <filename>postgres_fdw</> foreign table to be updatable (or not)
       according to the setting of this option, without any check of the
       remote server.-->
       当然如果一个远程表本身是不能用增删改的，那将会报错。错误直接会在本地抛出。
       注意<literal>information_schema</>将会根据这个选项的设置显示一个外部表是
       否可以增删改，而不会去检查远程服务器。
      </para>
     </listitem>
    </varlistentry>

   </variablelist>
  </sect3>
 </sect2>

 <sect2>
  <!--<title>Connection Management</title>-->
  <title>连接管理</title>
  <para>
   <!-- <filename>postgres_fdw</filename> establishes a connection to a
   foreign server during the first query that uses a foreign table
   associated with the foreign server.  This connection is kept and
   re-used for subsequent queries in the same session.  However, if
   multiple user identities (user mappings) are used to access the foreign
   server, a connection is established for each user mapping.-->
   <filename>postgres_fdw</filename>会在第一个查询外部服务器关联的外部表时
   建立和外部服务器的连接。这个连接会一直保持，而且在同一个会话中被重用。
   如果涉及多个用户（用户映射）访问外部服务器时，每个用户映射都户建立一个连接。
  </para>
 </sect2>

 <sect2>
  <!--<title>Transaction Management</title>-->
  <title>事务管理</title>
  <para>
   <!--During a query that references any remote tables on a foreign server,
   <filename>postgres_fdw</filename> opens a transaction on the
   remote server if one is not already open corresponding to the current
   local transaction.  The remote transaction is committed or aborted when
   the local transaction commits or aborts.  Savepoints are similarly
   managed by creating corresponding remote savepoints.-->
   当查询涉及外部服务器的远程表时，将在本地开启一个对应的事务, 
   <filename>postgres_fdw</filename>将会在远程服务器也开启事务。
   远程事务会和本地事务提交终保持同步。保存点也是一样。
  </para>

  <para>
   <!--The remote transaction uses <literal>SERIALIZABLE</>
   isolation level when the local transaction has <literal>SERIALIZABLE</>
   isolation level; otherwise it uses <literal>REPEATABLE READ</>
   isolation level.  This choice ensures that if a query performs multiple
   table scans on the remote server, it will get snapshot-consistent results
   for all the scans.  A consequence is that successive queries within a
   single transaction will see the same data from the remote server, even if
   concurrent updates are occurring on the remote server due to other
   activities.  That behavior would be expected anyway if the local
   transaction uses <literal>SERIALIZABLE</> or <literal>REPEATABLE READ</>
   isolation level, but it might be surprising for a <literal>READ
   COMMITTED</> local transaction.  A future
   <productname>PostgreSQL</productname> release might modify these rules.-->
   当本地的事务隔离级别为<literal>SERIALIZABLE</>时，远程的事务隔离级别也使用
   <literal>SERIALIZABLE</>。否者远程的隔离级别将是<literal>REPEATABLE READ</>。
   这是为了保证如果一个查询涉及远程服器上多个表的扫描，所有的扫描都会得到一致
   的快照结果。这样产生的结果是即使远程服务器上的数据由于其他的操作在更新，单
   个事务查询返回的结果也是一样的。上述结果在本地事务隔离级别 <literal>SERIALIZABLE</>
   和<literal>REPEATABLE READ</>无论怎样都是可以实现的，但是在<literal>READ COMMITTED</>
   下可能会得到意想不到的结果。未来的<productname>PostgreSQL</productname>发行版本也许会
   修改这些规则。
  </para>
 </sect2>

 <sect2>
  <!--<title>Remote Query Optimization</title>-->
  <title>远程查询优化</title>
  <para>
   <!--<filename>postgres_fdw</> attempts to optimize remote queries to reduce
   the amount of data transferred from foreign servers.  This is done by
   sending query <literal>WHERE</> clauses to the remote server for
   execution, and by not retrieving table columns that are not needed for
   the current query.  To reduce the risk of misexecution of queries,
   <literal>WHERE</> clauses are not sent to the remote server unless they use
   only built-in data types, operators, and functions.  Operators and
   functions in the clauses must be <literal>IMMUTABLE</> as well.-->
   postgres_fdw尝试优化远程查询，以减少从外部服务器的数据传输量。通用将带
   <literal>WHERE</>查询条件的语句传到远程服务器上执行和不取回与查询结果不相关
   的列来实现。为了减少查询未被执行的风险,<literal>WHERE</>从句中都是内建的数据类型
   操作和函数的时候才会被传到远程服务器上。在从句中的操作和函数必须是不可变的。
  </para>
  <para>
   <!--The query that is actually sent to the remote server for execution can
   be examined using <command>EXPLAIN VERBOSE</>.-->
   <command>EXPLAIN VERBOSE</>可以用来检查被送到远程服务器上的查询执行的实际状况。
  </para>
   
 </sect2>

 <sect2>
  <!--<title>Cross-Version Compatibility</title>-->
  <title>版本兼容</title>
  
  <para>
   <!--<filename>postgres_fdw</> can be used with remote servers dating back
   to <productname>PostgreSQL</> 8.3.  Read-only capability is available
   back to 8.1.  A limitation however is that <filename>postgres_fdw</>
   generally assumes that immutable built-in functions and operators are
   safe to send to the remote server for execution, if they appear in a
   <literal>WHERE</> clause for a foreign table.  Thus, a built-in
   function that was added since the remote server's release might be sent
   to it for execution, resulting in <quote>function does not exist</> or
   a similar error.  This type of failure can be worked around by
   rewriting the query, for example by embedding the foreign table
   reference in a sub-<literal>SELECT</> with <literal>OFFSET 0</> as an
   optimization fence, and placing the problematic function or operator
   outside the sub-<literal>SELECT</>.-->
   <filename>postgres_fdw</>可以将<productname>PostgreSQL</>8.3版本以后的服务器
   作为远程服务器使用。8.1,8,2的服务器只能提供读的功能。有这样个问题由于版本的差异
   将where中的内建函数送到远程服务器上执行的时候，远程服务器由于版本低无法识别会报
   <quote>function does not exist</>或者相似的错误。可以用从写sql的方式解决，我们嵌入
   一个子查询sub-<literal>SELECT</> with <literal>OFFSET 0</>,将有问题的函数和操作移
   出 sub-<literal>SELECT</>。
  </para>
 </sect2>

 <sect2>
  <!--<title>Author</title>-->
  <title>作者</title>
  <para>
   Shigeru Hanada <email>shigeru.hanada@gmail.com</email>
  </para>
 </sect2>

</sect1>
