<!-- doc/src/sgml/postgres-fdw.sgml -->

<sect1 id="postgres-fdw" xreflabel="postgres_fdw">
 <title>postgres_fdw</title>

 <indexterm zone="postgres-fdw">
  <primary>postgres_fdw</primary>
 </indexterm>

 <!-- 
 <para>
  The <filename>postgres_fdw</> module provides the foreign-data wrapper
  <literal>postgres_fdw</literal>, which can be used to access data
  stored in external <productname>PostgreSQL</productname> servers.
 </para>
 -->
 <para>
  <filename>postgres_fdw</>模块提供了外部数据封装器<literal>postgres_fdw</literal>，
  它可以被用来访问存储在外部<productname>PostgreSQL</productname>服务器中的数据。
 </para>

 <!-- 
 <para>
  The functionality provided by this module overlaps substantially
  with the functionality of the older <xref linkend="dblink"> module.
  But <filename>postgres_fdw</> provides more transparent and
  standards-compliant syntax for accessing remote tables, and can give
  better performance in many cases.
 </para>
 -->
 <para>
  这个模块提供的功能基本上覆盖了较老的<xref linkend="dblink">模块的功能。
  但是<filename>postgres_fdw</>提供了更透明且更兼容标准的语法来访问远程表，
  并且可以在很多情况下给出更好的性能。
 </para>

 <para>
  <!-- 
  To prepare for remote access using <filename>postgres_fdw</>:
  -->
  要使用<filename>postgres_fdw</>来为远程访问做准备：
  <orderedlist spacing="compact">
   <listitem>
    <!-- 
    <para>
     Install the  <filename>postgres_fdw</> extension using <xref
     linkend="sql-createextension">.
    </para>
    -->
    <para>
     使用<xref linkend="sql-createextension">来安装<filename>postgres_fdw</>扩展。
    </para>
   </listitem>
   <listitem>
    <!-- 
    <para>
     Create a foreign server object, using <xref linkend="sql-createserver">,
     to represent each remote database you want to connect to.
     Specify connection information, except <literal>user</literal> and
     <literal>password</literal>, as options of the server object.
    </para>
    -->
    <para>
     使用<xref linkend="sql-createserver">创建外部服务器对象，
     以表示你想连接的每一个远程数据库。指定除了<literal>user</literal>和
     <literal>password</literal>之外的连接信息作为该服务器对象的选项。
    </para>
   </listitem>
   <listitem>
    <!-- 
    <para>
     Create a user mapping, using <xref linkend="sql-createusermapping">, for
     each database user you want to allow to access each foreign server.
     Specify the remote user name and password to use as
     <literal>user</literal> and <literal>password</literal> options of the
     user mapping.
    </para>
    -->
    <para>
     使用<xref linkend="sql-createusermapping">，
     为每个要允许访问外部服务器的数据库用户创建用户映射。
     指定远程用户名和口令作为用户映射的<literal>user</literal>和<literal>password</literal>选项。
    </para>
   </listitem>
   <listitem>
    <!-- 
    <para>
     Create a foreign table, using <xref linkend="sql-createforeigntable">
     or <xref linkend="sql-importforeignschema">,
     for each remote table you want to access.  The columns of the foreign
     table must match the referenced remote table.  You can, however, use
     table and/or column names different from the remote table's, if you
     specify the correct remote names as options of the foreign table object.
    </para>
    -->
    <para>
     使用<xref linkend="sql-createforeigntable">或<xref linkend="sql-importforeignschema">，
     为每一个你想访问的远程表创建一个外部表。外部表的列必须匹配被引用的远程表。
     但是，如果指定正确的远程名称作为外部表对象的选项，则可以使用与远程表不同的表和/或列名。
    </para>
   </listitem>
  </orderedlist>
 </para>

 <!-- 
 <para>
  Now you need only <command>SELECT</> from a foreign table to access
  the data stored in its underlying remote table.  You can also modify
  the remote table using <command>INSERT</>, <command>UPDATE</>, or
  <command>DELETE</>.  (Of course, the remote user you have specified
  in your user mapping must have privileges to do these things.)
 </para>
 -->
 <para>
  现在你只需要从一个外部表<command>SELECT</>来访问存储在它的底层的远程表中的数据。
  你也可以使用<command>INSERT</>、<command>UPDATE</>或<command>DELETE</>修改远程表
  （当然，你在你的用户映射中已经指定的远程用户必须具有做这些事情的权限）。
 </para>

 <!-- 
 <para>
  Note that <filename>postgres_fdw</> currently lacks support for
  <command>INSERT</command> statements with an <literal>ON CONFLICT DO
  UPDATE</> clause.  However, the <literal>ON CONFLICT DO NOTHING</>
  clause is supported, provided a unique index inference specification
  is omitted.
 </para>
 -->
  <para>
  请注意，<filename>postgres_fdw</>目前不支持带有<literal>ON CONFLICT DO UPDATE</>
  子句的<command>INSERT</command>语句。但是，如果省略了唯一索引推理规范，
  则支持<literal>ON CONFLICT DO NOTHING</>子句。
 </para>
 
 <!-- 
 <para>
  It is generally recommended that the columns of a foreign table be declared
  with exactly the same data types, and collations if applicable, as the
  referenced columns of the remote table.  Although <filename>postgres_fdw</>
  is currently rather forgiving about performing data type conversions at
  need, surprising semantic anomalies may arise when types or collations do
  not match, due to the remote server interpreting <literal>WHERE</> clauses
  slightly differently from the local server.
 </para>
 -->
 <para>
  我们通常推荐一个外部表的列被声明为与被引用的远程表列完全相同的数据类型和排序规则
  （如果适用）。尽管<filename>postgres_fdw</>目前已经能够容忍在需要时执行数据类型转换，
  但是由于远程服务器解释<literal>WHERE</>子句时可能会与本地服务器有所不同，
  所以当类型或排序规则不匹配时可能会发生奇怪的语义异常。
 </para>

 <!-- 
 <para>
  Note that a foreign table can be declared with fewer columns, or with a
  different column order, than its underlying remote table has.  Matching
  of columns to the remote table is by name, not position.
 </para>
 -->
 <para>
  注意一个外部表可以声明比底层的远程表较少的列，或者使用一种不同的列序。
  与远程表列的匹配是通过名字而不是位置进行的。
 </para>

 <sect2>
  <!-- 
  <title>FDW Options of postgres_fdw</title>
  -->
  <title>postgres_fdw 的 FDW 选项</title>

  <sect3>
   <!-- 
   <title>Connection Options</title>
   -->
   <title>连接选项</title>

   <para>
    <!-- 
    A foreign server using the <filename>postgres_fdw</> foreign data wrapper
    can have the same options that <application>libpq</> accepts in
    connection strings, as described in <xref linkend="libpq-paramkeywords">,
    except that these options are not allowed:
    -->
    一个使用<filename>postgres_fdw</>外部数据封装器的外部服务器可以使用和
    <application>libpq</>在连接字符串中接受的相同的选项，
    如<xref linkend="libpq-paramkeywords">所述，不过不允许这些选项：

    <itemizedlist spacing="compact">
     <listitem>
      <para>
       <!-- 
       <para>
       <literal>user</literal> and <literal>password</literal> (specify these
       in a user mapping, instead)
      </para>
      -->
       <literal>user</literal>和<literal>password</literal>（在用户映射中指定这些值）
      </para>
     </listitem>
     <listitem>
      <!-- 
      <para>
       <literal>client_encoding</> (this is automatically set from the local
       server encoding)
      </para>
      -->
      <para>
       <literal>client_encoding</>（这是从本地服务器编码自动设置的）
      </para>
     </listitem>
     <listitem>
      <!-- 
      <para>
       <literal>fallback_application_name</> (always set to
       <literal>postgres_fdw</>)
      </para>
      -->
      <para>
       <literal>fallback_application_name</>（总是设置为<literal>postgres_fdw</>）
      </para>
     </listitem>
    </itemizedlist>
   </para>

   <!-- 
   <para>
    Only superusers may connect to foreign servers without password
    authentication, so always specify the <literal>password</literal> option
    for user mappings belonging to non-superusers.
   </para>
   -->
   <para>
    只有超级用户可以在不经过口令认证的情况下连接到外部服务器，
    因此应总是为属于非超级用户的用户映射指定<literal>password</literal>选项。
   </para>
  </sect3>

  <sect3>
   <!-- 
   <title>Object Name Options</title>
   -->
   <title>对象名称选项</title>

   <!-- 
   <para>
    These options can be used to control the names used in SQL statements
    sent to the remote <productname>PostgreSQL</productname> server.  These
    options are needed when a foreign table is created with names different
    from the underlying remote table's names.
   </para>
   -->
   <para>
    这些选项可以被用来控制使用在被发送到远程<productname>PostgreSQL</productname>
    服务器的 SQL 语句中使用的名称。当一个外部表被使用不同于底层远程表的名称创建时，
    就需要这些选项。
   </para>

   <variablelist>

    <varlistentry>
     <term><literal>schema_name</literal></term>
     <listitem>
      <!-- 
      <para>
       This option, which can be specified for a foreign table, gives the
       schema name to use for the foreign table on the remote server.  If this
       option is omitted, the name of the foreign table's schema is used.
      </para>
      -->
      <para>
       这个选项给出用在远程服务器之上的外部表的模式名称，它可以为一个外部表指定。
       如果忽略该选项，则使用外部表的模式名。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>table_name</literal></term>
     <listitem>
      <!-- 
      <para>
       This option, which can be specified for a foreign table, gives the
       table name to use for the foreign table on the remote server.  If this
       option is omitted, the foreign table's name is used.
      </para>
      -->
      <para>
       这个选项给出用在远程服务器上的外部表的表名，它可以为一个外部表指定。
       如果忽略该选项，则使用外部表的名称。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>column_name</literal></term>
     <listitem>
      <!-- 
      <para>
       This option, which can be specified for a column of a foreign table,
       gives the column name to use for the column on the remote server.
       If this option is omitted, the column's name is used.
      </para>
      -->
      <para>
       这个选项给出用在远程服务器上的列的列名，它可以为一个外部表的一个列指定。
       如果忽略该选项，则使用列的名称。
      </para>
     </listitem>
    </varlistentry>

   </variablelist>

  </sect3>

  <sect3>
   <!-- 
   <title>Cost Estimation Options</title>
   -->
   <title>代价估计选项</title>

   <!-- 
   <para>
    <filename>postgres_fdw</> retrieves remote data by executing queries
    against remote servers, so ideally the estimated cost of scanning a
    foreign table should be whatever it costs to be done on the remote
    server, plus some overhead for communication.  The most reliable way to
    get such an estimate is to ask the remote server and then add something
    for overhead &mdash; but for simple queries, it may not be worth the cost
    of an additional remote query to get a cost estimate.
    So <filename>postgres_fdw</> provides the following options to control
    how cost estimation is done:
   </para>
   -->
   <para>
    <filename>postgres_fdw</>通过在远程服务器上执行查询来检索远程数据，
    因此理想的扫描一个外部表的估计代价应该是在远程服务器上完成它的花销，外加一些通信开销。
    得到这样一个估计的最可靠的方法是询问远程服务器并加上一些通信开销 &mdash; 但是对于简单查询，
    不值得为获得一个代价估计而额外使用一次远程查询。因此<filename>postgres_fdw</>
    提供了下列选项来控制如何完成代价估计：
   </para>

   <variablelist>

    <varlistentry>
     <term><literal>use_remote_estimate</literal></term>
     <listitem>
      <!-- 
      <para>
       This option, which can be specified for a foreign table or a foreign
       server, controls whether <filename>postgres_fdw</> issues remote
       <command>EXPLAIN</command> commands to obtain cost estimates.
       A setting for a foreign table overrides any setting for its server,
       but only for that table.
       The default is <literal>false</literal>.
      </para>
      -->
      <para>
       这个选项控制<filename>postgres_fdw</>是否发出远程<command>EXPLAIN</command>
       命令来获得代价估计，它可以为一个外部表或一个外部服务器指定。
       一个外部表的设置会覆盖它的服务器的任何设置，但是只用于这个表。
       默认值是<literal>false</literal>。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>fdw_startup_cost</literal></term>
     <listitem>
      <!-- 
      <para>
       This option, which can be specified for a foreign server, is a numeric
       value that is added to the estimated startup cost of any foreign-table
       scan on that server.  This represents the additional overhead of
       establishing a connection, parsing and planning the query on the
       remote side, etc.
       The default value is <literal>100</literal>.
      </para>
      -->
      <para>
       这个选项是添加到那个服务器上任何外部表扫描的估计启动代价的数字值，
       可以为一个外部服务器指定。
       这表示建立一个连接、在远端解析和规划查询的额外负荷等。默认值是<literal>100</literal>。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>fdw_tuple_cost</literal></term>
     <listitem>
      <!-- 
      <para>
       This option, which can be specified for a foreign server, is a numeric
       value that is used as extra cost per-tuple for foreign-table
       scans on that server.  This represents the additional overhead of
       data transfer between servers.  You might increase or decrease this
       number to reflect higher or lower network delay to the remote server.
       The default value is <literal>0.01</literal>.
      </para>
      -->
      <para>
       这个选项是被用作那个服务器上外部表扫描的每元组额外代价，它可以为一个外部服务器指定。
       这表示在服务器之间数据传输的额外负荷。
       你可以增加或减少这个数来反映到远程服务器更高或更低的网络延迟。默认值是<literal>0.01</literal>。
      </para>
     </listitem>
    </varlistentry>

   </variablelist>

   <!-- 
   <para>
    When <literal>use_remote_estimate</literal> is true,
    <filename>postgres_fdw</> obtains row count and cost estimates from the
    remote server and then adds <literal>fdw_startup_cost</literal> and
    <literal>fdw_tuple_cost</literal> to the cost estimates.  When
    <literal>use_remote_estimate</literal> is false,
    <filename>postgres_fdw</> performs local row count and cost estimation
    and then adds <literal>fdw_startup_cost</literal> and
    <literal>fdw_tuple_cost</literal> to the cost estimates.  This local
    estimation is unlikely to be very accurate unless local copies of the
    remote table's statistics are available.  Running
    <xref linkend="sql-analyze"> on the foreign table is the way to update
    the local statistics; this will perform a scan of the remote table and
    then calculate and store statistics just as though the table were local.
    Keeping local statistics can be a useful way to reduce per-query planning
    overhead for a remote table &mdash; but if the remote table is
    frequently updated, the local statistics will soon be obsolete.
   </para>
   -->
   <para>
    当<literal>use_remote_estimate</literal>为真时，<filename>postgres_fdw</>
    从远程服务器获得行计数和代价估计，然后在代价估计上加上<literal>fdw_startup_cost</literal>
    和<literal>fdw_tuple_cost</literal>。当<literal>use_remote_estimate</literal>为假时，
    <filename>postgres_fdw</>执行本地行计数和代价估计，然后在代价估计上加上
    <literal>fdw_startup_cost</literal>和<literal>fdw_tuple_cost</literal>。
    这种本地估计不会很准确，除非有远程表统计数据的本地拷贝可用。在外部表上运行
    <xref linkend="sql-analyze">是更新本地统计数据的方法，
    这将执行远程表的一次扫描并接着计算和存储统计数据，就好像表在本地一样。
    保留本地统计数据可能是减少远程表的每查询规划开销的有用方法 &mdash; 
    但是如果远程表被频繁的更新，本地统计数据将很快就被废弃。
   </para>

  </sect3>

  <sect3>
   <!-- 
   <title>Updatability Options</title>
   -->
   <title>可更新性选项</title>

   <!-- 
   <para>
    By default all foreign tables using <filename>postgres_fdw</> are assumed
    to be updatable.  This may be overridden using the following option:
   </para>
   -->
   <para>
    默认情况下，所有使用<filename>postgres_fdw</>的外部表都被假定是可更新的。
    这可以使用下列选项覆盖：
   </para>

   <variablelist>

    <varlistentry>
     <term><literal>updatable</literal></term>
     <listitem>
      <!-- 
      <para>
       This option controls whether <filename>postgres_fdw</> allows foreign
       tables to be modified using <command>INSERT</>, <command>UPDATE</> and
       <command>DELETE</> commands.  It can be specified for a foreign table
       or a foreign server.  A table-level option overrides a server-level
       option.
       The default is <literal>true</>.
      </para>
      -->
      <para>
       这个选项控制<filename>postgres_fdw</>是否允许使用<command>INSERT</>、
       <command>UPDATE</>和<command>DELETE</>命令修改外部表。
       它可以为一个外部表或一个外部服务器指定。表级别的选项会覆盖服务器级别的选项。
       默认值是<literal>true</>。
      </para>

      <!-- 
      <para>
       Of course, if the remote table is not in fact updatable, an error
       would occur anyway.  Use of this option primarily allows the error to
       be thrown locally without querying the remote server.  Note however
       that the <literal>information_schema</> views will report a
       <filename>postgres_fdw</> foreign table to be updatable (or not)
       according to the setting of this option, without any check of the
       remote server.
      </para>
      -->
      <para>
       当然，如果远程表实际上不是可更新的，将产生一个错误。
       这个选项的使用主要是允许在不查询远程服务器的情况下在本地抛出错误。
       但是要注意<literal>information_schema</>视图会根据这个选项的设置报告一个
       <filename>postgres_fdw</>外部表是可更新的（或者不可更新），
       而不需要远程服务器的任何检查。
      </para>
     </listitem>
    </varlistentry>

   </variablelist>
  </sect3>

  <sect3>
   <!-- 
   <title>Importing Options</title>
   -->
   <title>导入选项</title>

   <!-- 
   <para>
    <filename>postgres_fdw</> is able to import foreign table definitions
    using <xref linkend="sql-importforeignschema">.  This command creates
    foreign table definitions on the local server that match tables or
    views present on the remote server.  If the remote tables to be imported
    have columns of user-defined data types, the local server must have
    compatible types of the same names.
   </para>
   -->
   <para>
    <filename>postgres_fdw</>可以使用<xref linkend ="sql-importforeignschema">导入外部表定义。
    此命令在本地服务器上创建匹配远程服务器上存在的表或视图的外部表定义。
    如果要导入的远程表有用户定义数据类型的列，则本地服务器必须具有相同名称的兼容类型。
   </para>

   <!-- 
   <para>
    Importing behavior can be customized with the following options
    (given in the <command>IMPORT FOREIGN SCHEMA</> command):
   </para>
   -->
   <para>
    可以使用以下选项自定义导入行为
    (在<command>IMPORT FOREIGN SCHEMA</>命令中给出):
   </para>

   <variablelist>
    <varlistentry>
     <term><literal>import_collate</literal></term>
     <listitem>
      <!-- 
      <para>
       This option controls whether column <literal>COLLATE</> options
       are included in the definitions of foreign tables imported
       from a foreign server. The default is <literal>true</>.  You might
       need to turn this off if the remote server has a different set of
       collation names than the local server does, which is likely to be the
       case if it's running on a different operating system.
      </para>
      -->
      <para>
       此选项控制列<literal>COLLATE</>选项是否包含在从外部服务器导入的外表的定义中。
       默认值为<literal>true</>。如果远程服务器具有不同于本地服务器的排序规则名称，
       则可能需要将其关闭，这可能是在不同操作系统上运行的情况。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>import_default</literal></term>
     <listitem>
      <!-- 
      <para>
       This option controls whether column <literal>DEFAULT</> expressions
       are included in the definitions of foreign tables imported
       from a foreign server. The default is <literal>false</>.  If you
       enable this option, be wary of defaults that might get computed
       differently on the local server than they would be on the remote
       server; <function>nextval()</> is a common source of problems.
       The <command>IMPORT</> will fail altogether if an imported default
       expression uses a function or operator that does not exist locally.
      </para>
      -->
      <para>
       此选项控制列<literal>DEFAULT</>表达式是否包含在从外部服务器导入的外表的定义中。
       默认值为<literal>false</>。如果启用此选项，
       请注意在本地服务器上和在远程服务器上计算的默认值可能不同；<function>nextval()</>
       是常见的问题来源。如果导入的默认表达式使用本地不存在的函数或运算符，
       则<command>IMPORT</>将完全失败。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>import_not_null</literal></term>
     <listitem>
      <!-- 
      <para>
       This option controls whether column <literal>NOT NULL</>
       constraints are included in the definitions of foreign tables imported
       from a foreign server. The default is <literal>true</>.
      </para>
      -->
      <para>
       此选项控制列<literal>NOT NULL</>约束是否包含在从外部服务器导入的外表的定义中。
       默认值为<literal>true</>。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>

   <!-- 
   <para>
    Note that constraints other than <literal>NOT NULL</> will never be
    imported from the remote tables.  Although <productname>PostgreSQL</>
    does support <literal>CHECK</> constraints on foreign tables, there is no
    provision for importing them automatically, because of the risk that a
    constraint expression could evaluate differently on the local and remote
    servers.  Any such inconsistency in the behavior of a <literal>CHECK</>
    constraint could lead to hard-to-detect errors in query optimization.
    So if you wish to import <literal>CHECK</> constraints, you must do so
    manually, and you should verify the semantics of each one carefully.
    For more detail about the treatment of <literal>CHECK</> constraints on
    foreign tables, see <xref linkend="sql-createforeigntable">.
   </para>
   -->
   <para>
    注意，除了<literal>NOT NULL</>之外的约束将永远不会从远程表中导入。
    虽然<productname>PostgreSQL</>确实支持外部表上的<literal>CHECK</>约束，
    但是没有自动导入这些约束的规定，因为约束表达式可能在本地和远程服务器上进行不同的计算。
    在<literal>CHECK</>约束的行为中的任何这种不一致性可能导致查询优化中难以检测的错误。
    因此，如果您希望导入<literal>CHECK</>约束，则必须手动进行，并且您应仔细验证每个约束的语义。
    有关对外部表上<literal>CHECK</>约束的处理的更多详细信息，
    请参阅<xref linkend="sql-createforeigntable">。
   </para>
  </sect3>
 </sect2>

 <sect2>
  <!-- 
  <title>Connection Management</title>
  -->
  <title>连接管理</title>

  <!-- 
  <para>
   <filename>postgres_fdw</filename> establishes a connection to a
   foreign server during the first query that uses a foreign table
   associated with the foreign server.  This connection is kept and
   re-used for subsequent queries in the same session.  However, if
   multiple user identities (user mappings) are used to access the foreign
   server, a connection is established for each user mapping.
  </para>
  -->
  <para>
   <filename>postgres_fdw</filename>在使用与外部服务器关联的外部表第一个查询期间，
   建立一个到外部服务器的连接。这个连接会被保持，并被重用于同一个会话中的后续查询。
   但是，如果使用了多个用户标识（用户映射）来访问外部服务器，则为每个用户映射建立连接。
  </para>
 </sect2>

 <sect2>
  <!-- 
  <title>Transaction Management</title>
  -->
  <title>事务管理</title>

  <!-- 
  <para>
   During a query that references any remote tables on a foreign server,
   <filename>postgres_fdw</filename> opens a transaction on the
   remote server if one is not already open corresponding to the current
   local transaction.  The remote transaction is committed or aborted when
   the local transaction commits or aborts.  Savepoints are similarly
   managed by creating corresponding remote savepoints.
  </para>
  -->
  <para>
   在一个引用外部服务器上任何远程表的查询期间，如果还没有打开对应于当前本地事务的远程事务，
   则<filename>postgres_fdw</filename>在远程服务器上打开事务。当本地事务提交或中止时，
   远程事务也被提交或中止。保存点也相似地通过创建相应的远程保存点来管理。
  </para>

  <!-- 
  <para>
   The remote transaction uses <literal>SERIALIZABLE</>
   isolation level when the local transaction has <literal>SERIALIZABLE</>
   isolation level; otherwise it uses <literal>REPEATABLE READ</>
   isolation level.  This choice ensures that if a query performs multiple
   table scans on the remote server, it will get snapshot-consistent results
   for all the scans.  A consequence is that successive queries within a
   single transaction will see the same data from the remote server, even if
   concurrent updates are occurring on the remote server due to other
   activities.  That behavior would be expected anyway if the local
   transaction uses <literal>SERIALIZABLE</> or <literal>REPEATABLE READ</>
   isolation level, but it might be surprising for a <literal>READ
   COMMITTED</> local transaction.  A future
   <productname>PostgreSQL</productname> release might modify these rules.
  </para>
  -->
  <para>
   当本地事务为<literal>SERIALIZABLE</>隔离级别时，远程事务使用<literal>SERIALIZABLE</>
   隔离级别；否则它使用<literal>REPEATABLE READ</>隔离级别。
   如果一个查询在远程服务器上执行多表查询，这种选择保证它将为所有扫描得到快照一致的结果。
   结果是在单个事务中的连续查询将会看到来自远程服务器的相同数据，
   即便由于其他活动在远程服务器上发生了其他并发更新。如果本地事务使用
   <literal>SERIALIZABLE</>或<literal>REPEATABLE READ</>隔离级别，这种行为也是可以预期的，
   但是对于一个<literal>READ COMMITTED</>本地事务它是奇怪的。
   未来的<productname>PostgreSQL</productname>发布可能会修改这些规则。
  </para>
 </sect2>

 <sect2>
  <!-- 
  <title>Remote Query Optimization</title>
  -->
  <title>远程查询优化</title>

  <!-- 
  <para>
   <filename>postgres_fdw</> attempts to optimize remote queries to reduce
   the amount of data transferred from foreign servers.  This is done by
   sending query <literal>WHERE</> clauses to the remote server for
   execution, and by not retrieving table columns that are not needed for
   the current query.  To reduce the risk of misexecution of queries,
   <literal>WHERE</> clauses are not sent to the remote server unless they use
   only built-in data types, operators, and functions.  Operators and
   functions in the clauses must be <literal>IMMUTABLE</> as well.
  </para>
  -->
  <para>
   <filename>postgres_fdw</>尝试优化远程查询来减少从外部服务器传来的数据量。
   这可以通过将查询<literal>WHERE</>子句发送到远程服务器执行，
   并且不检索当前查询不需要的表列来完成的。为了减少查询被错误执行的风险，
   除非它们仅使用内置的数据类型、操作符和函数，否则<literal>WHERE</>子句不会发送到远程服务器。
   子句中的操作符和函数也必须是<literal>IMMUTABLE</>。
  </para>

  <!-- 
  <para>
   The query that is actually sent to the remote server for execution can
   be examined using <command>EXPLAIN VERBOSE</>.
  </para>
  -->
  <para>
   实际被发送到远程服务器执行的查询可以使用<command>EXPLAIN VERBOSE</>来检查。
  </para>
 </sect2>

 <sect2>
  <!-- 
  <title>Remote Query Execution Environment</title>
  -->
  <title>远程查询执行环境</title>

  <!-- 
  <para>
   In the remote sessions opened by <filename>postgres_fdw</>,
   the <xref linkend="guc-search-path"> parameter is set to
   just <literal>pg_catalog</>, so that only built-in objects are visible
   without schema qualification.  This is not an issue for queries
   generated by <filename>postgres_fdw</> itself, because it always
   supplies such qualification.  However, this can pose a hazard for
   functions that are executed on the remote server via triggers or rules
   on remote tables.  For example, if a remote table is actually a view,
   any functions used in that view will be executed with the restricted
   search path.  It is recommended to schema-qualify all names in such
   functions, or else attach <literal>SET search_path</> options
   (see <xref linkend="sql-createfunction">) to such functions
   to establish their expected search path environment.
  </para>
  -->
  <para>
   在<filename>postgres_fdw</>打开的远程会话中，<xref linkend="guc-search-path">
   参数设置为<literal>pg_catalog</>，因此只有内置对象在没有模式限定的情况下可见。
   对于由<filename>postgres_fdw</>本身生成的查询，这不是一个问题，因为它总是提供这样的限定。
   但是，这可能对通过远程表上的触发器或规则在远程服务器上执行的函数造成危险。
   例如，如果远程表实际上是一个视图，则该视图中使用的任何函数都将使用受限制的搜索路径执行。
   建议在此类函数中对所有名称进行模式限定，或者在这些函数中附加<literal>SET search_path</>选项
   （参见<xref linkend="sql-createfunction">）以建立其期望的搜索路径环境。
  </para>

  <!-- 
  <para>
   <filename>postgres_fdw</> likewise establishes remote session settings
   for the parameters <xref linkend="guc-timezone">,
   <xref linkend="guc-datestyle">, <xref linkend="guc-intervalstyle">,
   and <xref linkend="guc-extra-float-digits">.  These are less likely
   to be problematic than <varname>search_path</>, but can be handled
   with function <literal>SET</> options if the need arises.
  </para>
  -->
  <para>
   <filename>postgres_fdw</>同样为参数<xref linkend="guc-timezone">、
   <xref linkend="guc-datestyle">、<xref linkend="guc-intervalstyle">和
   <xref linkend="guc-extra-float-digits">建议远程会话设置。
   这些不太可能比<varname>search_path</>更有问题，但是如果需要，
   可以用函数<literal>SET</>选项处理。
  </para>

  <!-- 
  <para>
   It is <emphasis>not</> recommended that you override this behavior by
   changing the session-level settings of these parameters; that is likely
   to cause <filename>postgres_fdw</> to malfunction.
  </para>
  -->
  <para>
   <emphasis>不</>建议您通过更改这些参数的会话级设置来覆盖此行为；
   这可能会导致<filename>postgres_fdw</>发生故障。
  </para>
 </sect2>

 <sect2>
  <!-- 
  <title>Cross-Version Compatibility</title>
  -->
  <title>跨版本兼容性</title>

  <!-- 
  <para>
   <filename>postgres_fdw</> can be used with remote servers dating back
   to <productname>PostgreSQL</> 8.3.  Read-only capability is available
   back to 8.1.  A limitation however is that <filename>postgres_fdw</>
   generally assumes that immutable built-in functions and operators are
   safe to send to the remote server for execution, if they appear in a
   <literal>WHERE</> clause for a foreign table.  Thus, a built-in
   function that was added since the remote server's release might be sent
   to it for execution, resulting in <quote>function does not exist</> or
   a similar error.  This type of failure can be worked around by
   rewriting the query, for example by embedding the foreign table
   reference in a sub-<literal>SELECT</> with <literal>OFFSET 0</> as an
   optimization fence, and placing the problematic function or operator
   outside the sub-<literal>SELECT</>.
  </para>
  -->
  <para>
   <filename>postgres_fdw</>能够与最老是<productname>PostgreSQL</> 8.3 的远程服务器一起使用。
   只读能力则最低可以在 8.1 中使用。但是一个限制是如果不变的内建函数和操作符出现在一个外部表的
   <literal>WHERE</>子句中，<filename>postgres_fdw</>通常假定将它们发送到远程服务器执行是安全的。
   因此，远程服务器的发布之后添加的内置函数可能被发送给它执行，导致
   <quote>function does not exist</>或一个类似的错误。这类错误可以通过重写查询来解决，
   例如在具有<literal>OFFSET 0</>作为优化墙的子<literal>SELECT</>
   中嵌入外部表引用，并将有问题的函数或操作符放在子<literal>SELECT</>的外面。。
  </para>
 </sect2>

 <sect2>
  <!--
  <title>Examples</title>
  -->
  <title>例子</title>

  <!-- 
  <para>
   Here is an example of creating a foreign table with
   <literal>postgres_fdw</>. First install the extension:
  </para>
  -->
  <para>
   这里是一个用<literal>postgres_fdw</>创建外部表的例子。首先安装该扩展：
  </para>

<programlisting>
CREATE EXTENSION postgres_fdw;
</programlisting>

  <para>
   <!-- 
   Then create a foreign server using <xref linkend="sql-createserver">.
   In this example we wish to connect to a <productname>PostgreSQL</> server
   on host <literal>192.83.123.89</literal> listening on
   port <literal>5432</literal>.  The database to which the connection is made
   is named <literal>foreign_db</literal> on the remote server:
   -->
   然后使用<xref linkend="sql-createserver">创建一个外部服务器。在这个例子中
   我们希望连接到一个位于主机<literal>192.83.123.89</literal>上
   并且监听<literal>5432</literal>端口的<productname>PostgreSQL</>服务器。
   在该远程服务器上要连接的数据库名为<literal>foreign_db</literal>：

<programlisting>
CREATE SERVER foreign_server
        FOREIGN DATA WRAPPER postgres_fdw
        OPTIONS (host '192.83.123.89', port '5432', dbname 'foreign_db');
</programlisting>
  </para>

  <para>
   <!-- 
   A user mapping, defined with <xref linkend="sql-createusermapping">, is
   needed as well to identify the role that will be used on the remote
   server:
   -->
   也需要一个用<xref linkend="sql-createusermapping">
   定义的用户映射来标识将在远程服务器上使用的角色：

<programlisting>
CREATE USER MAPPING FOR local_user
        SERVER foreign_server
        OPTIONS (user 'foreign_user', password 'password');
</programlisting>
  </para>

  <para>
   <!-- 
   Now it is possible to create a foreign table with
   <xref linkend="sql-createforeigntable">.  In this example we
   wish to access the table named <structname>some_schema.some_table</>
   on the remote server.  The local name for it will
   be <structname>foreign_table</>:
   -->
   现在就可以使用<xref linkend="sql-createforeigntable">创建外部表了。
   在这个例子中我们希望访问远程服务器上名为
   <structname>some_schema.some_table</>的表。它的本地名称是
   <structname>foreign_table</>：

<programlisting>
CREATE FOREIGN TABLE foreign_table (
        id integer NOT NULL,
        data text
)
        SERVER foreign_server
        OPTIONS (schema_name 'some_schema', table_name 'some_table');
</programlisting>

   <!-- 
   It's essential that the data types and other properties of the columns
   declared in <command>CREATE FOREIGN TABLE</> match the actual remote table.
   Column names must match as well, unless you attach <literal>column_name</>
   options to the individual columns to show how they are named in the remote
   table.
   In many cases, use of <xref linkend="sql-importforeignschema"> is
   preferable to constructing foreign table definitions manually.
   -->
   在<command>CREATE FOREIGN TABLE</>中声明的列数据类型和其他属性必须与实际的远程表匹配。
   列名也必须匹配，除非你将<literal>column_name</>选项附加到各个列以显示它们在远程表中的命名。
   在许多情况下，使用<xref linkend="sql-importforeignschema">优于手动构建外部表定义。
  </para>
 </sect2>
 
 <sect2>
  <!-- 
  <title>Author</title>
  -->
  <title>作者</title>
  <para>
   Shigeru Hanada <email>shigeru.hanada@gmail.com</email>
  </para>
 </sect2>

</sect1>
