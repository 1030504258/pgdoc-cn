<!-- doc/src/sgml/tablesample-method.sgml -->

<chapter id="tablesample-method">
 <!-- 
 <title>Writing A Table Sampling Method</title>
 -->
 <title>编写表采样方法</title>

 <indexterm zone="tablesample-method">
  <!-- 
  <primary>table sampling method</primary>
  -->
  <primary>表采样方法</primary>
 </indexterm>

 <indexterm zone="tablesample-method">
  <!-- 
  <primary><literal>TABLESAMPLE</literal> method</primary>
  -->
  <primary><literal>TABLESAMPLE</literal> 方法</primary>
 </indexterm>

 <!-- 
 <para>
  <productname>PostgreSQL</>'s implementation of the <literal>TABLESAMPLE</>
  clause supports custom table sampling methods, in addition to
  the <literal>BERNOULLI</> and <literal>SYSTEM</> methods that are required
  by the SQL standard.  The sampling method determines which rows of the
  table will be selected when the <literal>TABLESAMPLE</> clause is used.
 </para>
 -->
 <para>
  除了SQL标准所需的<literal>BERNOULLI</>和<literal>SYSTEM</>方法之外，
  <productname>PostgreSQL</>的<literal>TABLESAMPLE</>子句的实现还支持自定义表抽样方法。
  当使用<literal>TABLESAMPLE</>子句时，抽样方法确定将选择表的哪些行。
 </para>

 <para>
  <!-- 
  At the SQL level, a table sampling method is represented by a single SQL
  function, typically implemented in C, having the signature
  -->
  在SQL级别，表抽样方法由具有签名的单个SQL函数（通常以C实现）表示
<programlisting>
method_name(internal) RETURNS tsm_handler
</programlisting>
  <!-- 
  The name of the function is the same method name appearing in the
  <literal>TABLESAMPLE</> clause.  The <type>internal</> argument is a dummy
  (always having value zero) that simply serves to prevent this function from
  being called directly from a SQL command.
  The result of the function must be a palloc'd struct of
  type <type>TsmRoutine</>, which contains pointers to support functions for
  the sampling method.  These support functions are plain C functions and
  are not visible or callable at the SQL level.  The support functions are
  described in <xref linkend="tablesample-support-functions">.
  -->
  函数的名称与出现在<literal>TABLESAMPLE</>子句中的方法名称相同。
  <type>internal</>参数是虚拟的（总是零），它仅仅用于防止从SQL命令直接调用此函数。
  函数的结果必须是类型为<type>TsmRoutine</>的palloc'd结构，
  它包含抽样方法的支持函数的指针。这些支持函数是纯C函数，
  在SQL级别不可见或可调用。支持函数在<xref linkend="tablesample-support-functions">中描述。
 </para>

 <!-- 
 <para>
  In addition to function pointers, the <type>TsmRoutine</> struct must
  provide these additional fields:
 </para>
 -->
 <para>
  除了函数指针，<type>TsmRoutine</>结构必须提供这些附加字段：
 </para>

 <variablelist>
  <varlistentry>
   <term><literal>List *parameterTypes</literal></term>
   <listitem>
    <!-- 
    <para>
     This is an OID list containing the data type OIDs of the parameter(s)
     that will be accepted by the <literal>TABLESAMPLE</> clause when this
     sampling method is used.  For example, for the built-in methods, this
     list contains a single item with value <literal>FLOAT4OID</>, which
     represents the sampling percentage.  Custom sampling methods can have
     more or different parameters.
    </para>
    -->
    <para>
     这是一个OID列表，包含使用此抽样方法时将由<literal>TABLESAMPLE</>
     子句接受的参数的数据类型OID。例如，对于内置方法，
     此列表包含值为<literal>FLOAT4OID</>的单个项目，表示采样百分比。
     自定义抽样方法可以有更多或不同的参数。
    </para>
   </listitem>
  </varlistentry>

  <varlistentry>
   <term><literal>bool repeatable_across_queries</literal></term>
   <listitem>
    <!-- 
    <para>
     If <literal>true</>, the sampling method can deliver identical samples
     across successive queries, if the same parameters
     and <literal>REPEATABLE</> seed value are supplied each time and the
     table contents have not changed.  When this is <literal>false</>,
     the <literal>REPEATABLE</> clause is not accepted for use with the
     sampling method.
    </para>
    -->
    <para>
     如果为<literal>true</>，如果每次提供相同的参数和<literal>REPEATABLE</>
     种子值，并且表内容没有更改，则抽样方法可以在连续的查询之间传递相同的样本。
     当此值为<literal>false</>时，不接受<literal>REPEATABLE</>子句与抽样方法一起使用。
    </para>
   </listitem>
  </varlistentry>

  <varlistentry>
   <term><literal>bool repeatable_across_scans</literal></term>
   <listitem>
    <!-- 
    <para>
     If <literal>true</>, the sampling method can deliver identical samples
     across successive scans in the same query (assuming unchanging
     parameters, seed value, and snapshot).
     When this is <literal>false</>, the planner will not select plans that
     would require scanning the sampled table more than once, since that
     might result in inconsistent query output.
    </para>
    -->
    <para>
     如果为<literal>true</>，则抽样方法可以在同一查询中的连续扫描
     （假设不变参数，种子值和快照）中提供相同的样本。当为<literal>false</>时，
     计划程序不会选择需要多次扫描采样表的计划，因为这可能会导致不一致的查询输出。
    </para>
   </listitem>
  </varlistentry>
 </variablelist>

 <!-- 
 <para>
  The <type>TsmRoutine</> struct type is declared
  in <filename>src/include/access/tsmapi.h</>, which see for additional
  details.
 </para>
 -->
 <para>
  <type>TsmRoutine</>结构类型在<filename>src/include/access/tsmapi.h</>
  中声明，还可以查看他详细信息。
 </para>

 <!-- 
 <para>
  The table sampling methods included in the standard distribution are good
  references when trying to write your own.  Look into
  the <filename>src/backend/access/tablesample</> subdirectory of the source
  tree for the built-in sampling methods, and into the <filename>contrib</>
  subdirectory for add-on methods.
 </para>
 -->
 <para>
  标准分布中包含的表抽样方法是尝试编写自己的方法时很好的参考。
  在源代码树的<filename>src/backend/access/tablesample</>子目录中查看内置抽样方法，
  以及<filename>contrib</>子目录中查看附加方法。
 </para>

 <sect1 id="tablesample-support-functions">
  <!-- 
  <title>Sampling Method Support Functions</title>
  -->
  <title>采样方法支持功能</title>

  <!-- 
  <para>
   The TSM handler function returns a palloc'd <type>TsmRoutine</> struct
   containing pointers to the support functions described below.  Most of
   the functions are required, but some are optional, and those pointers can
   be NULL.
  </para>
  -->
  <para>
   TSM处理函数返回包含指向下面描述的支持函数的指针的palloc'd <type>TsmRoutine</>结构。
   大多数函数是必需的，但有些是可选的，这些指针可以为NULL。
  </para>

  <para>
<programlisting>
void
SampleScanGetSampleSize (PlannerInfo *root,
                         RelOptInfo *baserel,
                         List *paramexprs,
                         BlockNumber *pages,
                         double *tuples);
</programlisting>

   <!-- 
   This function is called during planning.  It must estimate the number of
   relation pages that will be read during a sample scan, and the number of
   tuples that will be selected by the scan.  (For example, these might be
   determined by estimating the sampling fraction, and then multiplying
   the <literal>baserel-&gt;pages</> and <literal>baserel-&gt;tuples</>
   numbers by that, being sure to round the results to integral values.)
   The <literal>paramexprs</> list holds the expression(s) that are
   parameters to the <literal>TABLESAMPLE</> clause.  It is recommended to
   use <function>estimate_expression_value()</> to try to reduce these
   expressions to constants, if their values are needed for estimation
   purposes; but the function must provide size estimates even if they cannot
   be reduced, and it should not fail even if the values appear invalid
   (remember that they're only estimates of what the run-time values will be).
   The <literal>pages</> and <literal>tuples</> parameters are outputs.
   -->
   在计划期间调用此函数。它必须估计在样本扫描期间将要读取的关系页的数量，
   以及将由扫描选择的元组的数量。（例如，这些可以通过估计采样分数，
   然后乘以<literal>baserel-&gt;pages</>和<literal>baserel-&gt;tuples</>
   数字来确定，确保将结果舍入为整数值。）<literal>paramexprs</>列表包含表达式，
   它们是<literal>TABLESAMPLE</>子句的参数。建议使用<function>estimate_expression_value()</>
   尝试将这些表达式减少为常量，如果它们的值需要用于估计目的；
   但是函数必须提供大小估计，即使它们不能被减少，并且它不应该失败，即使值看起来无效
   （记住它们只是运行时值的估计）。<literal>pages</>和<literal>tuples</>参数是输出。
  </para>

  <para>
<programlisting>
void
InitSampleScan (SampleScanState *node,
                int eflags);
</programlisting>

   <!-- 
   Initialize for execution of a SampleScan plan node.
   This is called during executor startup.
   It should perform any initialization needed before processing can start.
   The <structname>SampleScanState</> node has already been created, but
   its <structfield>tsm_state</> field is NULL.
   The <function>InitSampleScan</> function can palloc whatever internal
   state data is needed by the sampling method, and store a pointer to
   it in <literal>node-&gt;tsm_state</>.
   Information about the table to scan is accessible through other fields
   of the <structname>SampleScanState</> node (but note that the
   <literal>node-&gt;ss.ss_currentScanDesc</> scan descriptor is not set
   up yet).
   <literal>eflags</> contains flag bits describing the executor's
   operating mode for this plan node.
   -->
   初始化以执行SampleScan计划节点。这在执行程序启动期间被调用。
   它应该在处理可以开始之前执行任何所需的初始化。
   <structname>SampleScanState</>节点已创建，但其<structfield>tsm_state</>字段为NULL。
   <function>InitSampleScan</>函数可以palloc采样方法所需的任何内部状态数据，
   并在<literal>node-&gt;tsm_state</>中存储指向它的指针。
   有关要扫描的表的信息可以通过<structname>SampleScanState</>节点的其他字段访问
   （但请注意，<literal>node-&gt;ss.ss_currentScanDesc</>扫描描述符尚未设置）。
   <literal>eflags</>包含描述此计划节点的执行程序操作模式的标志位。
  </para>

  <!-- 
  <para>
   When <literal>(eflags &amp; EXEC_FLAG_EXPLAIN_ONLY)</> is true,
   the scan will not actually be performed, so this function should only do
   the minimum required to make the node state valid for <command>EXPLAIN</>
   and <function>EndSampleScan</>.
  </para>
  -->
  <para>
   当<literal>(eflags &amp; EXEC_FLAG_EXPLAIN_ONLY)</>为true时，
   实际上不会执行扫描，因此此函数应该只做使<command>EXPLAIN</>
   和<function>EndSampleScan</>的节点状态有效所需的最小值。
  </para>

  <!-- 
  <para>
   This function can be omitted (set the pointer to NULL), in which case
   <function>BeginSampleScan</> must perform all initialization needed
   by the sampling method.
  </para>
  -->
  <para>
   可以省略此函数（将指针设置为NULL），在这种情况下，
   <function>BeginSampleScan</>必须执行抽样方法所需的所有初始化。
  </para>

  <para>
<programlisting>
void
BeginSampleScan (SampleScanState *node,
                 Datum *params,
                 int nparams,
                 uint32 seed);
</programlisting>

   <!-- 
   Begin execution of a sampling scan.
   This is called just before the first attempt to fetch a tuple, and
   may be called again if the scan needs to be restarted.
   Information about the table to scan is accessible through fields
   of the <structname>SampleScanState</> node (but note that the
   <literal>node-&gt;ss.ss_currentScanDesc</> scan descriptor is not set
   up yet).
   The <literal>params</> array, of length <literal>nparams</>, contains the
   values of the parameters supplied in the <literal>TABLESAMPLE</> clause.
   These will have the number and types specified in the sampling
   method's <literal>parameterTypes</literal> list, and have been checked
   to not be null.
   <literal>seed</> contains a seed to use for any random numbers generated
   within the sampling method; it is either a hash derived from the
   <literal>REPEATABLE</> value if one was given, or the result
   of <literal>random()</> if not.
   -->
   开始执行采样扫描。这在第一次尝试获取元组之前被调用，并且如果需要重新启动扫描，
   则可以再次调用。有关要扫描的表的信息可通过<structname>SampleScanState</>
   节点的字段访问（但请注意，<literal>node-&gt;ss.ss_currentScanDesc</>扫描描述符尚未设置）。
   <literal>params</>数组的长度为<literal>nparams</>，包含<literal>TABLESAMPLE</>
   子句中提供的参数的值。这些将具有采样方法的<literal>parameterTypes</literal>
   列表中指定的数字和类型，并且已被选中不为null。<literal>seed</>
   包含用于在采样方法内生成的任何随机数的种子；它是从<literal>REPEATABLE</>
   值派生的散列（如果给出了一个），或者是<literal>random()</>的结果，如果没有。
  </para>

  <!-- 
  <para>
   This function may adjust the fields <literal>node-&gt;use_bulkread</>
   and <literal>node-&gt;use_pagemode</>.
   If <literal>node-&gt;use_bulkread</> is <literal>true</>, which it is by
   default, the scan will use a buffer access strategy that encourages
   recycling buffers after use.  It might be reasonable to set this
   to <literal>false</> if the scan will visit only a small fraction of the
   table's pages.
   If <literal>node-&gt;use_pagemode</> is <literal>true</>, which it is by
   default, the scan will perform visibility checking in a single pass for
   all tuples on each visited page.  It might be reasonable to set this
   to <literal>false</> if the scan will select only a small fraction of the
   tuples on each visited page.  That will result in fewer tuple visibility
   checks being performed, though each one will be more expensive because it
   will require more locking.
  </para>
  -->
  <para>
   此函数可以调整字段<literal>node-&gt;use_bulkread</>和<literal>node-&gt;use_pagemode</>。
   如果<literal>node-&gt;use_bulkread</>为<literal>true</>（这是缺省），
   扫描将使用一个缓冲区访问策略，鼓励在使用后回收缓冲区。
   如果扫描只访问表的一小部分页面，那么将其设置为<literal>false</>可能是合理的。
   如果<literal>node-&gt;use_pagemode</>为<literal>true</>（这是缺省），
   则扫描将对每个访问页面上的所有元组单次执行可见性检查。
   如果扫描只在每个访问页面上选择元组的一小部分，
   则将此值设置为<literal>false</>可能是合理的。
   这将导致执行更少的元组可见性检查，虽然每个将更昂贵，因为它将需要更多的锁定。
  </para>

  <!-- 
  <para>
   If the sampling method is
   marked <literal>repeatable_across_scans</literal>, it must be able to
   select the same set of tuples during a rescan as it did originally, that is
   a fresh call of <function>BeginSampleScan</> must lead to selecting the
   same tuples as before (if the <literal>TABLESAMPLE</> parameters
   and seed don't change).
  </para>
  -->
  <para>
   如果采样方法标记为<literal>repeatable_across_scans</literal>，
   它必须能够在重新扫描期间选择与原来相同的元组集合，
   即对<function>BeginSampleScan</>的新调用必须导致选择与以前相同的元组
   （如果<literal>TABLESAMPLE</>参数和种子没有改变）。
  </para>

  <para>
<programlisting>
BlockNumber
NextSampleBlock (SampleScanState *node);
</programlisting>

   <!-- 
   Returns the block number of the next page to be scanned, or
   <literal>InvalidBlockNumber</> if no pages remain to be scanned.
   -->
   返回要扫描的下一页的块编号，如果没有剩余要扫描的页，
   则返回<literal>InvalidBlockNumber</>。
  </para>

  <!-- 
  <para>
   This function can be omitted (set the pointer to NULL), in which case
   the core code will perform a sequential scan of the entire relation.
   Such a scan can use synchronized scanning, so that the sampling method
   cannot assume that the relation pages are visited in the same order on
   each scan.
  </para>
  -->
  <para>
   此函数可以省略（将指针设置为NULL），在这种情况下，
   核心代码将执行整个关系的顺序扫描。这样的扫描可以使用同步扫描，
   使得采样方法不能假定在每次扫描时以相同的顺序访问关系页面。
  </para>

  <para>
<programlisting>
OffsetNumber
NextSampleTuple (SampleScanState *node,
                 BlockNumber blockno,
                 OffsetNumber maxoffset);
</programlisting>

   <!-- 
   Returns the offset number of the next tuple to be sampled on the
   specified page, or <literal>InvalidOffsetNumber</> if no tuples remain to
   be sampled.  <literal>maxoffset</> is the largest offset number in use
   on the page.
   -->
   返回指定页面上要采样的下一个元组的偏移号，如果没有元组仍然要采样，
   则返回<literal>InvalidOffsetNumber</>。<literal>maxoffset</>是页面上使用的最大偏移量。
  </para>

  <note>
   <!-- 
   <para>
    <function>NextSampleTuple</> is not explicitly told which of the offset
    numbers in the range <literal>1 .. maxoffset</> actually contain valid
    tuples.  This is not normally a problem since the core code ignores
    requests to sample missing or invisible tuples; that should not result in
    any bias in the sample.  However, if necessary, the function can
    examine <literal>node-&gt;ss.ss_currentScanDesc-&gt;rs_vistuples[]</>
    to identify which tuples are valid and visible.  (This
    requires <literal>node-&gt;use_pagemode</> to be <literal>true</>.)
   </para>
   -->
   <para>
    <function>NextSampleTuple</>没有明确告诉哪个偏移号在<literal>1 .. maxoffset</>
    的范围内实际包含有效的元组。这通常不是问题，
    因为核心代码忽略了采样缺失或不可见元组的请求；这不应导致样品中的任何偏差。
    但是，如果需要，函数可以检查<literal>node-&gt;ss.ss_currentScanDesc-&gt;rs_vistuples[]</>
    以标识哪些元组是有效的和可见的。（这需要<literal>node-&gt;use_pagemode</>
    为<literal>true</>。）
   </para>
  </note>

  <note>
   <!-- 
   <para>
    <function>NextSampleTuple</> must <emphasis>not</> assume
    that <literal>blockno</> is the same page number returned by the most
    recent <function>NextSampleBlock</> call.  It was returned by some
    previous <function>NextSampleBlock</> call, but the core code is allowed
    to call <function>NextSampleBlock</> in advance of actually scanning
    pages, so as to support prefetching.  It is OK to assume that once
    sampling of a given page begins, successive <function>NextSampleTuple</>
    calls all refer to the same page until <literal>InvalidOffsetNumber</> is
    returned.
   </para>
   -->
   <para>
    <function>NextSampleTuple</><emphasis>不能</>假定<literal>blockno</>
    是由最近的<function>NextSampleBlock</>调用返回的相同的页码。
    它是由一些先前的<function>NextSampleBlock</>调用返回的，
    但是核心代码允许在实际扫描页面之前调用<function>NextSampleBlock</>，
    以便支持预取。可以假定一旦给定页面的采样开始，
    连续的<function>NextSampleTuple</>调用都引用相同的页面，
    直到返回<literal>InvalidOffsetNumber</>。
   </para>
  </note>

  <para>
<programlisting>
void
EndSampleScan (SampleScanState *node);
</programlisting>

   <!-- 
   End the scan and release resources.  It is normally not important
   to release palloc'd memory, but any externally-visible resources
   should be cleaned up.
   This function can be omitted (set the pointer to NULL) in the common
   case where no such resources exist.
   -->
   结束扫描并释放资源。通常，释放palloc'd内存并不重要，
   但是任何外部可见的资源都应该清除。在没有此类资源的常见情况下，
   可以省略此函数（将指针设置为NULL）。
  </para>

 </sect1>

</chapter>
