<!-- doc/src/sgml/datetime.sgml -->

 <appendix id="datetime-appendix">
 <!--
  <title>Date/Time Support</title>
 -->
  <title>日期/时间支持</title> 

  <!-- 
<para>
   <productname>PostgreSQL</productname> uses an internal heuristic
   parser for all date/time input support. Dates and times are input as
   strings, and are broken up into distinct fields with a preliminary
   determination of what kind of information can be in the
   field. Each field is interpreted and either assigned a numeric
   value, ignored, or rejected.
   The parser contains internal lookup tables for all textual fields,
   including months, days of the week, and time zones.
  </para>
-->
<para>
  <productname>PostgreSQL</productname>使用一个内部的启发式分析器用于所有的日期/时间支持。
  日期和时间都是以字符串形式输入的，
  然后用一个初步的判断分解为在该数域里可以有什么样的信息。
  每个数域都被解释，并且要么是被赋予一个数字值，要么是忽略，
  要么是被拒绝。分析器里包含内部的查询表，用于所有文本域，
  包括月份、 星期几、时区。
</para>

  <!--
<para>
   This appendix includes information on the content of these
   lookup tables and describes the steps used by the parser to decode
   dates and times.
  </para>
-->
<para>
这份附录包含这些查询表的信息，以及描述了分析器用来对时间和日期解码的步骤。
</para>

  <sect1 id="datetime-input-rules">
  <!--
   <title>Date/Time Input Interpretation</title>
 -->
   <title>日期/时间输入解析</title>
   <!--
<para>
    The date/time type inputs are all decoded using the following procedure.
   </para>
-->
<para>
  日期/时间类型输入都是使用下列过程进行解码的。
</para>

   <procedure>
    <step>
     <!--
<para>
      Break the input string into tokens and categorize each token as
      a string, time, time zone, or number.
     </para>
-->
<para>
    把输入的字符串分解为一个个记号，然后把每个记号分成字符串、
时间、时区、数字几类：
</para>

     <substeps>
      <step>
       <!--
<para>
        If the numeric token contains a colon (<literal>:</>), this is
        a time string. Include all subsequent digits and colons.
       </para>
-->
<para>
    如果一个数字记号包含一个冒号(<literal>:</>)，
那么这是一个时间字符串。包括随后所有的数据位和冒号。
</para>
      </step>

      <step>
       <!--
<para>
        If the numeric token contains a dash (<literal>-</>), slash
        (<literal>/</>), or two or more dots (<literal>.</>), this is
        a date string which might have a text month.  If a date token has
        already been seen, it is instead interpreted as a time zone
        name (e.g., <literal>America/New_York</>).
       </para>
-->
<para>
    如果这个数字记号包含一个划线(<literal>-</>)、斜杠(<literal>/</>)、 
多个点(<literal>.</>)，
那么它就是一个日期字符串，可能有一个文本月份。
如果一个日期记号已经看过，那么将被解析为时区名(比如<literal>America/New_York</>)。
</para>
      </step>

      <step>
       <!--
<para>
        If the token is numeric only, then it is either a single field
        or an ISO 8601 concatenated date (e.g.,
        <literal>19990113</literal> for January 13, 1999) or time
        (e.g., <literal>141516</literal> for 14:15:16).
       </para>
-->
<para>
如果这个记号只是数字，那么它要么是一个单独的字段，
要么是一个ISO8601连接的日期(比如<literal>19990113</literal>是1999年1月13日)
或者是连接的时间(比如<literal>141516</literal>是14:15:16)。
</para>
      </step>

      <step>
       <!--
<para>
        If the token starts with a plus (<literal>+</>) or minus
        (<literal>-</>), then it is either a numeric time zone or a special
        field.
       </para>
-->
<para>
如果记号以一个加号(<literal>+</>)或减号(<literal>-</>)开头，
那么它要么是一个时区，要么就是一个特殊的字段。
</para>
      </step>
     </substeps>
    </step>

    <step>
     <!--
<para>
      If the token is a text string, match up with possible strings:
     </para>
-->
<para>
如果记号是一个文本字符串，那么和可能的字符串进行匹配：
</para>

     <substeps>
      <step>
       <!--
<para>
        Do a binary-search table lookup for the token as a time zone
        abbreviation.
       </para>
-->
<para>
   把这个记号当作时区缩写进行二分表查找。
</para>
      </step>

      <step>
       <!--
<para>
        If not found, do a similar binary-search table lookup to match
        the token as either a special string (e.g., <literal>today</literal>),
        day (e.g., <literal>Thursday</literal>),
        month (e.g., <literal>January</literal>),
        or noise word (e.g., <literal>at</literal>, <literal>on</literal>).
       </para>
-->
<para>
  如果没有找到，再做一次二分表查找，看看这个记号是特殊字符串 
  (比如<literal>today</literal>)、日期(比如<literal>Thursday</literal>)、 
  月份(比如<literal>January</literal>)，
  还是一个无关痛痒的字 (比如<literal>at</literal>, <literal>on</literal>)。
</para>
      </step>

      <step>
       <!--
<para>
        If still not found, throw an error.
       </para>
-->
<para>
   如果还没有找到，抛出一个错误。
</para>
      </step>
     </substeps>
    </step>

    <step>
     <!--
<para>
      When the token is a number or number field:
     </para>
-->
<para>
    如果记号是一个数字或者数字字段：
</para>

     <substeps>
      <step>
       <!--
<para>
        If there are eight or six digits,
        and if no other date fields have been previously read, then interpret
        as a <quote>concatenated date</quote> (e.g.,
        <literal>19990118</literal> or <literal>990118</literal>).
        The interpretation is <literal>YYYYMMDD</> or <literal>YYMMDD</>.
       </para>
-->
<para>
   如果有八位或者六位数字，而且前面也没有读到其它日期字段，
   那么就解释成一个<quote>concatenated date(连接的日期)</quote>
   (比如<literal>19990118</literal>或者<literal>990118</literal>)。
   这里的解析是<literal>YYYYMMDD</>或者<literal>YYMMDD</>。
</para>
      </step>

      <step>
       <!--
<para>
        If the token is three digits
        and a year has already been read, then interpret as day of year.
       </para>
-->
<para>
   如果记号是三位数字，并且已经解码了一个年份，那么解释成一年中的日。
</para>
      </step>

      <step>
       <!--
<para>
        If four or six digits and a year has already been read, then
        interpret as a time (<literal>HHMM</> or <literal>HHMMSS</>).
       </para>
-->
<para>
    如果已经读取了四位或六位数字，
并且已经读取了一个年份，
那么就解析成时间(<literal>HHMM</>或者<literal>HHMMSS</>).
</para>
      </step>

      <step>
       <!--
<para>
        If three or more digits and no date fields have yet been found,
        interpret as a year (this forces yy-mm-dd ordering of the remaining
        date fields).
       </para>
-->
<para>
  如果是三位或更多位并且还没有找到日期字段，则解析成一个年份 
  (这个解析强制剩余的日期字段的顺序为yy-mm-dd)。
</para>
      </step>

      <step>
       <!--
<para>
        Otherwise the date field ordering is assumed to follow the
        <varname>DateStyle</> setting: mm-dd-yy, dd-mm-yy, or yy-mm-dd.
        Throw an error if a month or day field is found to be out of range.
       </para>
-->
<para>
   否则，日期字段的顺序被认为是遵循<varname>DateStyle</>设置：
   mm-dd-yy,dd-mm-yy,yy-mm-dd 之一。如果发现月份或者日期字段超出范围，
   则抛出一个错误。
</para>
      </step>
     </substeps>
    </step>

    <step>
     <!--
<para>
      If BC has been specified, negate the year and add one for
      internal storage.  (There is no year zero in the Gregorian
      calendar, so numerically 1 BC becomes year zero.)
     </para>
-->
<para>
   如果声明了BC，则对年份取其负数并加一，用于内部保存。
   因为在格里高利历法里没有零年，所以数字上的1BC是公元零年。
</para>
    </step>

    <step>
     
<para>
     <!--
      If BC was not specified, and if the year field was two digits in length,
      then adjust the year to four digits. If the field is less than 70, then
      add 2000, otherwise add 1900.
     -->
 
  如果没有声明BC并且年份字段有两个数据位的长度，那么把年份调整为4位。 
  如果该字段小于70，那么加2000，否则加1900。
  
      <tip>
       <para>
    <!--
        Gregorian years AD 1-99 can be entered by using 4 digits with leading
        zeros (e.g., <literal>0099</> is AD 99).
-->
 格里高利年份AD 1-99可以用前导零的方式使用4位数字 (也就是说<literal>0099</>
 是AD 99)。
       </para>

      </tip>
     </para>
    </step>
   </procedure>
  </sect1>


  <sect1 id="datetime-keywords">
  <!--
   <title>Date/Time Key Words</title>
  --> 
  <title>日期/时间关键字</title>
  
   <!--
<para>
    <xref linkend="datetime-month-table"> shows the tokens that are
    recognized as names of months.
   </para>
-->
<para>
    <xref linkend="datetime-month-table">显示被当做月份名字缩写的记号。
</para>

    <table id="datetime-month-table">
     <title>Month Names</title>
     <tgroup cols="2">
      <thead>
       <row>
    <!--
        <entry>Month</entry>
        <entry>Abbreviations</entry>
-->
<entry>月份</entry>
        <entry>缩写</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>January</entry>
        <entry>Jan</entry>
       </row>
       <row>
        <entry>February</entry>
        <entry>Feb</entry>
       </row>
       <row>
        <entry>March</entry>
        <entry>Mar</entry>
       </row>
       <row>
        <entry>April</entry>
        <entry>Apr</entry>
       </row>
       <row>
        <entry>May</entry>
        <entry></entry>
       </row>
       <row>
        <entry>June</entry>
        <entry>Jun</entry>
       </row>
       <row>
        <entry>July</entry>
        <entry>Jul</entry>
       </row>
       <row>
        <entry>August</entry>
        <entry>Aug</entry>
       </row>
       <row>
        <entry>September</entry>
        <entry>Sep, Sept</entry>
       </row>
       <row>
        <entry>October</entry>
        <entry>Oct</entry>
       </row>
       <row>
        <entry>November</entry>
        <entry>Nov</entry>
       </row>
       <row>
        <entry>December</entry>
        <entry>Dec</entry>
       </row>
      </tbody>
     </tgroup>
    </table>

    <!--
<para>
     <xref linkend="datetime-dow-table"> shows the tokens that are
     recognized as names of days of the week.
    </para>
-->
<para>
    <xref linkend="datetime-dow-table">显示被识别为星期几的名字。
</para>

     <table id="datetime-dow-table">
      <title>Day of the Week Names</title>
      <tgroup cols="2">
       <thead>
        <row>
 <!--
         <entry>Day</entry>
         <entry>Abbreviations</entry>
 -->
 <entry>星期</entry>
         <entry>缩写</entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry>Sunday</entry>
         <entry>Sun</entry>
        </row>
        <row>
         <entry>Monday</entry>
         <entry>Mon</entry>
        </row>
        <row>
         <entry>Tuesday</entry>
         <entry>Tue, Tues</entry>
        </row>
        <row>
         <entry>Wednesday</entry>
         <entry>Wed, Weds</entry>
        </row>
        <row>
         <entry>Thursday</entry>
         <entry>Thu, Thur, Thurs</entry>
        </row>
        <row>
         <entry>Friday</entry>
         <entry>Fri</entry>
        </row>
        <row>
         <entry>Saturday</entry>
         <entry>Sat</entry>
        </row>
       </tbody>
      </tgroup>
     </table>

   <!--
<para>
    <xref linkend="datetime-mod-table"> shows the tokens that serve
    various modifier purposes.
   </para>
-->
<para>
    <xref linkend="datetime-mod-table">显示用于各种修饰用途的记号。
</para>

    <table id="datetime-mod-table">
<!--
     <title>Date/Time Field Modifiers</title>
-->
  <title>日期/时间字段修饰词</title>
     <tgroup cols="2">
      <thead>
       <row>
    <!--
        <entry>Identifier</entry>
        <entry>Description</entry>
-->
<entry>标识符</entry>
        <entry>描述</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry><literal>AM</literal></entry>
<!--
        <entry>Time is before 12:00</entry>
-->
<entry>12:00之前的时间</entry>
       </row>
       <row>
        <entry><literal>AT</literal></entry>
<!--
        <entry>Ignored</entry>
-->
<entry>忽略</entry>
       </row>
       <row>
        <entry><literal>JULIAN</>, <literal>JD</>, <literal>J</></entry>
<!--
        <entry>Next field is Julian Date</entry>
-->
<entry>下一个字段是儒略日</entry>
       </row>
       <row>
        <entry><literal>ON</literal></entry>
<!--
        <entry>Ignored</entry>
-->
<entry>忽略</entry>
       </row>
       <row>
        <entry><literal>PM</literal></entry>
<!--
        <entry>Time is on or after 12:00</entry>
-->
 <entry>12:00以及之后的时间</entry>
       </row>
       <row>
        <entry><literal>T</literal></entry>
<!--
        <entry>Next field is time</entry>
-->
<entry>下一个字段是时间</entry>
       </row>
      </tbody>
     </tgroup>
    </table>
  </sect1>

  <sect1 id="datetime-config-files">
  <!--
  <title>Date/Time Configuration Files</title>
  -->
  <title>日期/时间配置文件</title>

   <indexterm>
    <primary>time zone</primary>
    <secondary>input abbreviations</secondary>
   </indexterm>

   <!--
<para>
    Since timezone abbreviations are not well standardized,
    <productname>PostgreSQL</productname> provides a means to customize
    the set of abbreviations accepted by the server.  The
    <xref linkend="guc-timezone-abbreviations"> run-time parameter
    determines the active set of abbreviations.  While this parameter
    can be altered by any database user, the possible values for it
    are under the control of the database administrator &mdash; they
    are in fact names of configuration files stored in
    <filename>.../share/timezonesets/</> of the installation directory.
    By adding or altering files in that directory, the administrator
    can set local policy for timezone abbreviations.
   </para>
-->
<para>
   一些时区缩写并不很标准，<productname>PostgreSQL</productname>提供
   一种定制服务器可接受的缩写集合。
   <xref linkend="guc-timezone-abbreviations">
   运行时配置参数定义缩写的有效集合。
   该配置参数可以被任何数据库用户更改，
   但是其取值范围只能由数据库管理员更改，
   事实上可用的值都是<filename>.../share/timezonesets/</>目录中的文件名。
   通过添加或修改其中的文件，管理员就可以控制可用的时区缩写。
</para>

   <!--
<para>
    <varname>timezone_abbreviations</> can be set to any file name
    found in <filename>.../share/timezonesets/</>, if the file's name
    is entirely alphabetic.  (The prohibition against non-alphabetic
    characters in <varname>timezone_abbreviations</> prevents reading
    files outside the intended directory, as well as reading editor
    backup files and other extraneous files.)
   </para>
-->
<para>
  <varname>timezone_abbreviations</>可以被设为<filename>.../share/timezonesets/</>
  目录下的任意文件名(文件名只允许包含字母)。
  禁止在<varname>timezone_abbreviations</>中使用非字母字符是为了防止读取目录之外
  的文件以及其它不该读取的文件。
</para>

   
<para>
    <!--
    A timezone abbreviation file can contain blank lines and comments
    beginning with <literal>#</>.  Non-comment lines must have one of
    these formats:
    -->
时区缩写文件中可以包含空白行和以<literal>#</>开头的注释。
非注释行必须是以下格式：
<synopsis>
<replaceable>time_zone_name</replaceable> <replaceable>offset</replaceable>
<replaceable>time_zone_name</replaceable> <replaceable>offset</replaceable> D
@INCLUDE <replaceable>file_name</replaceable>
@OVERRIDE
</synopsis>
   </para>

   <!--
<para>
    A <replaceable>time_zone_name</replaceable> is just the abbreviation
    being defined.  The <replaceable>offset</replaceable> is the zone's
    offset in seconds from UTC, positive being east from Greenwich and
    negative being west.  For example, -18000 would be five hours west
    of Greenwich, or North American east coast standard time.  <literal>D</>
    indicates that the zone name represents local daylight-savings time
    rather than standard time. Since all known time zone offsets are on
    15 minute boundaries, the number of seconds has to be a multiple of 900.
   </para>
-->
<para>
<replaceable>time_zone_name</replaceable>是被定义的缩写名。 
<replaceable>offset</replaceable>是该时区相对于 UTC 偏移量(以秒计)，
向东为正，向西为负。例如-18000表示在格林威治以西5小时，
也就是美国东部标准时间。<literal>D</>表示该时区使用夏令时而不是标准时。
因为目前所有已知的时区偏移量都以15分钟为单位，
因此偏移量的秒数必须是900的倍数。
</para>

   <!--
<para>
    The <literal>@INCLUDE</> syntax allows inclusion of another file in the
    <filename>.../share/timezonesets/</> directory.  Inclusion can be nested,
    to a limited depth.
   </para>
-->
<para>
   <literal>@INCLUDE</>语法用于包含<filename>.../share/timezonesets/</>
   目录中的其它文件，可以嵌套包含，不过并不允许无限深度的嵌套。
</para>

   <!--
<para>
    The <literal>@OVERRIDE</> syntax indicates that subsequent entries in the
    file can override previous entries (i.e., entries obtained from included
    files).  Without this, conflicting definitions of the same timezone
    abbreviation are considered an error.
   </para>
-->
<para>
  <literal>@OVERRIDE</>语法表示后面项的定义可以覆盖前面的项（比如，从包含文件中获得），
  没有这一点，同一时区缩写的矛盾定义被认为是一个错误。
</para>

   <!--
<para>
    In an unmodified installation, the file <filename>Default</> contains
    all the non-conflicting time zone abbreviations for most of the world.
    Additional files <filename>Australia</> and <filename>India</> are
    provided for those regions: these files first include the
    <literal>Default</> file and then add or modify timezones as needed.
   </para>
-->
<para>
  默认安装时，<filename>Default</>文件包含世界上几乎所有不冲突的时区缩写。
  另外，<filename>Australia</>和<filename>India</>文件用于这些区域：
  这些文件首先被包含在<literal>Default</>文件中并在随后按需修改或者添加时区。
</para>

   <!--
<para>
    For reference purposes, a standard installation also contains files
    <filename>Africa.txt</>, <filename>America.txt</>, etc, containing
    information about every time zone abbreviation known to be in use
    according to the <literal>zoneinfo</> timezone database.  The zone name
    definitions found in these files can be copied and pasted into a custom
    configuration file as needed.  Note that these files cannot be directly
    referenced as <varname>timezone_abbreviations</> settings, because of
    the dot embedded in their names.
   </para>
-->
<para>
   为了便于参考，标准安装也包含了<filename>Africa.txt</>, <filename>America.txt</>等文件，
   它们包含了所有<literal>zoneinfo</>时区数据库中的时区缩写。
   这些文件中的时区名定义可以复制到自定义的配置文件中。
   需要注意的是，这些文件名不能直接用于<varname>timezone_abbreviations</> ，
   因为这些文件名中包含句点。
</para>

   <note>
    <!--
<para>
     If an error occurs while reading the time zone data sets, no new value is
     applied but the old set is kept. If the error occurs while starting the
     database, startup fails.
    </para>
-->
<para>
   如果在读取时区数据集时出错，
   将不会应用任何新值，仍将使用旧的数据集。
   如果这个错误是在数据库服务器启动时发生的，那么启动将失败。
</para>
   </note>

   <caution>
    <!--
<para>
     Time zone abbreviations defined in the configuration file override
     non-timezone meanings built into <productname>PostgreSQL</productname>.
     For example, the <filename>Australia</> configuration file defines
     <literal>SAT</> (for South Australian Standard Time).  When this
     file is active, <literal>SAT</> will not be recognized as an abbreviation
     for Saturday.
    </para>
-->
<para>
   配置文件中的时区缩写定义将会覆盖<productname>PostgreSQL</productname>内置的非时区含义。
   例如<filename>Australia</>配置文件定义了<literal>SAT</>(南澳洲标准时间)，
   如果激活了该文件，那么<literal>SAT</>将不会被识别为星期六的缩写。
</para>
   </caution>

   <caution>
    <!--
<para>
     If you modify files in <filename>.../share/timezonesets/</>,
     it is up to you to make backups &mdash; a normal database dump
     will not include this directory.
    </para>
-->
<para>
   如果你修改<filename>.../share/timezonesets/</>中的文件，
   那么你必须自己手动备份，因为数据库转储不会包含这个目录的内容。
</para>
   </caution>

  </sect1>

  <sect1 id="datetime-units-history">
  <!--
  <title>History of Units</title>
  -->
   <title>单位历史</title>

  <indexterm zone="datetime-units-history">
   <primary>Gregorian calendar</primary>
  </indexterm>
  <indexterm zone="datetime-units-history">
   <primary>Julian date</primary>
  </indexterm>

  <!--
<para>
   The SQL standard states that <quote>Within the definition of a
   <quote>datetime literal</quote>, the <quote>datetime
   values</quote> are constrained by the natural rules for dates and
   times according to the Gregorian calendar</quote>.
   <productname>PostgreSQL</> follows the SQL
   standard's lead by counting dates exclusively in the Gregorian
   calendar, even for years before that calendar was in use.
   This rule is known as the <firstterm>proleptic Gregorian calendar</>.
  </para>
-->
<para>
该SQL标准指出<quote>在一个<quote>日期时间形式</quote>定义中，
<quote>日期时间值</quote>按照阳历  
通过日期和时间的自然规则被限制</quote>。
<productname>PostgreSQL</>遵循SQL标准通过阳历计算特定日期，甚至使用日历的几年前。
这条规则被称为<firstterm>预期的阳历</>。
</para>

  <!--
<para>
   The Julian calendar was introduced by Julius Caesar in 45 BC.
   It was in common use in the Western world
   until the year 1582, when countries started changing to the Gregorian
   calendar.  In the Julian calendar, the tropical year is
   approximated as 365 1/4 days = 365.25 days. This gives an error of
   about 1 day in 128 years.
  </para>
-->
<para>
   儒略日是由Julius Caesar在公元前45年引入的，直到1582年开始使用公历之前，
   西方国家一直使用儒略日。
   在儒略日中，一年近似等于365+1/4=365.25天，
   大约在128年的出现一个1天的错。
</para>

  <!--
<para>
   The accumulating calendar error prompted
   Pope Gregory XIII to reform the calendar in accordance with
   instructions from the Council of Trent.
   In the Gregorian calendar, the tropical year is approximated as
   365 + 97 / 400 days = 365.2425 days. Thus it takes approximately 3300
   years for the tropical year to shift one day with respect to the
   Gregorian calendar.
  </para>
-->
<para>
   不断积累的历法错误促使教皇格里高利十三世(Gregory XIII)按照与
   弥撒议会(Council of Trent)一致的精神改革了历法。在罗马历法里，
   一年是近似365 + 97 / 400天= 365.2425天。
   因此对应于罗马历法，大约要3300年，才会积累一天的误差。
</para>

  
<para>
   <!--
   The approximation 365+97/400 is achieved by having 97 leap years
   every 400 years, using the following rules:
   -->
   近似的365+97/400是通过利用下面的规则，规定每400年有97个闰年实现的：
   <simplelist>
    <member>
 <!--
     Every year divisible by 4 is a leap year.
 -->
 每个可被4整除的年是一个闰年
    </member>
    <member>
 <!--
     However, every year divisible by 100 is not a leap year.
 -->
 不过，可被100整除的年不是闰年
    </member>
    <member>
 <!--
     However, every year divisible by 400 is a leap year after all.
 -->
 但是，可以被400整除的年还是闰年。
    </member>
   </simplelist>
   <!--
   So, 1700, 1800, 1900, 2100, and 2200 are not leap years. But 1600,
   2000, and 2400 are leap years.

   By contrast, in the older Julian calendar all years divisible by 4 are leap
   years.
   -->
   因此，1700,1800,1900,2100和2200年都不是闰年。而1600,2000,2400年是闰年。
   相比而言，旧式的Julian历法里面只有能被4整除的年是闰年。
  </para>

  
<para>
   <!--
   The papal bull of February 1582 decreed that 10 days should be dropped
   from October 1582 so that 15 October should follow immediately after
   4 October.
   This was observed in Italy, Poland, Portugal, and Spain. Other Catholic
   countries followed shortly after, but Protestant countries were
   reluctant to change, and the Greek Orthodox countries didn't change
   until the start of the 20th century.

   The reform was observed by Great Britain and its dominions (including what
   is now the USA) in 1752.
   Thus 2 September 1752 was followed by 14 September 1752.

   This is why Unix systems have the <command>cal</command> program
   produce the following:
   -->
   
   罗马教皇在1582年2月宣布从1582的10月中删除10天，
   也就是10月15号紧跟在10月4号的后面。
   信奉天主教的国家(意大利、波兰、葡萄牙、西班牙等) 
   很快就遵循了这个规定，但新教国家拒绝使用，
   而希腊东正教国家却一直拖延到20世纪开始的时候才逐渐遵守这个规定。
   大英帝国及其殖民地(包含今天的美国)在1752年开始引用使用，
   也就是1752年9月2号之后紧跟着14号，
   这就是为什么Unix系统上的<command>cal</command>程序会产生如下输出的原因：
   
<screen>
$ <userinput>cal 9 1752</userinput>
   September 1752
 S  M Tu  W Th  F  S
       1  2 14 15 16
17 18 19 20 21 22 23
24 25 26 27 28 29 30
</screen>
  <!--

   But, of course, this calendar is only valid for Great Britain and
   dominions, not other places.
   Since it would be difficult and confusing to try to track the actual
   calendars that were in use in various places at various times,
   <productname>PostgreSQL</> does not try, but rather follows the Gregorian
   calendar rules for all dates, even though this method is not historically
   accurate.
   -->
   但是，当然，这个日历对于英国领土是唯一有效的，不是其它地方。
   因为尝试跟踪在不同的时间不同地方使用的实际日历是困难和混乱的，
<productname>PostgreSQL</>不会尝试，而是遵循所有日期的阳历
规则，即使这种方法是历史上不准确的。
  </para>


  <!--
<para>
   Different calendars have been developed in various parts of the
   world, many predating the Gregorian system.

   For example,
   the beginnings of the Chinese calendar can be traced back to the 14th
   century BC. Legend has it that the Emperor Huangdi invented that
   calendar in 2637 BC.

   The People's Republic of China uses the Gregorian calendar
   for civil purposes. The Chinese calendar is used for determining
   festivals.
  </para>
-->
<para>
在世界的不同地方，发明了许多不同的历法，有许多比罗马历法系统还早。
例如，中国历法的最早应用可以追溯到公元前14世纪。
传说黄帝在公元前2637就发明了这个历法，也就是日历。
中华人民共和国使用罗马历法用于民用。
中国历法用于决定节日/节气。
</para>

  <!--
<para>
   The <firstterm>Julian Date</firstterm> system is another type of
   calendar, unrelated to the Julian calendar though it is confusingly
   named similarly to that calendar.
   The Julian Date system was invented by the French scholar
   Joseph Justus Scaliger (1540-1609)
   and probably takes its name from Scaliger's father,
   the Italian scholar Julius Caesar Scaliger (1484-1558).
   In the Julian Date system, each day has a sequential number, starting
   from JD 0 (which is sometimes called <emphasis>the</> Julian Date).
   JD 0 corresponds to 1 January 4713 BC in the Julian calendar, or
   24 November 4714 BC in the Gregorian calendar.  Julian Date counting
   is most often used by astronomers for labeling their nightly observations,
   and therefore a date runs from noon UTC to the next noon UTC, rather than
   from midnight to midnight: JD 0 designates the 24 hours from noon UTC on
   24 November 4714 BC to noon UTC on 25 November 4714 BC.
  </para>
-->
<para>
   <firstterm>Julian Date</firstterm>系统是日历的另一种类型，
   跟Julian calendar无关，尽管与这个日历类似命名是令人费解的。
   "Julian Date"系统是法国学者Joseph Justus Scaliger(1540-1609)发明的，
   可能是取自Scaliger的父亲的名字，
   意大利学者Julius Caesar Scaliger(1484-1558)。在Julian日期系统，
   每天产生一个序列号，从JD0开始（有时被叫做the Julian日期）。 
   JD0在Julian日历中对应公元前4713年1月1日，在Gregorian日历中对应公元前4714年11月24日。
   Julian日期计算经常在天文学家标注夜间观测时被用到，
   因此一个日期就是从一个正午UTC到下一个正午UTC。
   而不是从午夜到另一个午夜：
   JD0设计的24小时是从公元前4714年11月24日的正午UTC到公元前4714年11月25日的正午UTC。
</para>

  <!--
<para>
   Although <productname>PostgreSQL</> supports Julian Date notation for
   input and output of dates (and also uses Julian dates for some internal
   datetime calculations), it does not observe the nicety of having dates
   run from noon to noon.  <productname>PostgreSQL</> treats a Julian Date
   as running from midnight to midnight.
  </para>
-->
<para>
   尽管<productname>PostgreSQL</>在输入输出日期时支持Julian Date日期符号
   （也用在一些内部的日期时间日历上），
   它不观察从正午到正午的精密运行。
   <productname>PostgreSQL</>运行Julian Date日期系统从午夜到午夜。
</para>

 </sect1>
</appendix>
