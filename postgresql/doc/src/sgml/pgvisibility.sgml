<!-- doc/src/sgml/pgvisibility.sgml -->

<sect1 id="pgvisibility" xreflabel="pg_visibility">
<!--==========================orignal english content==========================
 <title>pg_visibility</title>
____________________________________________________________________________-->
 <title>pg_visibility</title>

<!--==========================orignal english content==========================
 <indexterm zone="pgvisibility">
  <primary>pg_visibility</primary>
 </indexterm>
____________________________________________________________________________-->
 <indexterm zone="pgvisibility">
  <primary>pg_visibility</primary>
 </indexterm>

<!--==========================orignal english content==========================
 <para>
  The <filename>pg_visibility</> module provides a means for examining the
  visibility map (VM) and page-level visibility information.  It also
  provides functions to check the integrity of the visibility map and to
  force it to be rebuilt.
 </para>
____________________________________________________________________________-->
 <para>
  <filename>pg_visibility</>模块提供了一种方式来检查可见性映射（VM）以及页级别的可见性信息。它还提供了函数来检查可见性映射的完整性以及强制重建可见性映射。
 </para>

<!--==========================orignal english content==========================
 <para>
  Three different bits are used to store information about page-level
  visibility.  The all-visible bit in the visibility map indicates that every
  tuple on a given page of a relation is visible to every current transaction.
  The all-frozen bit in the visibility map indicates that every tuple on the
  page is frozen; that is, no future vacuum will need to modify the page
  until such time as a tuple is inserted, updated, deleted, or locked on
  that page.  The page-level <literal>PD_ALL_VISIBLE</literal> bit has the
  same meaning as the all-visible bit in the visibility map, but is stored
  within the data page itself rather than a separate data structure.  These
  will normally agree, but the page-level bit can sometimes be set while the
  visibility map bit is clear after a crash recovery; or they can disagree
  because of a change which occurs after <literal>pg_visibility</> examines
  the visibility map and before it examines the data page.  Any event which
  causes data corruption can also cause these bits to disagree.
 </para>
____________________________________________________________________________-->
 <para>
  有三个不同的位被用来存储有关页级别可见性的信息。可见性映射中的“全部可见”位表示一个关系的给定页面上的所有元组对每一个当前事务都可见。可见性映射中的“全部冻结”位表示该页上的每一个元组都被冻结，也就是说直到在那个页面上对一个元组进行插入、更新、删除或者锁定之前都不需要用 vacuum 对该页面进行修改。页面级别的<literal>PD_ALL_VISIBLE</literal>位具有和可见性映射中“全部可见”位相同的含义，但是它存储在数据页面本身中而不是存储在单独的数据结构中。这些位通常是相互一致的，但是有时在崩溃恢复后会出现页级别位被设置而可见性映射位被清除的情况，还有一种不一致的情况是在<literal>pg_visibility</>检查了可见性映射之后且在它检查数据页面之前发生了修改。任何导致数据损坏的时间也可能导致这些位不一致。
 </para>

<!--==========================orignal english content==========================
 <para>
  Functions which display information about <literal>PD_ALL_VISIBLE</>
  are much more costly than those which only consult the visibility map,
  because they must read the relation's data blocks rather than only the
  (much smaller) visibility map.  Functions that check the relation's
  data blocks are similarly expensive.
 </para>
____________________________________________________________________________-->
 <para>
  显示有关<literal>PD_ALL_VISIBLE</>的信息的函数代价比那些查看可见性映射的函数要高很多，因为它们必须读取关系的数据块而不是只读取（小很多的）可见性映射。类似地，检查关系的数据块的函数也很昂贵。
 </para>

 <sect2>
<!--==========================orignal english content==========================
  <title>Functions</title>
____________________________________________________________________________-->
  <title>函数</title>

  <variablelist>
   <varlistentry>
<!--==========================orignal english content==========================
    <term><function>pg_visibility_map(regclass, blkno bigint, all_visible OUT boolean, all_frozen OUT boolean) returns record</function></term>
____________________________________________________________________________-->
    <term><function>pg_visibility_map(regclass, blkno bigint, all_visible OUT boolean, all_frozen OUT boolean) returns record</function></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      Returns the all-visible and all-frozen bits in the visibility map for
      the given block of the given relation.
     </para>
____________________________________________________________________________-->
     <para>
      为给定关系的给定块返回其在可见性映射中的“全部可见”和“全部冻结”位。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><function>pg_visibility(regclass, blkno bigint, all_visible OUT boolean, all_frozen OUT boolean, pd_all_visible OUT boolean) returns record</function></term>
____________________________________________________________________________-->
    <term><function>pg_visibility(regclass, blkno bigint, all_visible OUT boolean, all_frozen OUT boolean, pd_all_visible OUT boolean) returns record</function></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      Returns the all-visible and all-frozen bits in the visibility map for
      the given block of the given relation, plus the
      <literal>PD_ALL_VISIBLE</> bit for that block.
     </para>
____________________________________________________________________________-->
     <para>
      为给定关系的给定块返回其在可见性映射中的“全部可见”和“全部冻结”位，外加块的<literal>PD_ALL_VISIBLE</>位。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><function>pg_visibility_map(regclass, blkno OUT bigint, all_visible OUT boolean, all_frozen OUT boolean) returns setof record</function></term>
____________________________________________________________________________-->
    <term><function>pg_visibility_map(regclass, blkno OUT bigint, all_visible OUT boolean, all_frozen OUT boolean) returns setof record</function></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      Returns the all-visible and all-frozen bits in the visibility map for
      each block the given relation.
     </para>
____________________________________________________________________________-->
     <para>
      为给定关系的每一块返回其在可见性映射中的“全部可见”和“全部冻结”位。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><function>pg_visibility(regclass, blkno OUT bigint, all_visible OUT boolean, all_frozen OUT boolean, pd_all_visible OUT boolean) returns setof record</function></term>
____________________________________________________________________________-->
    <term><function>pg_visibility(regclass, blkno OUT bigint, all_visible OUT boolean, all_frozen OUT boolean, pd_all_visible OUT boolean) returns setof record</function></term>

    <listitem>
<!--==========================orignal english content==========================
     <para>
      Returns the all-visible and all-frozen bits in the visibility map for
      each block the given relation, plus the <literal>PD_ALL_VISIBLE</>
      bit for each block.
     </para>
____________________________________________________________________________-->
     <para>
      为给定关系的每一块返回其在可见性映射中的“全部可见”和“全部冻结”位，外加每一块的<literal>PD_ALL_VISIBLE</>位。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><function>pg_visibility_map_summary(regclass, all_visible OUT bigint, all_frozen OUT bigint) returns record</function></term>
____________________________________________________________________________-->
    <term><function>pg_visibility_map_summary(regclass, all_visible OUT bigint, all_frozen OUT bigint) returns record</function></term>

    <listitem>
<!--==========================orignal english content==========================
     <para>
      Returns the number of all-visible pages and the number of all-frozen
      pages in the relation according to the visibility map.
     </para>
____________________________________________________________________________-->
     <para>
      根据可见性映射返回关系中“全部可见”页面和“全部冻结”页面的数量。
     </para>
    </listitem>
   </varlistentry>
  
   <varlistentry>
<!--==========================orignal english content==========================
    <term><function>pg_check_frozen(regclass, t_ctid OUT tid) returns setof tid</function></term>
____________________________________________________________________________-->
    <term><function>pg_check_frozen(regclass, t_ctid OUT tid) returns setof tid</function></term>

    <listitem>
<!--==========================orignal english content==========================
     <para>
      Returns the TIDs of non-frozen tuples present in pages marked all-frozen
      in the visibility map.  If this function returns a non-empty set of
      TIDs, the database is corrupt.
     </para>
____________________________________________________________________________-->
     <para>
      返回在可见性映射中被标为“全部冻结”的页面中非冻结元组的 TID。如果这个函数返回一个非空的 TID 集合，则数据库已经损坏。
     </para>
    </listitem>
   </varlistentry>
     
    <varlistentry>
<!--==========================orignal english content==========================
    <term><function>pg_check_visible(regclass, t_ctid OUT tid) returns setof tid</function></term>
____________________________________________________________________________-->
    <term><function>pg_check_visible(regclass, t_ctid OUT tid) returns setof tid</function></term>

    <listitem>
<!--==========================orignal english content==========================
     <para>
      Returns the TIDs of tuples which are not all-visible despite the fact
      that the pages which contain them are marked as all-visible in the
      visibility map.  If this function returns a non-empty set of TIDs, the
      database is corrupt.
     </para>
____________________________________________________________________________-->
     <para>
      返回页面中不是全部可见的元组的 TID，而不管包含它们的页面在可见性映射中被标为“全部可见”。如果这个函数返回一个非空的 TID 集合，则数据库已经损坏。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><function>pg_truncate_visibility_map(regclass) returns void</function></term>
____________________________________________________________________________-->
    <term><function>pg_truncate_visibility_map(regclass) returns void</function></term>

    <listitem>
<!--==========================orignal english content==========================
     <para>
      Truncates the visibility map for the given relation.  This function
      is only expected to be useful if you suspect that the visibility map
      for the indicated relation is corrupt and wish to rebuild it.  The first
      <command>VACUUM</> executed on the given relation after this function
      is executed will scan every page in the relation and rebuild the
      visibility map.
     </para>
____________________________________________________________________________-->
     <para>
      为给定关系截断可见性映射。只有当怀疑一个关系的可见性映射被损坏并且想要重建它时，这个函数才有用。在这个函数被执行后，在给定关系上进行的第一次<command>VACUUM</>将会扫描关系中的每一个页面并且重建可见性映射。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

<!--==========================orignal english content==========================
  <para>
   By default, these functions are not publicly executable.
  </para>
____________________________________________________________________________-->
  <para>
   默认情况下，这些函数不是谁都能执行。
  </para>
 </sect2>

 <sect2>
<!--==========================orignal english content==========================
  <title>Author</title>
____________________________________________________________________________-->
  <title>作者</title>

<!--==========================orignal english content==========================
  <para>
   Robert Haas <email>rhaas@postgresql.org</email>
  </para>
____________________________________________________________________________-->
  <para>
   Robert Haas <email>rhaas@postgresql.org</email>
  </para>
 </sect2>

</sect1>
