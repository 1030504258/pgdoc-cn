<!-- doc/src/sgml/tableam.sgml -->

<chapter id="tableam">
<!--==========================orignal english content==========================
 <title>Table Access Method Interface Definition</title>
____________________________________________________________________________-->
 <title>表访问方法接口定义</title>

<!--==========================orignal english content==========================
 <indexterm>
  <primary>Table Access Method</primary>
 </indexterm>
____________________________________________________________________________-->
 <indexterm>
  <primary>表访问方法</primary>
 </indexterm>
<!--==========================orignal english content==========================
 <indexterm>
  <primary>tableam</primary>
  <secondary>Table Access Method</secondary>
 </indexterm>
____________________________________________________________________________-->
 <indexterm>
  <primary>tableam</primary>
  <secondary>表访问方法</secondary>
 </indexterm>

<!--==========================orignal english content==========================
 <para>
  This chapter explains the interface between the core
  <productname>PostgreSQL</productname> system and <firstterm>table access
  methods</firstterm>, which manage the storage for tables. The core system
  knows little about these access methods beyond what is specified here, so
  it is possible to develop entirely new access method types by writing
  add-on code.
 </para>
____________________________________________________________________________-->
 <para>
  本章阐述<productname>PostgreSQL</productname>核心系统与<firstterm>表访问方法</firstterm>间的接口，其管理表的存储。除这里指出的内容，核心系统对于这些访问方法知之甚少，因此可以通过编写附加代码来开发全新的访问方法类型。
 </para>

<!--==========================orignal english content==========================
 <para>
  Each table access method is described by a row in the <link
  linkend="catalog-pg-am"><structname>pg_am</structname></link> system
  catalog. The <structname>pg_am</structname> entry specifies a name and a
  <firstterm>handler function</firstterm> for the table access method.  These
  entries can be created and deleted using the <xref
  linkend="sql-create-access-method"/> and <xref
  linkend="sql-drop-access-method"/> SQL commands.
 </para>
____________________________________________________________________________-->
 <para>
  每个表访问方法都有<link linkend="catalog-pg-am"><structname>pg_am</structname></link>系统目录中的一行来描述。<structname>pg_am</structname>条目为表访问方法指定一个名字和<firstterm>句柄函数</firstterm>。这些条目可以用SQL命令<xref linkend="sql-create-access-method"/>和<xref linkend="sql-drop-access-method"/>来创建和删除。
 </para>

<!--==========================orignal english content==========================
 <para>
  A table access method handler function must be declared to accept a single
  argument of type <type>internal</type> and to return the pseudo-type
  <type>table_am_handler</type>.  The argument is a dummy value that simply
  serves to prevent handler functions from being called directly from SQL commands.

  The result of the function must be a pointer to a struct of type
  <structname>TableAmRoutine</structname>, which contains everything that the
  core code needs to know to make use of the table access method. The return
  value needs to be of server lifetime, which is typically achieved by
  defining it as a <literal>static const</literal> variable in global
  scope. The <structname>TableAmRoutine</structname> struct, also called the
  access method's <firstterm>API struct</firstterm>, defines the behavior of
  the access method using callbacks. These callbacks are pointers to plain C
  functions and are not visible or callable at the SQL level. All the
  callbacks and their behavior is defined in the
  <structname>TableAmRoutine</structname> structure (with comments inside the
  struct defining the requirements for callbacks). Most callbacks have
  wrapper functions, which are documented from the point of view of a user
  (rather than an implementor) of the table access method.  For details,
  please refer to the <ulink url="https://git.postgresql.org/gitweb/?p=postgresql.git;a=blob;f=src/include/access/tableam.h;hb=HEAD">
  <filename>src/include/access/tableam.h</filename></ulink> file.
 </para>
____________________________________________________________________________-->
 <para>
  表访问方法句柄函数必须声明成接受单个<type>internal</type>类型的参数，并返回伪类型<type>table_am_handler</type>。该参数是伪值，仅用于防止从SQL命令直接调用句柄函数。
  函数的结果必须是指向类型<structname>TableAmRoutine</structname>的结构的指针，其包含了核心代码所需要知道的所有内容，以利用表访问方法。返回值需具有服务器生命周期，通常是通过将其定义为一个全局范围的<literal>static const</literal>变量来实现。<structname>TableAmRoutine</structname>结构，也称为访问方法的<firstterm>API结构</firstterm>，定义使用回调的访问方法的行为。这些回调是普通C函数指针，在SQL级别并不可见或者可调用。所有回调及其行为在<structname>TableAmRoutine</structname>结构中定义（结构内部有定义回调需求的注释）。大多数回调有包装函数，从用户（而不是实现者）视点记录表访问方法。详细信息请参考<ulink url="https://git.postgresql.org/gitweb/?p=postgresql.git;a=blob;f=src/include/access/tableam.h;hb=HEAD"> <filename>src/include/access/tableam.h</filename></ulink>文件。
 </para>

<!--==========================orignal english content==========================
 <para>
  To implement an access method, an implementor will typically need to
  implement an AM-specific type of tuple table slot (see
  <ulink url="https://git.postgresql.org/gitweb/?p=postgresql.git;a=blob;f=src/include/executor/tuptable.h;hb=HEAD">
   <filename>src/include/executor/tuptable.h</filename></ulink>), which allows
   code outside the access method to hold references to tuples of the AM, and
   to access the columns of the tuple.
 </para>
____________________________________________________________________________-->
 <para>
  为了实现访问方法，实现者通常要实现特定AM类型的元组表槽（见<ulink url="https://git.postgresql.org/gitweb/?p=postgresql.git;a=blob;f=src/include/executor/tuptable.h;hb=HEAD"> <filename>src/include/executor/tuptable.h</filename></ulink>），允许访问方法之外的代码保存对AM元组的引用，并且能访问元组的列。
 </para>

<!--==========================orignal english content==========================
 <para>
  Currently, the way an AM actually stores data is fairly unconstrained. For
  example, it's possible, but not required, to use postgres' shared buffer
  cache.  In case it is used, it likely makes sense to use
  <productname>PostgreSQL</productname>'s standard page layout as described in
  <xref linkend="storage-page-layout"/>.
 </para>
____________________________________________________________________________-->
 <para>
  目前AM存储数据的实际方式完全没有限制。例如，可以使用postgres的共享缓冲区的缓存，但这并非必需的。如果使用它，使用<xref linkend="storage-page-layout"/>中所述的<productname>PostgreSQL</productname>的标准页面布局可能很有意义。
 </para>

<!--==========================orignal english content==========================
 <para>
  One fairly large constraint of the table access method API is that,
  currently, if the AM wants to support modifications and/or indexes, it is
  necessary for each tuple to have a tuple identifier (<acronym>TID</acronym>)
  consisting of a block number and an item number (see also <xref
  linkend="storage-page-layout"/>).  It is not strictly necessary that the
  sub-parts of <acronym>TIDs</acronym> have the same meaning they e.g. have
  for <literal>heap</literal>, but if bitmap scan support is desired (it is
  optional), the block number needs to provide locality.
 </para>
____________________________________________________________________________-->
 <para>
  当前表访问方法API的一个相当大的限制是，如果AM要支持修改和/或索引，每个元组都需要有由块号和项目号组成的元组标识符（<acronym>TID</acronym>）（见<xref linkend="storage-page-layout"/>）。<acronym>TIDs</acronym>的子部分不一定具有与<literal>堆</literal>相同的含义，但如果需要位图扫描支持（可选），则块号需要提供局部性。
 </para>

<!--==========================orignal english content==========================
 <para>
  For crash safety, an AM can use postgres' <link
  linkend="wal"><acronym>WAL</acronym></link>, or a custom implementation.
  If <acronym>WAL</acronym> is chosen, either <link
  linkend="generic-wal">Generic WAL Records</link> can be used,
  or a new type of <acronym>WAL</acronym> records can be implemented.
  Generic WAL Records are easy, but imply higher WAL volume.
  Implementation of a new type of WAL record
  currently requires modifications to core code (specifically,
  <filename>src/include/access/rmgrlist.h</filename>).
 </para>
____________________________________________________________________________-->
 <para>
  为安全起见，AM可使用postgres的<link linkend="wal"><acronym>WAL</acronym></link>或自定义实现。如果选用了<acronym>WAL</acronym>，则可使用<link linkend="generic-wal">通用WAL记录</link>或实现新型的<acronym>WAL</acronym>记录。通用WAL记录较简单，但意味着WAL量更高。目前实现新型WAL记录需要修改核心代码（特别是<filename>src/include/access/rmgrlist.h</filename>）。
 </para>

<!--==========================orignal english content==========================
 <para>
  To implement transactional support in a manner that allows different table
  access methods be accessed within a single transaction, it likely is
  necessary to closely integrate with the machinery in
  <filename>src/backend/access/transam/xlog.c</filename>.
 </para>
____________________________________________________________________________-->
 <para>
  要以允许在单个事务中访问不同表访问方法的方式实现事务支持，可能需要与<filename>src/backend/access/transam/xlog.c</filename>中的机制紧密集成。
 </para>

<!--==========================orignal english content==========================
 <para>
  Any developer of a new <literal>table access method</literal> can refer to
  the existing <literal>heap</literal> implementation present in
  <filename>src/backend/access/heap/heapam_handler.c</filename> for details of
  its implementation.
 </para>
____________________________________________________________________________-->
 <para>
  新的<literal>表访问方法</literal>的开发人员可参考<filename>src/backend/access/heap/heapam_handler.c</filename>中已有的<literal>堆</literal>实现代码，以了解其实现的细节。
 </para>

</chapter>
