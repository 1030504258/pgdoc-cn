<!-- doc/src/sgml/dfunc.sgml -->

<sect2 id="dfunc">
 <!--<title>Compiling and Linking Dynamically-loaded Functions</title> -->
 <title>编译和链接动态加载的函数</title>
 <!--
<para>
  Before you are able to use your
  <productname>PostgreSQL</productname> extension functions written in
  C, they must be compiled and linked in a special way to produce a
  file that can be dynamically loaded by the server.  To be precise, a
  <firstterm>shared library</firstterm> needs to be
  created.<indexterm><primary>shared library</></indexterm>

 </para>
-->
<para>
在能够使用由 C 写的<productname>PostgreSQL</productname>扩展函数之前，
必须用一种特殊的方法编译和链接它们，这样才能生成可以被服务器动态加载的文件。
准确地说是需要创建一个<firstterm>共享库</firstterm>。<indexterm><primary>shared library</></indexterm>
</para>

 <!--
<para>
  For information beyond what is contained in this section
  you should read the documentation of your
  operating system, in particular the manual pages for the C compiler,
  <command>cc</command>, and the link editor, <command>ld</command>.
  In addition, the <productname>PostgreSQL</productname> source code
  contains several working examples in the
  <filename>contrib</filename> directory.  If you rely on these
  examples you will make your modules dependent on the availability
  of the <productname>PostgreSQL</productname> source code, however.
 </para>
-->
<para>
如果需要更多信息，那么你应该阅读操作系统的文档，特别是 C 编译器(<command>cc</command>)
和连接器(<command>ld</command>)的文档。另外，<productname>PostgreSQL</productname>
源代码里包含几个可以运行的例子，它们在<filename>contrib</filename>目录里。不过，
如果你依赖这些例子，那么你的模块将依赖于<productname>PostgreSQL</productname>源代码的可用性。
</para>

 <!--
<para>
  Creating shared libraries is generally analogous to linking
  executables: first the source files are compiled into object files,
  then the object files are linked together.  The object files need to
  be created as <firstterm>position-independent code</firstterm>
  (<acronym>PIC</acronym>),<indexterm><primary>PIC</></> which
  conceptually means that they can be placed at an arbitrary location
  in memory when they are loaded by the executable.  (Object files
  intended for executables are usually not compiled that way.)  The
  command to link a shared library contains special flags to
  distinguish it from linking an executable (at least in theory
  &mdash; on some systems the practice is much uglier).
 </para>
-->
<para>
创建共享库和链接可执行文件类似：首先把源代码编译成目标文件，然后把目标文件链接起来。
目标文件需要创建成<firstterm>位置无关码</firstterm>(<acronym>PIC</acronym>)，
<indexterm><primary>PIC</></>也就是在可执行程序加载它们的时候，
它们可以被放在可执行程序内存里的任何地方(用于可执行文件的目标文件通常不是用这个方式编译的)，
链接动态库的命令包含特殊标志，与链接可执行文件的命令是有区别的(至少理论上如此，不过现实未必)。
</para>

 <!--
<para>
  In the following examples we assume that your source code is in a
  file <filename>foo.c</filename> and we will create a shared library
  <filename>foo.so</filename>.  The intermediate object file will be
  called <filename>foo.o</filename> unless otherwise noted.  A shared
  library can contain more than one object file, but we only use one
  here.
 </para>
-->
<para>
在下面的例子里，假设你的源程序代码在<filename>foo.c</filename>文件里，并且我们要创建
<filename>foo.so</filename>的共享库。中介的对象文件将叫做<filename>foo.o</filename>
(除非另外注明)。虽然一个共享库可以包含多个对象文件，但是在这里只用一个。
</para>

<!--
  Note: Reading GNU Libtool sources is generally a good way of
  figuring out this information.  The methods used within PostgreSQL
  source code are not necessarily ideal.
-->

  <variablelist>
   <varlistentry>
    <term><systemitem class="osname">FreeBSD</></term>
    <indexterm><primary>FreeBSD</><secondary>shared library</></>
    <listitem>
     <!--
<para>
      The compiler flag to create <acronym>PIC</acronym> is
      <option>-fpic</option>.  To create shared libraries the compiler
      flag is <option>-shared</option>.
<programlisting>
gcc -fpic -c foo.c
gcc -shared -o foo.so foo.o
</programlisting>
      This is applicable as of version 3.0 of
      <systemitem class="osname">FreeBSD</>.
     </para>
-->
<para>
创建<acronym>PIC</acronym>的编译器标志是<option>-fpic</option>。创建共享库的链接器标志是<option>-shared</option>。
<programlisting>
gcc -fpic -c foo.c
gcc -shared -o foo.so foo.o
</programlisting>
上面方法适用于 3.0 版本的<systemitem class="osname">FreeBSD</>。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><systemitem class="osname">HP-UX</></term>
    <indexterm><primary>HP-UX</><secondary>shared library</></>
    <listitem>
     <!--
<para>
      The compiler flag of the system compiler to create
      <acronym>PIC</acronym> is <option>+z</option>.  When using
      <application>GCC</application> it's <option>-fpic</option>. The
      linker flag for shared libraries is <option>-b</option>.  So:
<programlisting>
cc +z -c foo.c
</programlisting>
      or:
<programlisting>
gcc -fpic -c foo.c
</programlisting>
      and then:
<programlisting>
ld -b -o foo.sl foo.o
</programlisting>
      <systemitem class="osname">HP-UX</> uses the extension
      <filename>.sl</filename> for shared libraries, unlike most other
      systems.
     </para>
-->
<para>
创建<acronym>PIC</acronym>的编译器标志是<option>+z</option> 。如果使用<application>GCC</application>
则是<option>-fpic</option>。创建共享库的链接器标志是<option>-b</option>。因此：
<programlisting>
cc +z -c foo.c
</programlisting>
或：
<programlisting>
gcc -fpic -c foo.c
</programlisting>
然后：
<programlisting>
ld -b -o foo.sl foo.o
</programlisting>
<systemitem class="osname">HP-UX</>使用<filename>.sl</filename>作为共享库扩展名，和其它大部分系统不同。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><systemitem class="osname">IRIX</></term>
    <indexterm><primary>IRIX</><secondary>shared library</></>
    <listitem>
     <!--
<para>
      <acronym>PIC</acronym> is the default, no special compiler
      options are necessary.  The linker option to produce shared
      libraries is <option>-shared</option>.
<programlisting>
cc -c foo.c
ld -shared -o foo.so foo.o
</programlisting>
     </para>
-->
<para>
<acronym>PIC</acronym>是缺省，不需要使用特殊的编译器选项。创建共享库的链接器标志是<option>-shared</option>。
<programlisting>
cc -c foo.c
ld -shared -o foo.so foo.o
</programlisting>
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><systemitem class="osname">Linux</></term>
    <indexterm><primary>Linux</><secondary>shared library</></>
    <listitem>
     <!--
<para>
      The compiler flag to create <acronym>PIC</acronym> is
      <option>-fpic</option>.  On some platforms in some situations
      <option>-fPIC</option> must be used if <option>-fpic</option>
      does not work.  Refer to the GCC manual for more information.
      The compiler flag to create a shared library is
      <option>-shared</option>.  A complete example looks like this:
<programlisting>
cc -fpic -c foo.c
cc -shared -o foo.so foo.o
</programlisting>
     </para>
-->
<para>
创建<acronym>PIC</acronym>的编译器标志是<option>-fpic</option>。在某些平台上如果<option>-fpic</option>
不工作则必须使用<option>-fPIC</option>。
参考 GCC 手册获取更多信息。创建共享库的编译器标志是<option>-shared</option>。一个完整的例子看起来像：
<programlisting>
cc -fpic -c foo.c
cc -shared -o foo.so foo.o
</programlisting>
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><systemitem class="osname">Mac OS X</></term>
    <indexterm><primary>Mac OS X</><secondary>shared library</></>
    <listitem>
     <!--
<para>
      Here is an example.  It assumes the developer tools are installed.
<programlisting>
cc -c foo.c
cc -bundle -flat_namespace -undefined suppress -o foo.so foo.o
</programlisting>
     </para>
-->
<para>
这里是一个例子。假设开发工具已经安装好了。
<programlisting>
cc -c foo.c
cc -bundle -flat_namespace -undefined suppress -o foo.so foo.o
</programlisting>
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><systemitem class="osname">NetBSD</></term>
    <indexterm><primary>NetBSD</><secondary>shared library</></>
    <listitem>
     <!--
<para>
      The compiler flag to create <acronym>PIC</acronym> is
      <option>-fpic</option>.  For <acronym>ELF</acronym> systems, the
      compiler with the flag <option>-shared</option> is used to link
      shared libraries.  On the older non-ELF systems, <literal>ld
      -Bshareable</literal> is used.
<programlisting>
gcc -fpic -c foo.c
gcc -shared -o foo.so foo.o
</programlisting>
     </para>
-->
<para>
创建<acronym>PIC</acronym>的编译器标志是<option>-fpic</option>。对于<acronym>ELF</acronym>系统，
带<option>-shared</option>标志的编译命令用于链接共享库。在老的非 ELF 系统里，
则使用<literal>ld -Bshareable</literal>。
<programlisting>
gcc -fpic -c foo.c
gcc -shared -o foo.so foo.o
</programlisting>
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><systemitem class="osname">OpenBSD</></term>
    <indexterm><primary>OpenBSD</><secondary>shared library</></>
    <listitem>
     <!--
<para>
      The compiler flag to create <acronym>PIC</acronym> is
      <option>-fpic</option>.  <literal>ld -Bshareable</literal> is
      used to link shared libraries.
<programlisting>
gcc -fpic -c foo.c
ld -Bshareable -o foo.so foo.o
</programlisting>
     </para>
-->
<para>
创建<acronym>PIC</acronym>的编译器标志是<option>-fpic</option>。而
<literal>ld -Bshareable</literal>用于链接共享库。
<programlisting>
gcc -fpic -c foo.c
ld -Bshareable -o foo.so foo.o
</programlisting>
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><systemitem class="osname">Solaris</></term>
    <indexterm><primary>Solaris</><secondary>shared library</></>
    <listitem>
     <!--
<para>
      The compiler flag to create <acronym>PIC</acronym> is
      <option>-KPIC</option> with the Sun compiler and
      <option>-fpic</option> with <application>GCC</>.  To
      link shared libraries, the compiler option is
      <option>-G</option> with either compiler or alternatively
      <option>-shared</option> with <application>GCC</>.
<programlisting>
cc -KPIC -c foo.c
cc -G -o foo.so foo.o
</programlisting>
      or
<programlisting>
gcc -fpic -c foo.c
gcc -G -o foo.so foo.o
</programlisting>
     </para>
-->
<para>
用 Sun 编译器时创建<acronym>PIC</acronym>的编译器标志是<option>-KPIC</option>；
用<application>GCC</>编译器时创建<acronym>PIC</acronym>的编译器标志是<option>-fpic</option>。
链接共享库时两个编译器都可以用<option>-G</option>，此外<application>GCC</>还可以用<option>-shared</option>。
<programlisting>
cc -KPIC -c foo.c
cc -G -o foo.so foo.o
</programlisting>
或
<programlisting>
gcc -fpic -c foo.c
gcc -G -o foo.so foo.o
</programlisting>
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><systemitem class="osname">Tru64 UNIX</></term>
    <indexterm><primary>Tru64 UNIX</><secondary>shared library</></>
    <indexterm><primary>Digital UNIX</><see>Tru64 UNIX</></>
    <listitem>
     <!--
<para>
      <acronym>PIC</acronym> is the default, so the compilation command
      is the usual one.  <command>ld</command> with special options is
      used to do the linking.
<programlisting>
cc -c foo.c
ld -shared -expect_unresolved '*' -o foo.so foo.o
</programlisting>
      The same procedure is used with GCC instead of the system
      compiler; no special options are required.
     </para>
-->
<para>
<acronym>PIC</acronym>是缺省，不需要使用特殊的编译器选项。带特殊选项的<command>ld</command>用于链接：
<programlisting>
cc -c foo.c
ld -shared -expect_unresolved '*' -o foo.so foo.o
</programlisting>
用 GCC 代替系统编译器时的过程是一样的；不需要特殊的选项。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><systemitem class="osname">UnixWare</></term>
    <indexterm><primary>UnixWare</><secondary>shared library</></>
    <listitem>
     <!--
<para>
      The compiler flag to create <acronym>PIC</acronym> is <option>-K
      PIC</option> with the SCO compiler and <option>-fpic</option>
      with <productname>GCC</productname>.  To link shared libraries,
      the compiler option is <option>-G</option> with the SCO compiler
      and <option>-shared</option> with
      <productname>GCC</productname>.
<programlisting>
cc -K PIC -c foo.c
cc -G -o foo.so foo.o
</programlisting>
      or
<programlisting>
gcc -fpic -c foo.c
gcc -shared -o foo.so foo.o
</programlisting>
     </para>
-->
<para>
用 SCO 编译器时创建<acronym>PIC</acronym>的编译器标志是<option>-K PIC</option>；
用<productname>GCC</productname>编译器时创建<acronym>PIC</acronym>的编译器标志是
<option>-fpic</option>。链接共享库时 SCO 编译器用<option>-G</option>而<productname>GCC</productname>
使用<option>-shared</option>。
<programlisting>
cc -K PIC -c foo.c
cc -G -o foo.so foo.o
</programlisting>
或
<programlisting>
gcc -fpic -c foo.c
gcc -shared -o foo.so foo.o
</programlisting>
</para>
    </listitem>
   </varlistentry>

  </variablelist>

 <tip>
  <!--
<para>
   If this is too complicated for you, you should consider using
   <ulink url="http://www.gnu.org/software/libtool/">
   <productname>GNU Libtool</productname></ulink>,
   which hides the platform differences behind a uniform interface.
  </para>
-->
<para>
如果你觉得这些步骤实在太复杂，那么你应该考虑使用<ulink url="http://www.gnu.org/software/libtool/">
<productname>GNU Libtool</productname></ulink>，它把平台的差异隐藏在了一个统一的接口里。
</para>
 </tip>

 <!--
<para>
  The resulting shared library file can then be loaded into
  <productname>PostgreSQL</productname>.  When specifying the file name
  to the <command>CREATE FUNCTION</command> command, one must give it
  the name of the shared library file, not the intermediate object file.
  Note that the system's standard shared-library extension (usually
  <literal>.so</literal> or <literal>.sl</literal>) can be omitted from
  the <command>CREATE FUNCTION</command> command, and normally should
  be omitted for best portability.
 </para>
-->
<para>
生成的共享库文件然后就可以加载到<productname>PostgreSQL</productname>里面去了。
在给<command>CREATE FUNCTION</command>命令声明文件名的时候，
必须声明共享库文件的名字而不是中间目标文件的名字。
请注意你可以在<command>CREATE FUNCTION</command>命令上忽略系统标准的共享库扩展名(通常是
<literal>.so</literal>或<literal>.sl</literal>)，并且出于最佳的兼容性考虑也应该忽略。
</para>

 <!--
<para>
  Refer back to <xref linkend="xfunc-c-dynload"> about where the
  server expects to find the shared library files.
 </para>
-->
<para>
回头看看<xref linkend="xfunc-c-dynload">获取有关服务器预期在哪里找到共享库的信息。
</para>

<!--
Under AIX, object files are compiled normally but building the shared
library requires a couple of steps.  First, create the object file:
.nf
cc <other flags> -c foo.c
.fi
You must then create a symbol \*(lqexports\*(rq file for the object
file:
.nf
mkldexport foo.o `pwd` &gt; foo.exp
.fi
Finally, you can create the shared library:
.nf
ld <other flags> -H512 -T512 -o foo.so -e _nostart \e
   -bI:.../lib/postgres.exp -bE:foo.exp foo.o \e
   -lm -lc 2>/dev/null
.fi
  -->

</sect2>
