<!-- doc/src/sgml/bki.sgml -->

<chapter id="bki">
 <!-- <title><acronym>BKI</acronym> Backend Interface</title> -->
<title><acronym>BKI</acronym>后端接口</title>
 <!--
<para>
  Backend Interface (<acronym>BKI</acronym>) files are scripts in a
  special language that is understood by the
  <productname>PostgreSQL</productname> backend when running in the
  <quote>bootstrap</quote> mode.  The bootstrap mode allows system catalogs
  to be created and filled from scratch, whereas ordinary SQL commands
  require the catalogs to exist already.
  <acronym>BKI</acronym> files can therefore be used to create the
  database system in the first place.  (And they are probably not
  useful for anything else.)
 </para>
-->
<para>
后端接口(<acronym>BKI</acronym>)文件是一些用特殊语言写的脚本，这些脚本是
<productname>PostgreSQL</productname>后端能够理解的，以特殊的 <quote>bootstrap</quote>
(引导)模式运行，这种模式允许在不存在系统表的零初始条件下执行数据库函数，
而普通的 SQL 命令要求系统表必须存在。因此<acronym>BKI</acronym>
文件可以用于在第一时间创建数据库系统。（可能除此以外也没有其它用处。）
</para>

 <!--
<para>
  <application>initdb</application> uses a <acronym>BKI</acronym> file
  to do part of its job when creating a new database cluster.  The
  input file used by <application>initdb</application> is created as
  part of building and installing <productname>PostgreSQL</productname>
  by a program named <filename>genbki.pl</filename>, which reads some
  specially formatted C header files in the <filename>src/include/catalog/</>
  directory of the source tree.  The created <acronym>BKI</acronym> file
  is called <filename>postgres.bki</filename> and is
  normally installed in the
  <filename>share</filename> subdirectory of the installation tree.
 </para>
-->
<para>
在创建一个新的数据库集群的时候，<application>initdb</application>就是使用<acronym>BKI</acronym>
文件来完成其工作的一部分。<application>initdb</application>使用的输入的文件是作为编译和安装
<productname>PostgreSQL</productname>的一部分，由一个叫<filename>genbki.pl</filename>
的程序创建的，这个程序读取源代码树目录的<filename>src/include/catalog/</>
目录里面的几个特殊格式的 C 头文件。生成的<acronym>BKI</acronym>文件叫<filename>postgres.bki</filename>
并且通常安装在安装树里的<filename>share</filename>子目录。
</para>

 <!--
<para>
  Related information can be found in the documentation for
  <application>initdb</application>.
 </para>
-->
<para>
相关的信息可以在有关<application>initdb</application>的文档中找到。
</para>

 <sect1 id="bki-format">
  <!-- <title><acronym>BKI</acronym> File Format</title> -->
<title><acronym>BKI</acronym> 文件格式</title>
  <!--
<para>
   This section describes how the <productname>PostgreSQL</productname>
   backend interprets <acronym>BKI</acronym> files.  This description
   will be easier to understand if the <filename>postgres.bki</filename>
   file is at hand as an example.
  </para>
-->
<para>
本节描述<productname>PostgreSQL</productname>后端是如何理解<acronym>BKI</acronym>文件。
如果把<filename>postgres.bki</filename>文件拿来做为例子，这些描述会变得容易理解些。
</para>

  <!--
<para>
   <acronym>BKI</acronym> input consists of a sequence of commands.  Commands are made up
   of a number of tokens, depending on the syntax of the command.
   Tokens are usually separated by whitespace, but need not be if
   there is no ambiguity.  There is no special command separator; the
   next token that syntactically cannot belong to the preceding
   command starts a new one.  (Usually you would put a new command on
   a new line, for clarity.)  Tokens can be certain key words, special
   characters (parentheses, commas, etc.), numbers, or double-quoted
   strings.  Everything is case sensitive.
  </para>
-->
<para>
<acronym>BKI</acronym>输入是由一系列命令组成的。命令是由一些记号组成的，
具体是什么由命令语法决定。记号通常是用空白分隔的，但是如果没有歧义的话可以不要。
没有什么特殊的命令分隔符；语法上无法属于前面命令的记号开始新的一条命令。
（通常你会把一条新的命令放在新的一行上以保持清晰。）记号可以是某些关键字，
特殊字符(圆括弧，逗号等)，数字，或者双引号字符串。所有东西都是大小写敏感的。
</para>

  <!--
<para>
   Lines starting with <literal>#</literal> are ignored.
  </para>
-->
<para>
以<literal>#</literal>开头的行被忽略。
</para>

 </sect1>

 <sect1 id="bki-commands">
  <!-- <title><acronym>BKI</acronym> Commands</title> -->
<title><acronym>BKI</acronym> 命令</title>
  <variablelist>
   <varlistentry>
    <term>
     <literal>create</>
     <replaceable class="parameter">tablename</replaceable>
     <replaceable class="parameter">tableoid</replaceable>
     <optional><literal>bootstrap</></optional>
     <optional><literal>shared_relation</></optional>
     <optional><literal>without_oids</></optional>
     <optional><literal>rowtype_oid</> <replaceable>oid</></optional>
     (<replaceable class="parameter">name1</replaceable> =
     <replaceable class="parameter">type1</replaceable> <optional>,
     <replaceable class="parameter">name2</replaceable> = <replaceable
     class="parameter">type2</replaceable>, ...</optional>)
    </term>

    <listitem>
     <!--
<para>
      Create a table named <replaceable
      class="parameter">tablename</replaceable>, and having the OID
      <replaceable class="parameter">tableoid</replaceable>,
      with the columns given in parentheses.
     </para>
-->
<para>
创建一个名为<replaceable class="parameter">tablename</replaceable>并且 OID 为
<replaceable class="parameter">tableoid</replaceable>的表，表字段在圆括弧中给出。
</para>

     <!--
<para>
      The following column types are supported directly by
      <filename>bootstrap.c</>: <type>bool</type>,
      <type>bytea</type>, <type>char</type> (1 byte),
      <type>name</type>, <type>int2</type>,
      <type>int4</type>, <type>regproc</type>, <type>regclass</type>,
      <type>regtype</type>, <type>text</type>,
      <type>oid</type>, <type>tid</type>, <type>xid</type>,
      <type>cid</type>, <type>int2vector</type>, <type>oidvector</type>,
      <type>_int4</type> (array), <type>_text</type> (array),
      <type>_oid</type> (array), <type>_char</type> (array),
      <type>_aclitem</type> (array).  Although it is possible to create
      tables containing columns of other types, this cannot be done until
      after <structname>pg_type</> has been created and filled with
      appropriate entries.  (That effectively means that only these
      column types can be used in bootstrapped tables, but non-bootstrap
      catalogs can contain any built-in type.)
     </para>
-->
<para>
<filename>bootstrap.c</>直接支持下列字段类型：<type>bool</type>,<type>bytea</type>, <type>char</type> (1 字节),
<type>name</type>, <type>int2</type>,<type>int4</type>, <type>regproc</type>, <type>regclass</type>,
<type>regtype</type>, <type>text</type>,<type>oid</type>, <type>tid</type>, <type>xid</type>,
<type>cid</type>, <type>int2vector</type>, <type>oidvector</type>, <type>_int4</type>(数组),
<type>_text</type>(数组),<type>_oid</type>(数组),<type>_char</type>(数组),<type>_aclitem</type>(数组)。
尽管可以创建包含其它类型字段的表，但是只有在创建完<structname>pg_type</>并且填充了合适的记录之后才行。
这实际上就意味着在系统初始化表中，只能使用这些字段类型，而非系统初始化表可以使用任意内置类型。
</para>

     <!--
<para>
      When <literal>bootstrap</> is specified,
      the table will only be created on disk; nothing is entered into
      <structname>pg_class</structname>,
      <structname>pg_attribute</structname>, etc, for it.  Thus the
      table will not be accessible by ordinary SQL operations until
      such entries are made the hard way (with <literal>insert</>
      commands).  This option is used for creating
      <structname>pg_class</structname> etc themselves.
     </para>
-->
<para>
如果声明了<literal>bootstrap</>，那么将只在磁盘上创建表；不会向<structname>pg_class</structname>,
<structname>pg_attribute</structname>等系统表里面输入任何东西。因此这样的表将无法被普通的 SQL 操作访问，
直到那些记录用硬办法(用<literal>insert</>命令)填入。这个选项用于创建<structname>pg_class</structname>等自身。
</para>

     <!--
<para>
      The table is created as shared if <literal>shared_relation</> is
      specified.
      It will have OIDs unless <literal>without_oids</> is specified.
      The table's row type OID (<structname>pg_type</> OID) can optionally
      be specified via the <literal>rowtype_oid</> clause; if not specified,
      an OID is automatically generated for it.  (The <literal>rowtype_oid</>
      clause is useless if <literal>bootstrap</> is specified, but it can be
      provided anyway for documentation.)
     </para>
-->
<para>
如果声明了<literal>shared_relation</>，那么表就作为共享表创建。除非声明了<literal>without_oids</>，
否则将会有 OID 。表的行类型OID（(<structname>pg_type</> OID）可以可选的通过<literal>rowtype_oid</>
子句声明；如果没有声明，会自动为表生成一个OID。（如果声明了<literal>bootstrap</>，那么
<literal>rowtype_oid</>子句是没有用的，但是它可以在文档中给出。）
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <literal>open</> <replaceable class="parameter">tablename</replaceable>
    </term>

    <listitem>
     <!--
<para>
      Open the table named
      <replaceable class="parameter">tablename</replaceable>
      for insertion of data.  Any currently open table is closed.
     </para>
-->
<para>
打开一个名为<replaceable class="parameter">tablename</replaceable>的表，准备插入数据。
任何当前已经打开的表都会被关闭。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <literal>close</> <optional><replaceable class="parameter">tablename</replaceable></optional>
    </term>

    <listitem>
     <!--
<para>
      Close the open table.  The name of the table can be given as a
      cross-check, but this is not required.
     </para>
-->
<para>
关闭打开的表。给出的表名用于交叉检查，但并不是必须的。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <literal>insert</> <optional><literal>OID =</> <replaceable class="parameter">oid_value</replaceable></optional> <literal>(</> <replaceable class="parameter">value1</replaceable> <replaceable class="parameter">value2</replaceable> ... <literal>)</>
    </term>

    <listitem>
     <!--
<para>
      Insert a new row into the open table using <replaceable
      class="parameter">value1</replaceable>, <replaceable
      class="parameter">value2</replaceable>, etc., for its column
      values and <replaceable
      class="parameter">oid_value</replaceable> for its OID.  If
      <replaceable class="parameter">oid_value</replaceable> is zero
      (0) or the clause is omitted, and the table has OIDs, then the
      next available OID is assigned.
     </para>
-->
<para>
如果<replaceable class="parameter">oid_value</replaceable>为零，那么用 
<replaceable class="parameter">value1</replaceable>,
<replaceable class="parameter">value2</replaceable>等作为字段值以及
<replaceable class="parameter">oid_value</replaceable>作为其 OID(对象标识)向打开的表插入一条新记录，
否则省略子句，而表则拥有 OID ，并赋予下一个可用的 OID 数值。
</para>

     <!--
<para>
      NULL values can be specified using the special key word
      <literal>_null_</literal>.  Values containing spaces must be
      double quoted.
     </para>
-->
<para>
NULL 可以用特殊的关键字<literal>_null_</literal>声明。包含空白的值必须用双引号栝起。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <literal>declare</> <optional><literal>unique</></optional>
     <literal>index</> <replaceable class="parameter">indexname</replaceable>
     <replaceable class="parameter">indexoid</replaceable>
     <literal>on</> <replaceable class="parameter">tablename</replaceable>
     <literal>using</> <replaceable class="parameter">amname</replaceable>
     <literal>(</> <replaceable class="parameter">opclass1</replaceable>
     <replaceable class="parameter">name1</replaceable>
     <optional>, ...</optional> <literal>)</>
    </term>

    <listitem>
     <!--
<para>
      Create an index named <replaceable
      class="parameter">indexname</replaceable>, having OID
      <replaceable class="parameter">indexoid</replaceable>,
      on the table named
      <replaceable class="parameter">tablename</replaceable>, using the
      <replaceable class="parameter">amname</replaceable> access
      method.  The fields to index are called <replaceable
      class="parameter">name1</replaceable>, <replaceable
      class="parameter">name2</replaceable> etc., and the operator
      classes to use are <replaceable
      class="parameter">opclass1</replaceable>, <replaceable
      class="parameter">opclass2</replaceable> etc., respectively.
      The index file is created and appropriate catalog entries are
      made for it, but the index contents are not initialized by this command.
     </para>
-->
<para>
在一个叫<replaceable class="parameter">tablename</replaceable>的表上用
<replaceable class="parameter">amname</replaceable>访问方法创建一个 OID 是
<replaceable class="parameter">indexoid</replaceable>的叫做
<replaceable class="parameter">indexname</replaceable>的索引。索引的字段叫
<replaceable class="parameter">name1</replaceable>, <replaceable class="parameter">name2</replaceable>
等，而使用的操作符类分别是<replaceable class="parameter">opclass1</replaceable>, 
<replaceable class="parameter">opclass2</replaceable>等。将会创建索引文件和恰当的系统表记录，
但是索引内容不会被此命令初始化。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <literal>declare toast</>
     <replaceable class="parameter">toasttableoid</replaceable>
     <replaceable class="parameter">toastindexoid</replaceable>
     <literal>on</> <replaceable class="parameter">tablename</replaceable>
    </term>

    <listitem>
     <!--
<para>
      Create a TOAST table for the table named
      <replaceable class="parameter">tablename</replaceable>.
      The TOAST table is assigned OID
      <replaceable class="parameter">toasttableoid</replaceable>
      and its index is assigned OID
      <replaceable class="parameter">toastindexoid</replaceable>.
      As with <literal>declare index</>, filling of the index
      is postponed.
     </para>
-->
<para>
为名为<replaceable class="parameter">tablename</replaceable>的表创建一个 TOAST 表。
这个 TOAST 的 OID 是<replaceable class="parameter">toasttableoid</replaceable>，
其索引的 OID 是<replaceable class="parameter">toastindexoid</replaceable>。
与<literal>declare index</>一样，索引的填充会被推迟。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>build indices</></term>

    <listitem>
     <!--
<para>
      Fill in the indices that have previously been declared.
     </para>
-->
<para>
填充前面声明的索引。
</para>
    </listitem>
   </varlistentry>
  </variablelist>

 </sect1>

 <sect1 id="bki-structure">
  <!-- <title>Structure of the Bootstrap <acronym>BKI</acronym> File</title> -->
<title>系统初始化的<acronym>BKI</acronym>文件的结构</title>
  <!--
<para>
   The <literal>open</> command cannot be used until the tables it uses
   exist and have entries for the table that is to be opened.
   (These minimum tables are <structname>pg_class</>,
   <structname>pg_attribute</>, <structname>pg_proc</>, and
   <structname>pg_type</>.)   To allow those tables themselves to be filled,
   <literal>create</> with the <literal>bootstrap</> option implicitly opens
   the created table for data insertion.
  </para>
-->
<para>
<literal>open</>命令打开的表需要系统事先存在另外一些基本的表，在这些表存在并拥有数据之前，
不能使用 open 命令。这些最低限度必须存在的表是<structname>pg_class</>,<structname>pg_attribute</>,
<structname>pg_proc</>,<structname>pg_type</>。为了允许这些表自己被填充，带<literal>bootstrap</>
选项的<literal>create</>隐含打开所创建的表用于插入数据。
</para>

  <!--
<para>
   Also, the <literal>declare index</> and <literal>declare toast</>
   commands cannot be used until the system catalogs they need have been
   created and filled in.
  </para>
-->
<para>
同样，<literal>declare index</>和<literal>declare toast</>
命令也不能在它们所需要系统表创建并填充之前使用。
</para>

  
<para>
<!--
   Thus, the structure of the <filename>postgres.bki</filename> file has to
   be:
-->
因此，<filename>postgres.bki</filename>文件的结构必须是这样的：
   <orderedlist>
    <listitem>
<!-- 
     <para>
      <literal>create bootstrap</> one of the critical tables
     </para> 
-->
<para>
<literal>create bootstrap</>其中一个关键表
</para>
   </listitem>
    <listitem>
     <!--
<para>
      <literal>insert</> data describing at least the critical tables
     </para>
-->
<para>
<literal>insert</>数据，这些数据至少描述这些关键表本身
</para>
    </listitem>
    <listitem>
     <!--
<para>
      <literal>close</>
     </para>
-->
<para>
<literal>close</>
</para>
    </listitem>
    <listitem>
     <!--
<para>
      Repeat for the other critical tables.
     </para>
-->
<para>
重复创建和填充其它关键表
</para>
    </listitem>
    <listitem>
     <!--
<para>
      <literal>create</> (without <literal>bootstrap</>) a noncritical table
     </para>
-->
<para>
<literal>create</>(不带 <literal>bootstrap</>)一个非关键表
</para>
    </listitem>
    <listitem>
     <!--
<para>
      <literal>open</>
     </para>
-->
<para>
<literal>open</>
</para>
    </listitem>
    <listitem>
     <!--
<para>
      <literal>insert</> desired data
     </para>
-->
<para>
<literal>insert</>需要的数据
</para>
    </listitem>
    <listitem>
     <!--
<para>
      <literal>close</>
     </para>
-->
<para>
<literal>close</>
</para>
    </listitem>
    <listitem>
     <!--
<para>
      Repeat for the other noncritical tables.
     </para>
-->
<para>
重复创建其它非关键表
</para>
    </listitem>
    <listitem>
     <!--
<para>
      Define indexes and toast tables.
     </para>
-->
<para>
定义索引
</para>
    </listitem>
    <listitem>
     <!--
<para>
      <literal>build indices</>
     </para>
-->
<para>
<literal>build indices</>
</para>
    </listitem>
   </orderedlist>
  </para>

  <!--
<para>
   There are doubtless other, undocumented ordering dependencies.
  </para>
-->
<para>
当然，肯定还有其它未记录文档的顺序依赖关系。
</para>
 </sect1>

 <sect1 id="bki-example">
  <!-- <title>Example</title> -->
<title>例子</title>
  <!--
<para>
   The following sequence of commands will create the
   table <literal>test_table</literal> with OID 420, having two columns
   <literal>cola</literal> and <literal>colb</literal> of type
   <type>int4</type> and <type>text</type>, respectively, and insert
   two rows into the table:
<programlisting>
create test_table 420 (cola = int4, colb = text)
open test_table
insert OID=421 ( 1 "value1" )
insert OID=422 ( 2 _null_ )
close test_table
</programlisting>
  </para>
-->
<para>
下面的命令集将创建OID为420名为<literal>test_table</literal>的表，
该表有两个类型分别为<type>int4</type>和<type>text</type>
的字段<literal>cola</literal>和<literal>colb</literal>，
然后向该表插入两行。
<programlisting>
create test_table 420 (cola = int4, colb = text)
open test_table
insert OID=421 ( 1 "value1" )
insert OID=422 ( 2 _null_ )
close test_table
</programlisting>
</para>
 </sect1>
</chapter>
