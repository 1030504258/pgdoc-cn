<!-- doc/src/sgml/pgprewarm.sgml -->

<sect1 id="pgprewarm" xreflabel="pg_prewarm">
 <title>pg_prewarm</title>

 <indexterm zone="pgprewarm">
  <primary>pg_prewarm</primary>
 </indexterm>

 <para>
  <filename>pg_prewarm</filename>模块提供一种方便的方法把关系
  数据载入到操作系统缓冲区或者
  <productname>PostgreSQL</productname>缓冲区。
 </para>

 <sect2>
  <title>函数</title>

<synopsis>
pg_prewarm(regclass, mode text default 'buffer', fork text default 'main',
           first_block int8 default null,
           last_block int8 default null) RETURNS int8
</synopsis>

  <para>
   第一个参数是要预热的关系。第二个参数是要使用的预热方法，下文将会
   进一步讨论。第三个参数是要被预热的关系分叉，通常是<literal>main</literal>。
   第四个参数是要预热的第一个块号（<literal>NULL</literal>也被接受，它等同于
   零）。第五个参数是要预热的最后一个块号（<literal>NULL</literal>表示一直
   预热到关系的最后一个块）。返回值是被预热的块数。
  </para>

  <para>
   有三种可用的预热方法。<literal>prefetch</literal>会向操作系统发出异步
   预取请求（如果支持异步预取），不支持异步预取则抛出一个错误。
   <literal>read</literal>会读取要求范围的块。与<literal>prefetch</literal>
   不同，它是同步的并且在所有平台上都被支持，但是可能较慢。
   <literal>buffer</literal>会把要求范围的块读入道数据库的缓冲区。
  </para>

  <para>
   注意使用任意一种方法尝试预热比能缓存的数量更多的块 &mdash; 使用
   <literal>prefetch</literal>或者<literal>read</literal>（由 OS）或者使用
   <literal>buffer</literal>（由<productname>PostgreSQL</productname>
   ） &mdash; 将很可能导致高编号块被读入时把低编号的块从缓冲区中逐出的情况。
   被预热的数据也不享受对缓冲区替换的特别保护，因此其他系统活动可能会在刚刚
   被预热的块被读入后很快就将它们逐出。反过来，预热也可能把其他数据逐出缓存。
   由于这些原因，预热通常在启动时最有用，那时缓冲大部分都为空。
  </para>
 </sect2>

 <sect2>
  <title>作者</title>

  <para>
   Robert Haas <email>rhaas@postgresql.org</email>
  </para>
 </sect2>

</sect1>
