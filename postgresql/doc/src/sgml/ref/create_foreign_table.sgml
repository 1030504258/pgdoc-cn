<!-- doc/src/sgml/ref/create_foreign_table.sgml -->

<refentry id="SQL-CREATEFOREIGNTABLE">
 <indexterm zone="sql-createforeigntable">
  <primary>CREATE FOREIGN TABLE</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>CREATE FOREIGN TABLE</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE FOREIGN TABLE</refname>
  <refpurpose>定义一个新的外部表</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
CREATE FOREIGN TABLE [ IF NOT EXISTS ] <replaceable class="PARAMETER">table_name</replaceable> ( [
  { <replaceable class="PARAMETER">column_name</replaceable> <replaceable class="PARAMETER">data_type</replaceable> [ OPTIONS ( <replaceable class="PARAMETER">option</replaceable> '<replaceable class="PARAMETER">value</replaceable>' [, ... ] ) ] [ COLLATE <replaceable>collation</replaceable> ] [ <replaceable class="PARAMETER">column_constraint</replaceable> [ ... ] ]
    | <replaceable>table_constraint</replaceable> }
    [, ... ]
] )
[ INHERITS ( <replaceable>parent_table</replaceable> [, ... ] ) ]
  SERVER <replaceable class="parameter">server_name</replaceable>
[ OPTIONS ( <replaceable class="PARAMETER">option</replaceable> '<replaceable class="PARAMETER">value</replaceable>' [, ... ] ) ]

<phrase>其中 <replaceable class="PARAMETER">column_constraint</replaceable> 是：</phrase>

[ CONSTRAINT <replaceable class="PARAMETER">constraint_name</replaceable> ]
{ NOT NULL |
  NULL |
  CHECK ( <replaceable class="PARAMETER">expression</replaceable> ) [ NO INHERIT ] |
  DEFAULT <replaceable>default_expr</replaceable> }

<!-- 
<phrase>and <replaceable class="PARAMETER">table_constraint</replaceable> is:</phrase>
 -->
<phrase><replaceable class="PARAMETER">table_constraint</replaceable> 是:</phrase>

[ CONSTRAINT <replaceable class="PARAMETER">constraint_name</replaceable> ]
CHECK ( <replaceable class="PARAMETER">expression</replaceable> ) [ NO INHERIT ]
</synopsis>
 </refsynopsisdiv>

 <refsect1 id="SQL-CREATEFOREIGNTABLE-description">
  <title>描述</title>

  <para>
   <command>CREATE FOREIGN TABLE</command>在当前数据库中创建
   一个新的外部表。该表将由发出这个命令的用户所拥有。
  </para>

  <para>
   如果给定了一个模式名称（例如<literal>CREATE FOREIGN TABLE
   myschema.mytable ...</>），那么该表会被创建在指定的模式中。
   否则它会被创建在当前模式中。该外部表的名称必须与同一个模式中
   的任何其他外部表、表、序列、索引、视图或者物化视图区分开来。
  </para>

  <para>
   <command>CREATE FOREIGN TABLE</command>还将自动创建
   一个数据类型来表示该外部表行相应的组合类型。因此，外部表不能和
   同一个模式中任何现有的数据类型同名。
  </para>

  <para>
   要创建一个外部表，你必须具有该外部服务器上的<literal>USAGE</literal>
   特权，以及该表中用到的所有列类型上的<literal>USAGE</literal>特权。
  </para>
 </refsect1>

 <refsect1>
  <title>参数</title>

  <variablelist>

   <varlistentry>
    <term><literal>IF NOT EXISTS</></term>
    <listitem>
     <para>
      已经存在同名关系时不要抛出错误。这种情况下会发出一个提示。注意，
      并不保证已经存在的关系与将要创建的那一个相似。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">table_name</replaceable></term>
    <listitem>
     <para>
      要创建的表的名称（可以被模式限定）。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">column_name</replaceable></term>
    <listitem>
     <para>
      要在新表中创建的列名。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">data_type</replaceable></term>
    <listitem>
     <para>
      该列的数据类型。可以包括数组指示符。更多
      <productname>PostgreSQL</productname>支持的数据类型可见<xref
      linkend="datatype">。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>COLLATE <replaceable>collation</replaceable></literal></term>
    <listitem>
     <!-- 
     <para>
      The <literal>COLLATE</> clause assigns a collation to
      the column (which must be of a collatable data type).
      If not specified, the column data type's default collation is used.
     </para>
     -->
     <para>
      <literal>COLLATE</>子句为该列（必须是一个可排序的数据类型）
      赋予一个排序规则。如果没有指定，则会使用该列的数据类型的默认排序规则。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>INHERITS ( <replaceable>parent_table</replaceable> [, ... ] )</literal></term>
    <listitem>
     <!-- 
     <para>
      The optional <literal>INHERITS</> clause specifies a list of
      tables from which the new foreign table automatically inherits
      all columns.  Parent tables can be plain tables or foreign tables.
      See the similar form of
      <xref linkend="sql-createtable"> for more details.
     </para>
     -->
     <para>
      可选的<literal>INHERITS</>子句指定了一个表的列表，
      新的外部表会自动从中继承所有列。父表可以是普通表或者外部表。
      详见<xref linkend="sql-createtable">的类似形式。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>CONSTRAINT <replaceable class="PARAMETER">constraint_name</replaceable></literal></term>
    <listitem>
     <!-- 
     <para>
      An optional name for a column or table constraint.  If the
      constraint is violated, the constraint name is present in error messages,
      so constraint names like <literal>col must be positive</> can be used
      to communicate helpful constraint information to client applications.
      (Double-quotes are needed to specify constraint names that contain spaces.)
      If a constraint name is not specified, the system generates a name.
     </para>
     -->
     <para>
      一个可选的用于列或者表约束的名字。如果该约束被违背，
      这个约束名字会出现在错误消息中，这样<literal>col must be positive</>
      这种约束名就可以被用来与客户端应用交流有用的约束信息
      （指定包含空格的约束名需要使用双引号）。如果没有指定约束名，
      系统会自动生成一个。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>NOT NULL</></term>
    <listitem>
     <para>
      该列不允许包含空值。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>NULL</></term>
    <listitem>
     <para>
      该列可以包含空值，这是默认值。
     </para>

     <para>
      提供这个子句只是为了兼容非标准的 SQL 数据库。在新的应用中
      不鼓励使用它。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>CHECK ( <replaceable class="PARAMETER">expression</replaceable> ) [ NO INHERIT ] </literal></term>
    <listitem>
     <!-- 
     <para>
      The <literal>CHECK</> clause specifies an expression producing a
      Boolean result which each row in the foreign table is expected
      to satisfy; that is, the expression should produce TRUE or UNKNOWN,
      never FALSE, for all rows in the foreign table.
      A check constraint specified as a column constraint should
      reference that column's value only, while an expression
      appearing in a table constraint can reference multiple columns.
     </para>
     -->
     <para>
      <literal>CHECK</>子句指定一个产生布尔结果的表达式，
      该外部表中的每一行都应该满足该表达式。也就是说，对于该外部表中所有的行，
      这个表达式应该产生 TRUE 或者 UNKNOWN，而不能产生 FALSE。
      被作为列约束指定的检查约束应该只引用该列的值，
      而出现在表约束中的表达式可以引用多列。
     </para>

     <!-- 
     <para>
      Currently, <literal>CHECK</literal> expressions cannot contain
      subqueries nor refer to variables other than columns of the
      current row.  The system column <literal>tableoid</literal>
      may be referenced, but not any other system column.
     </para>
     -->
     <para>
      当前，<literal>CHECK</literal>表达式不能包含子查询，
      也不能引用除当前行的列之外的其他变量。可以引用系统列
      <literal>tableoid</literal>，但是不能引用其他系统列。
     </para>

     <!-- 
     <para>
      A constraint marked with <literal>NO INHERIT</> will not propagate to
      child tables.
     </para>
     -->
     <para>
      被标记为<literal>NO INHERIT</>的约束将不会传播到子表上。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>DEFAULT
    <replaceable>default_expr</replaceable></literal></term>
    <listitem>
     <para>
      <literal>DEFAULT</>子句为包含它的列定义赋予一个默认数据值。该
      值是任意不包含变量的表达式（不允许子查询和对当前表中其他列的交叉
      引用）。默认值表达式的数据类型必须匹配列的数据类型。
     </para>

     <para>
      默认值表达式将被用在任何没有指定列值的插入操作中。如果一列没有
      默认值，则默认值为空值。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">server_name</replaceable></term>
    <listitem>
     <para>
      要用于该外部表的一个现有外部服务器的名称。有关定义一个服务器
      的细节可以参考<xref
      linkend="SQL-CREATESERVER">。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>OPTIONS ( <replaceable class="PARAMETER">option</replaceable> '<replaceable class="PARAMETER">value</replaceable>' [, ...] )</literal></term>
    <listitem>
     <para>
      要与新外部表或者它的一个列相关联的选项。被允许的选项名称和值是与
      每一个外部数据包装器相关的，并且它们会被该外部数据包装器的验证器
      函数验证。不允许重复的选项名称（不过一个表选项和一个列选项重名是
      可以的）。
     </para>
    </listitem>
   </varlistentry>

  </variablelist>

 </refsect1>

 <refsect1>
  <!-- 
  <title>Notes</title>
  -->
  <title>注意</title>

   <!-- 
   <para>
    Constraints on foreign tables (such as <literal>CHECK</>
    or <literal>NOT NULL</> clauses) are not enforced by the
    core <productname>PostgreSQL</> system, and most foreign data wrappers
    do not attempt to enforce them either; that is, the constraint is
    simply assumed to hold true.  There would be little point in such
    enforcement since it would only apply to rows inserted or updated via
    the foreign table, and not to rows modified by other means, such as
    directly on the remote server.  Instead, a constraint attached to a
    foreign table should represent a constraint that is being enforced by
    the remote server.
   </para>
   -->
   <para>
    <productname>PostgreSQL</>核心系统不会强制外部表上的约束
    （ 例如<literal>CHECK</>或<literal>NOT NULL</>子句），
    大部分外部数据封装器也不会尝试强制它们。也就是说，
    这类约束会被简单地认为保持为真。这种强制其实没什么意义，
    因为它只适用于通过该外部表插入或者更新的行，而对通过其他方式修改的行
    （例如直接在远程服务器上修改）没有作用。
    附着在外部表上的约束应该表示由外部服务器强制的一个约束。
   </para>

   <!-- 
   <para>
    Some special-purpose foreign data wrappers might be the only access
    mechanism for the data they access, and in that case it might be
    appropriate for the foreign data wrapper itself to perform constraint
    enforcement.  But you should not assume that a wrapper does that
    unless its documentation says so.
   </para>
   -->
   <para>
    有些特殊目的的外部数据封装器可能是它们所访问的数据的唯一一种访问机制，
    在那种情况下让外部数据封装器本身来执行约束强制可能是合适的。
    但是不应该假设封装器会这样做，除非它的文档说它会。
   </para>

   <!-- 
   <para>
    Although <productname>PostgreSQL</> does not attempt to enforce
    constraints on foreign tables, it does assume that they are correct
    for purposes of query optimization.  If there are rows visible in the
    foreign table that do not satisfy a declared constraint, queries on
    the table might produce incorrect answers.  It is the user's
    responsibility to ensure that the constraint definition matches
    reality.
   </para>
   -->
   <para>
    尽管<productname>PostgreSQL</>不会尝试强制外部表上的约束，
    但它确实假定它们对于查询优化的目的是正确的。
    如果在外部表中有不满足约束的行可见，在该表上的查询可能会产生不正确的回答。
    确保约束定义符合实际是用户的责任。
   </para>
 </refsect1>

 <refsect1 id="SQL-CREATEFOREIGNTABLE-examples">
  <title>示例</title>

  <para>
   创建外部表<structname>films</>，服务器<structname>film_server</>访问它：

<programlisting>
CREATE FOREIGN TABLE films (
    code        char(5) NOT NULL,
    title       varchar(40) NOT NULL,
    did         integer NOT NULL,
    date_prod   date,
    kind        varchar(10),
    len         interval hour to minute
)
SERVER film_server;
</programlisting></para>

 </refsect1>

 <refsect1 id="SQL-CREATEFOREIGNTABLE-compatibility">
  <title id="SQL-CREATEFOREIGNTABLE-compatibility-title">兼容性</title>

  <!-- 
  <para>
   The <command>CREATE FOREIGN TABLE</command> command largely conforms to the
   <acronym>SQL</acronym> standard; however, much as with
   <link linkend="sql-createtable"><command>CREATE TABLE</></link>,
   <literal>NULL</> constraints and zero-column foreign tables are permitted.
   The ability to specify column default values is also
   a <productname>PostgreSQL</> extension.  Table inheritance, in the form
   defined by <productname>PostgreSQL</productname>, is nonstandard.
  </para>
  -->
  <para>
   <command>CREATE FOREIGN TABLE</command>命令大部分符合
   <acronym>SQL</acronym>标准。不过，与
   <link linkend="sql-createtable"><command>CREATE TABLE</></link>
   很相似，它允许<literal>NULL</>约束以及零列外部表。
   指定列默认值的能力也是一种<productname>PostgreSQL</>扩展。
   <productname>PostgreSQL</productname>定义的表继承形式是非标准的。
  </para>

 </refsect1>

 <refsect1>
  <title>另见</title>

  <simplelist type="inline">
   <member><xref linkend="sql-alterforeigntable"></member>
   <member><xref linkend="sql-dropforeigntable"></member>
   <member><xref linkend="sql-createtable"></member>
   <member><xref linkend="sql-createserver"></member>
   <member><xref linkend="sql-importforeignschema"></member>
  </simplelist>
 </refsect1>
</refentry>
