<!--
doc/src/sgml/ref/create_policy.sgml
PostgreSQL documentation
-->

<refentry id="SQL-CREATEPOLICY">
 <indexterm zone="sql-createpolicy">
  <primary>CREATE POLICY</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>CREATE POLICY</refentrytitle>
  <manvolnum>7</manvolnum>
  <!-- 
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
  -->
  <refmiscinfo>SQL - 语句</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE POLICY</refname>
  <!-- 
  <refpurpose>define a new row level security policy for a table</refpurpose>
  -->
  <refpurpose>为表定义新的行级安全策略</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
CREATE POLICY <replaceable class="parameter">name</replaceable> ON <replaceable class="parameter">table_name</replaceable>
    [ FOR { ALL | SELECT | INSERT | UPDATE | DELETE } ]
    [ TO { <replaceable class="parameter">role_name</replaceable> | PUBLIC | CURRENT_USER | SESSION_USER } [, ...] ]
    [ USING ( <replaceable class="parameter">using_expression</replaceable> ) ]
    [ WITH CHECK ( <replaceable class="parameter">check_expression</replaceable> ) ]
</synopsis>
 </refsynopsisdiv>

 <refsect1>
 <!-- 
 <title>Description</title>
 -->
  <title>描述</title>

  <!-- 
  <para>
   The <command>CREATE POLICY</command> command defines a new row-level
   security policy for a table.  Note that row-level security must be
   enabled on the table (using <command>ALTER TABLE ... ENABLE ROW LEVEL
   SECURITY</command>) in order for created policies to be applied.
  </para>
  -->
  <para>
   <command>CREATE POLICY</command>命令为表定义新的行级安全策略。
   注意，必须在表上启用行级安全性（使用
   <command>ALTER TABLE ... ENABLE ROW LEVEL SECURITY</command>）
   才能应用已创建的策略。
  </para>

  <!-- 
  <para>
   A policy grants the permission to select, insert, update, or delete rows
   that match the relevant policy expression.  Existing table rows are
   checked against the expression specified in <literal>USING</literal>,
   while new rows that would be created via <literal>INSERT</literal>
   or <literal>UPDATE</literal> are checked against the expression specified
   in <literal>WITH CHECK</literal>.  When a <literal>USING</literal>
   expression returns true for a given row then that row is visible to the
   user, while if false or null is returned then the row is not visible.
   When a <literal>WITH CHECK</literal> expression returns true for a row
   then that row is inserted or updated, while if false or null is returned
   then an error occurs.
  </para>
  -->
  <para>
   策略授予选择，插入，更新或删除与相关策略表达式匹配的行的权限。
   将根据<literal>USING</literal>中指定的表达式检查现有表行，
   而根据<literal>WITH CHECK</literal>指定的表达式检查将通过
   <literal>INSERT</literal>或<literal>UPDATE</literal>创建的新行。
   当<literal>USING</literal>表达式对给定行返回true时，该行对用户可见，
   而如果返回false或null，则该行不可见。当一个<literal>WITH CHECK</literal>
   表达式对一个行返回true，那么插入或更新该行，而如果返回false或null，那么会发生错误。
  </para>

  <!-- 
  <para>
   For <command>INSERT</command> and <command>UPDATE</command> statements,
   <literal>WITH CHECK</literal> expressions are enforced after
   <literal>BEFORE</literal> triggers are fired, and before any actual data
   modifications are made.  Thus a <literal>BEFORE ROW</literal> trigger may
   modify the data to be inserted, affecting the result of the security
   policy check.  <literal>WITH CHECK</literal> expressions are enforced
   before any other constraints.
  </para>
  -->
  <para>
   对于<command>INSERT</command>和<command>UPDATE</command>语句，
   <literal>WITH CHECK</literal>表达式是在触发<literal>BEFORE</literal>触发器后，
   在实际进行任何数据修改之前强制执行的。因此，<literal>BEFORE ROW</literal>
   触发器可以修改要插入的数据，影响安全策略检查的结果。<literal>WITH CHECK</literal>
   表达式在任何其他约束之前强制执行。
  </para>

  <!-- 
  <para>
   Policy names are per-table.  Therefore, one policy name can be used for many
   different tables and have a definition for each table which is appropriate to
   that table.
  </para>
  -->
  <para>
   策略名称是每表的。因此，一个策略名称可用于许多不同的表，
   并具有适合于该表的每个表的定义。
  </para>

  <!-- 
  <para>
   Policies can be applied for specific commands or for specific roles.  The
   default for newly created policies is that they apply for all commands and
   roles, unless otherwise specified.  If multiple policies apply to a given
   statement, they will be combined using OR (although <literal>ON CONFLICT DO
   UPDATE</> and <literal>INSERT</> policies are not combined in this way, but
   rather enforced as noted at each stage of <literal>ON CONFLICT</> execution).
  </para>
  -->
  <para>
   策略可以应用于特定命令或特定角色。新创建策略的缺省是应用到所有命令和角色，
   除非另有指定。如果多个策略应用到一个给定的语句，则它们将使用OR组合
   (尽管<literal>ON CONFLICT DO UPDATE</>和<literal>INSERT</>策略不以这种方式组合，
   而是强调如<literal>ON CONFLICT</>执行的每个阶段中描述的那样）。
  </para>

<!-- 
  <para>
   For commands that can have both <literal>USING</literal>
   and <literal>WITH CHECK</literal> policies (<literal>ALL</literal>
   and <literal>UPDATE</literal>), if no <literal>WITH CHECK</literal>
   policy is defined, then the <literal>USING</literal> policy will be used
   both for which rows are visible (normal <literal>USING</literal> case)
   and for which rows will be allowed to be added (<literal>WITH
   CHECK</literal> case).
  </para>
-->
  <para>
   对于可以同时具有<literal>USING</literal>和<literal>WITH CHECK</literal>
   策略（<literal>ALL</literal>和<literal>UPDATE</literal>）的命令，
   如果未定义<literal>WITH CHECK</literal>策略，那么<literal>USING</literal>
   策略将用于哪些行可见（正常<literal>USING</literal>情况）
   和允许添加哪些行（<literal>WITH CHECK</literal>情况）。
  </para>

  <!-- 
  <para>
   If row-level security is enabled for a table, but no applicable policies
   exist, a <quote>default deny</> policy is assumed, so that no rows will
   be visible or updatable.
  </para>
  -->
  <para>
   如果为表启用了行级安全性，但没有适用的策略，则会采用<quote>默认拒绝</>策略，
   以使任何行都不可见或可更新。
  </para>
 </refsect1>

 <refsect1>
  <!-- 
  <title>Parameters</title>
  -->
  <title>参数</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="parameter">name</replaceable></term>
    <listitem>
     <!-- 
     <para>
      The name of the policy to be created.  This must be distinct from the
      name of any other policy for the table.
     </para>
     -->
     <para>
      要创建的策略的名称。它必须与表的任何其他策略的名称不同。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">table_name</replaceable></term>
    <listitem>
     <!-- 
     <para>
      The name (optionally schema-qualified) of the table the
      policy applies to.
     </para>
     -->
     <para>
      策略应用到的表的名字（可以有模式限定）。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">command</replaceable></term>
    <listitem>
     <!-- 
     <para>
      The command to which the policy applies.  Valid options are
      <command>ALL</command>, <command>SELECT</command>,
      <command>INSERT</command>, <command>UPDATE</command>,
      and <command>DELETE</command>.
      <command>ALL</command> is the default.
      See below for specifics regarding how these are applied.
     </para>
     -->
     <para>
      策略应用的命令。有效的命令是
      <command>ALL</command>、<command>SELECT</command>、
      <command>INSERT</command>、<command>UPDATE</command>
      和<command>DELETE</command>。
      <command>ALL</command>是缺省。
      有关如何应用这些内容的详细信息，请参见下文。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">role_name</replaceable></term>
    <listitem>
     <!-- 
     <para>
      The role(s) to which the policy is to be applied.  The default is
      <literal>PUBLIC</literal>, which will apply the policy to all roles.
     </para>
     -->
     <para>
      应用策略的角色。默认值为<literal>PUBLIC</literal>，
      它将策略应用于所有角色。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">using_expression</replaceable></term>
    <listitem>
     <!-- 
     <para>
      Any <acronym>SQL</acronym> conditional expression (returning
      <type>boolean</type>).  The conditional expression cannot contain
      any aggregate or window functions.  This expression will be added
      to queries that refer to the table if row level security is enabled.
      Rows for which the expression returns true will be visible.  Any
      rows for which the expression returns false or null will not be
      visible to the user (in a <command>SELECT</>), and will not be
      available for modification (in an <command>UPDATE</>
      or <command>DELETE</>).  Such rows are silently suppressed; no error
      is reported.
     </para>
     -->
     <para>
      任意<acronym>SQL</acronym>条件表达式(返回<type>boolean</type>). 
      该条件表达式不能包含任何聚合或窗口函数。如果启用了行级安全，
      那么该表达式将添加到引用该表的查询中。表达式返回真的行是可见的。
      表达式返回假或空的任何行将不会对用户可见（在一个<command>SELECT</>中）。
      并且不能用于修改（在<command>UPDATE</>或<command>DELETE</>中）。
      这样的行被静默地抑制；没有报告错误。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">check_expression</replaceable></term>
    <listitem>
     <!-- 
     <para>
      Any <acronym>SQL</acronym> conditional expression (returning
      <type>boolean</type>).  The conditional expression cannot contain
      any aggregate or window functions.  This expression will be used in
      <command>INSERT</command> and <command>UPDATE</command> queries against
      the table if row level security is enabled.  Only rows for which the
      expression evaluates to true will be allowed.  An error will be thrown
      if the expression evaluates to false or null for any of the records
      inserted or any of the records that result from the update.  Note that
      the <replaceable class="parameter">check_expression</replaceable> is
      evaluated against the proposed new contents of the row, not the
      original contents.
     </para>
     -->
     <para>
      任何<acronym>SQL</acronym>条件表达式（返回<type>boolean</type>）。
      条件表达式不能包含任何聚合或窗口函数。如果启用了行级安全性，
      则此表达式将用于对表的<command>INSERT</command>和<command>UPDATE</command>查询。
      只允许表达式计算结果为true的行。如果对于插入的任何记录或从更新导致的任何记录，
      表达式的计算结果为false或null时将抛出错误。注意，
      <replaceable class="parameter">check_expression</replaceable>
      是针对所提出的行的新内容而不是原始内容来评估的。
     </para>
    </listitem>
   </varlistentry>

  </variablelist>

 <refsect2>
   <!-- 
   <title>Per-Command Policies</title>
   -->
   <title>每个命令的策略</title>

   <variablelist>

     <varlistentry id="SQL-CREATEPOLICY-ALL">
      <term><literal>ALL</></term>
      <listitem>
       <!-- 
       <para>
         Using <literal>ALL</literal> for a policy means that it will apply
         to all commands, regardless of the type of command.  If an
         <literal>ALL</literal> policy exists and more specific policies
         exist, then both the <literal>ALL</literal> policy and the more
         specific policy (or policies) will be combined using
         OR, as usual for overlapping policies.
         Additionally, <literal>ALL</literal> policies will be applied to
         both the selection side of a query and the modification side, using
         the <literal>USING</literal> expression for both cases if only
         a <literal>USING</literal> expression has been defined.
       </para>
       -->
       <para>
         对策略使用<literal>ALL</literal>意味着它将应用于所有命令，
         而不管命令的类型。如果存在<literal>ALL</literal>
         策略并且存在更具体的策略，则将使用OR来组合<literal>ALL</literal>
         策略和更具体的策略（或多个策略），如同对于重叠策略一样。
         此外，<literal>ALL</literal>策略将应用于查询的选择端和修改端，
         如果只定义了一个<literal>USING</literal>表达式，
         则对这两种情况使用<literal>USING</literal>表达式。
       </para>
       <!-- 
       <para>
         As an example, if an <literal>UPDATE</literal> is issued, then the
         <literal>ALL</literal> policy will be applicable both to what the
         <literal>UPDATE</literal> will be able to select as rows to be
         updated (applying the <literal>USING</literal> expression),
         and to the resulting updated rows, to check if they are permitted
         to be added to the table (applying the <literal>WITH CHECK</literal>
         expression, if defined, and the <literal>USING</literal> expression
         otherwise).  If an <command>INSERT</command>
         or <command>UPDATE</command> command attempts to add rows to the
         table that do not pass the <literal>ALL</literal>
         policy's <literal>WITH CHECK</literal> expression, the entire
         command will be aborted.
       </para>
       -->
       <para>
         作为示例，如果发出<literal>UPDATE</literal>，则<literal>ALL</literal>
         策略将适用于<literal>UPDATE</literal>能够选择为要更新的行
         （应用<literal>USING</literal>表达式），以及适用于导致更新的行，
         以检查它们是否被允许添加到该表（如果已定义，则应用
         <literal>WITH CHECK</literal>表达式，否则应用<literal>USING</literal>
         表达式）。如果<command>INSERT</command>或<command>UPDATE</command>
         命令尝试向没有通过<literal>ALL</literal>策略的
         <literal>WITH CHECK</literal>表达式的表中添加行，则整个命令将被中止。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="SQL-CREATEPOLICY-SELECT">
      <term><literal>SELECT</></term>
      <listitem>
       <!-- 
       <para>
         Using <literal>SELECT</literal> for a policy means that it will apply
         to <literal>SELECT</literal> queries and whenever
         <literal>SELECT</literal> permissions are required on the relation the
         policy is defined for.  The result is that only those records from the
         relation that pass the <literal>SELECT</literal> policy will be
         returned during a <literal>SELECT</literal> query, and that queries
         that require <literal>SELECT</literal> permissions, such as
         <literal>UPDATE</literal>, will also only see those records
         that are allowed by the <literal>SELECT</literal> policy.
         A <literal>SELECT</literal> policy cannot have a <literal>WITH
         CHECK</literal> expression, as it only applies in cases where
         records are being retrieved from the relation.
       </para>
       -->
       <para>
         对策略使用<literal>SELECT</literal>意味着它将应用于
         <literal>SELECT</literal>查询，并且在为其定义策略的关系上需要
         <literal>SELECT</literal>权限。结果是，只有来自通过
         <literal>SELECT</literal>策略的关系的那些记录将在<literal>SELECT</literal>
         查询期间返回，并且需要<literal>SELECT</literal>权限的查询
         （例如<literal>UPDATE</literal>）也将仅看到<literal>SELECT</literal>
         策略允许的那些记录。<literal>SELECT</literal>策略不能有
         <literal>WITH CHECK</literal>表达式，因为它只适用于从关系中检索记录的情况。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="SQL-CREATEPOLICY-INSERT">
      <term><literal>INSERT</></term>
      <listitem>
       <!-- 
       <para>
         Using <literal>INSERT</literal> for a policy means that it will apply
         to <literal>INSERT</literal> commands.  Rows being inserted that do
         not pass this policy will result in a policy violation error, and the
         entire <literal>INSERT</literal> command will be aborted.
         An <literal>INSERT</literal> policy cannot have
         a <literal>USING</literal> expression, as it only applies in cases
         where records are being added to the relation.
       </para>
       -->
       <para>
         对策略使用<literal>INSERT</literal>意味着它将应用于
         <literal>INSERT</literal>命令。如果插入的行未通过此策略，
         则会导致出现策略违规错误，并且整个<literal>INSERT</literal>命令将被中止。
         <literal>INSERT</literal>策略不能具有<literal>USING</literal>表达式，
         因为它仅适用于将记录添加到关系的情况。
       </para>
       <!-- 
       <para>
         Note that <literal>INSERT</literal> with <literal>ON CONFLICT DO
         UPDATE</literal> checks <literal>INSERT</literal> policies'
         <literal>WITH CHECK</literal> expressions only for rows appended
         to the relation by the <literal>INSERT</literal> path.
       </para>
       -->
       <para>
         注意，使用<literal>ON CONFLICT DO UPDATE</literal>的<literal>INSERT</literal>
         仅对由<literal>INSERT</literal>路径附加到关系的行检查
         <literal>INSERT</literal>策略的<literal>WITH CHECK</literal>表达式。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="SQL-CREATEPOLICY-UPDATE">
      <term><literal>UPDATE</></term>
      <listitem>
       <!-- 
       <para>
         Using <literal>UPDATE</literal> for a policy means that it will apply
         to <literal>UPDATE</literal> commands (or auxiliary <literal>ON
         CONFLICT DO UPDATE</literal> clauses of <literal>INSERT</literal>
         commands).  Since <literal>UPDATE</literal> involves pulling an
         existing record and then making changes to some portion (but
         possibly not all) of the record, <literal>UPDATE</literal>
         policies accept both a <literal>USING</literal> expression and
         a <literal>WITH CHECK</literal> expression.
         The <literal>USING</literal> expression determines which records
         the <literal>UPDATE</literal> command will see to operate against,
         while the <literal>WITH CHECK</literal> expression defines which
         modified rows are allowed to be stored back into the relation.
       </para>
       -->
       <para>
         对策略使用<literal>UPDATE</literal>意味着它将应用于
         <literal>UPDATE</literal>命令（或<literal>INSERT</literal>命令的辅助
         <literal>ON CONFLICT DO UPDATE</literal>子句）。
         由于<literal>UPDATE</literal>涉及拉取现有记录，然后对记录的某些部分
         （但可能不是全部）进行更改，<literal>UPDATE</literal>
         策略接受<literal>USING</literal>表达式和<literal>WITH CHECK</literal>
         表达式。<literal>USING</literal>表达式确定<literal>UPDATE</literal>
         命令将对哪些记录进行操作，而<literal>WITH CHECK</literal>
         表达式定义允许哪些修改的行存储回关系。
       </para>

       <!-- 
       <para>
         When an <literal>UPDATE</literal> command is used with a
         <literal>WHERE</literal> clause or a <literal>RETURNING</literal>
         clause, <literal>SELECT</literal> rights are also required on the
         relation being updated and the appropriate <literal>SELECT</literal>
         and <literal>ALL</literal> policies will be combined (using OR for any
         overlapping <literal>SELECT</literal> related policies found) with the
         <literal>USING</literal> clause of the <literal>UPDATE</literal> policy
         using AND.  Therefore, in order for a user to be able to
         <literal>UPDATE</literal> specific rows, the user must have access
         to the row(s) through a <literal>SELECT</literal>
         or <literal>ALL</literal> policy and the row(s) must pass
         the <literal>UPDATE</literal> policy's <literal>USING</>
         expression.
       </para>
       -->
       <para>
         当<literal>UPDATE</literal>命令与<literal>WHERE</literal>
         子句或<literal>RETURNING</literal>子句一起使用时，
         在被更新的关系上也需要<literal>SELECT</literal>权限，
         并且合适的<literal>SELECT</literal>和<literal>ALL</literal>
         策略将使用AND与<literal>UPDATE</literal>策略的
         <literal>USING</literal>子句组合（对于发现的任何重叠的
         <literal>SELECT</literal>相关策略，使用OR）。因此，
         为了使用户能够<literal>UPDATE</literal>特定行，
         用户必须通过<literal>SELECT</literal>或<literal>ALL</literal>
         策略访问该行，并且该行必须通过<literal>UPDATE</literal>
         策略的<literal>USING</>表达式。
       </para>

       <!-- 
       <para>
         Any rows whose updated values do not pass the
         <literal>WITH CHECK</literal> expression will cause an error, and the
         entire command will be aborted.  If only a <literal>USING</literal>
         clause is specified, then that clause will be used for both
         <literal>USING</literal> and <literal>WITH CHECK</literal> cases.
       </para>
       -->
       <para>
         任何更新的值不通过<literal>WITH CHECK</literal>表达式的行都会导致错误，
         整个命令将被中止。如果只指定了<literal>USING</literal>子句，
         则该子句将用于<literal>USING</literal>和<literal>WITH CHECK</literal>
         两种情况。
       </para>

       <!-- 
       <para>
         Note, however, that <literal>INSERT</literal> with <literal>ON CONFLICT
         DO UPDATE</literal> requires that an <literal>UPDATE</literal> policy
         <literal>USING</literal> expression always be enforced as a
         <literal>WITH CHECK</literal> expression.  This
         <literal>UPDATE</literal> policy must always pass when the
         <literal>UPDATE</literal> path is taken.  Any existing row that
         necessitates that the <literal>UPDATE</literal> path be taken must
         pass the (<literal>UPDATE</literal> or <literal>ALL</literal>)
         <literal>USING</literal> qualifications (combined using OR), which
         are always enforced as <literal>WITH CHECK</literal>
         options in this context.  (The <literal>UPDATE</literal> path will
         <emphasis>never</> be silently avoided; an error will be thrown
         instead.)  Finally, the final row appended to the relation must pass
         any <literal>WITH CHECK</literal> options that a conventional
         <literal>UPDATE</literal> is required to pass.
       </para>
       -->
       <para>
         但是，请注意，使用<literal>ON CONFLICT DO UPDATE</literal>的
         <literal>INSERT</literal>要求将<literal>UPDATE</literal>策略
         <literal>USING</literal>表达式始终强制为<literal>WITH CHECK</literal>
         表达式。此<literal>UPDATE</literal>策略必须在采取<literal>UPDATE</literal>
         路径时始终通过。需要采用<literal>UPDATE</literal>路径的任何现有行必须通过（
         <literal>UPDATE</literal>或<literal>ALL</literal>）<literal>USING</literal>
         资格（使用OR组合），这些资格在此上下文中始终作为<literal>WITH CHECK</literal>
         选项实施。（<literal>UPDATE</literal>路径<emphasis>永远不会</> 默默避免；
         否则将抛出一个错误。）最后，附加到关系的最后一行必须通过传统
         <literal>UPDATE</literal>需要传递的任何<literal>WITH CHECK</literal>选项。        
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="SQL-CREATEPOLICY-DELETE">
      <term><literal>DELETE</></term>
      <listitem>
       <!-- 
       <para>
         Using <literal>DELETE</literal> for a policy means that it will apply
         to <literal>DELETE</literal> commands.  Only rows that pass this
         policy will be seen by a <literal>DELETE</literal> command.  There can
         be rows that are visible through a <literal>SELECT</literal> that are
         not available for deletion, if they do not pass the
         <literal>USING</literal> expression for
         the <literal>DELETE</literal> policy.
       </para>
       -->
       <para>
         对策略使用<literal>DELETE</literal>意味着它将应用于<literal>DELETE</literal>命令。
         只有通过此策略的行才能由<literal>DELETE</literal>命令查看。
         如果没有通过<literal>DELETE</literal>策略的<literal>USING</literal>表达式，
         则通过<literal>SELECT</literal>可以看到不可删除的行。
       </para>

       <!-- 
       <para>
         When a <literal>DELETE</literal> command is used with a
         <literal>WHERE</literal> clause or a <literal>RETURNING</literal>
         clause, <literal>SELECT</literal> rights are also required on the
         relation being updated and the appropriate <literal>SELECT</literal>
         and <literal>ALL</literal> policies will be combined (using OR for any
         overlapping <literal>SELECT</literal> related policies found) with the
         <literal>USING</literal> clause of the <literal>DELETE</literal> policy
         using AND.  Therefore, in order for a user to be able to
         <literal>DELETE</literal> specific rows, the user must have access
         to the row(s) through a <literal>SELECT</literal>
         or <literal>ALL</literal> policy and the row(s) must pass
         the <literal>DELETE</literal> policy's <literal>USING</>
         expression.
       </para>
       -->
       <para>
         当<literal>DELETE</literal>命令与<literal>WHERE</literal>
         子句或<literal>RETURNING</literal>子句一起使用时，
         在被更新的关系上也需要<literal>SELECT</literal>权限，
         并且合适的<literal>SELECT</literal>和<literal>ALL</literal>
         策略将使用AND与<literal>DELETE</literal>策略的
         <literal>USING</literal>子句组合（对于发现的任何重叠的
         <literal>SELECT</literal>相关策略，使用OR）。因此，
         为了使用户能够<literal>DELETE</literal>特定的行，
         用户必须通过<literal>SELECT</literal>或<literal>ALL</literal>
         策略访问该行，并且该行必须通过<literal>DELETE</literal>策略的
         <literal>USING</>表达式。
       </para>

       <!-- 
       <para>
         A <literal>DELETE</literal> policy cannot have a <literal>WITH
         CHECK</literal> expression, as it only applies in cases where
         records are being deleted from the relation, so that there is no
         new row to check.
       </para>
       -->
       <para>
         <literal>DELETE</literal>策略不能有<literal>WITH CHECK</literal>
         表达式，因为它仅适用于从关系中删除记录的情况，因此没有要检查的新行。
       </para>
      </listitem>
     </varlistentry>

   </variablelist>
  </refsect2>
 </refsect1>

 <refsect1>
  <!-- 
  <title>Notes</title>
  -->
  <title>注意</title>

  <!-- 
  <para>
   You must be the owner of a table to create or change policies for it.
  </para>
  -->
  <para>
   您必须是表的所有者才能为其创建或更改策略。
  </para>

  <!-- 
  <para>
   While policies will be applied for explicit queries against tables
   in the database, they are not applied when the system is performing internal
   referential integrity checks or validating constraints.  This means there are
   indirect ways to determine that a given value exists.  An example of this is
   attempting to insert a duplicate value into a column that is a primary key
   or has a unique constraint.  If the insert fails then the user can infer that
   the value already exists. (This example assumes that the user is permitted by
   policy to insert records which they are not allowed to see.)  Another example
   is where a user is allowed to insert into a table which references another,
   otherwise hidden table.  Existence can be determined by the user inserting
   values into the referencing table, where success would indicate that the
   value exists in the referenced table.  These issues can be addressed by
   carefully crafting policies to prevent users from being able to insert,
   delete, or update records at all which might possibly indicate a value they
   are not otherwise able to see, or by using generated values (e.g., surrogate
   keys) instead of keys with external meanings.
  </para>
  -->
  <para>
   虽然策略将应用于针对数据库中的表的显式查询，
   但是当系统执行内部参照完整性检查或验证约束时，不应用策略。
   这意味着存在确定给定值存在的间接方式。
   一个示例是尝试将重复值插入到作为主键或具有唯一约束的列中。如果插入失败，
   则用户可以推断该值已经存在。（此示例假设用户被策略允许插入他们看不到的记录。）
   另一个示例是允许用户插入到引用另一个否则隐藏表的表中。
   可以由用户将值插入引用表中来确定存在，其中成功将指示该值存在于引用的表中。
   这些问题可以通过仔细制定策略来解决，以防止用户能够插入，
   删除或更新所有可能指示他们无法看到的值的记录，或通过使用生成的值
   （例如，代理键）而不是具有外部意义的键。
  </para>

  <!-- 
  <para>
   Generally, the system will enforce filter conditions imposed using
   security policies prior to qualifications that appear in user queries,
   in order to prevent inadvertent exposure of the protected data to
   user-defined functions which might not be trustworthy.  However,
   functions and operators marked by the system (or the system
   administrator) as <literal>LEAKPROOF</literal> may be evaluated before
   policy expressions, as they are assumed to be trustworthy.
  </para>
  -->
  <para>
   通常，系统将使用出现在用户查询中的资格之前的安全策略强制实施过滤条件，
   以便防止受保护数据无意中暴露给可能不可信的用户定义的功能。
   然而，由系统（或系统管理员）标记为<literal>LEAKPROOF</literal>
   的函数和运算符可以在策略表达式之前被评估，因为它们被假定为可信赖的。
  </para>

  <!-- 
  <para>
   Since policy expressions
   are added to the user's query directly, they will be run with the rights of
   the user running the overall query.  Therefore, users who are using a given
   policy must be able to access any tables or functions referenced in the
   expression or they will simply receive a permission denied error when
   attempting to query the table that has row-level security enabled.
   This does not change how views
   work, however.  As with normal queries and views, permission checks and
   policies for the tables which are referenced by a view will use the view
   owner's rights and any policies which apply to the view owner.
  </para>
  -->
  <para>
   由于策略表达式直接添加到用户的查询中，
   因此它们将与运行整体查询的用户的权限一起运行。因此，
   使用给定策略的用户必须能够访问表达式中引用的任何表或函数，
   否则当尝试查询已启用行级安全性的表时，它们将仅接收到权限被拒绝错误。
   但是，这不会改变视图的工作方式。与常规查询和视图一样，
   视图引用的表的权限检查和策略将使用视图所有者的权限和适用于视图所有者的任何策略。
  </para>

  <!-- 
  <para>
   Additional discussion and practical examples can be found
   in <xref linkend="ddl-rowsecurity">.
  </para>
  -->
  <para>
   其他讨论和实际示例可以在<xref linkend="ddl-rowsecurity">中找到。
  </para>

 </refsect1>

 <refsect1>
  <!-- 
  <title>Compatibility</title>
  -->
  <title>兼容性</title>

  <!-- 
  <para>
   <command>CREATE POLICY</command> is a <productname>PostgreSQL</productname>
   extension.
  </para>
  -->
  <para>
   <command>CREATE POLICY</command>是一个<productname>PostgreSQL</productname>
   扩展。
  </para>
 </refsect1>

 <refsect1>
  <!--
  <title>See Also</title>
  -->
  <title>又见</title>

  <simplelist type="inline">
   <member><xref linkend="sql-alterpolicy"></member>
   <member><xref linkend="sql-droppolicy"></member>
   <member><xref linkend="sql-altertable"></member>
  </simplelist>
 </refsect1>

</refentry>
