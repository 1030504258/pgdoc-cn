<!--
doc/src/sgml/ref/create_trigger.sgml
PostgreSQL documentation
-->

<refentry id="SQL-CREATETRIGGER">
 <refmeta>
  <refentrytitle>CREATE TRIGGER</refentrytitle>
  <manvolnum>7</manvolnum>
  <!--
<refmiscinfo>SQL - Language Statements</refmiscinfo>
-->
<refmiscinfo>SQL - 语句</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE TRIGGER</refname>
  <!--
  <refpurpose>define a new trigger</refpurpose>
  -->
  <refpurpose>定义一个新触发器</refpurpose>
 </refnamediv>

 <indexterm zone="sql-createtrigger">
  <primary>CREATE TRIGGER</primary>
 </indexterm>

 <refsynopsisdiv>
<synopsis>
CREATE [ CONSTRAINT ] TRIGGER <replaceable class="PARAMETER">name</replaceable> { BEFORE | AFTER | INSTEAD OF } { <replaceable class="PARAMETER">event</replaceable> [ OR ... ] }
    ON <replaceable class="PARAMETER">table_name</replaceable>
    [ FROM <replaceable class="parameter">referenced_table_name</replaceable> ]
    { NOT DEFERRABLE | [ DEFERRABLE ] { INITIALLY IMMEDIATE | INITIALLY DEFERRED } }
    [ FOR [ EACH ] { ROW | STATEMENT } ]
    [ WHEN ( <replaceable class="parameter">condition</replaceable> ) ]
    EXECUTE PROCEDURE <replaceable class="PARAMETER">function_name</replaceable> ( <replaceable class="PARAMETER">arguments</replaceable> )

<phrase>where <replaceable class="parameter">event</replaceable> can be one of:</phrase>

    INSERT
    UPDATE [ OF <replaceable class="parameter">column_name</replaceable> [, ... ] ]
    DELETE
    TRUNCATE
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <!--
<title>Description</title>
-->
<title>描述</title>

  <!--
<para>
   <command>CREATE TRIGGER</command> creates a new trigger.  The
   trigger will be associated with the specified table or view and will
   execute the specified function <replaceable
   class="parameter">function_name</replaceable> when certain events occur.
  </para>
-->
<para>
<command>CREATE TRIGGER</command>创建一个新的触发器。
触发器将与指定表或视图关联并且将在特定事件发生时执行声明的
<replaceable class="parameter">function_name</replaceable>函数。
</para>

  <!--
<para>
   The trigger can be specified to fire before the
   operation is attempted on a row (before constraints are checked and
   the <command>INSERT</command>, <command>UPDATE</command>, or
   <command>DELETE</command> is attempted); or after the operation has
   completed (after constraints are checked and the
   <command>INSERT</command>, <command>UPDATE</command>, or
   <command>DELETE</command> has completed); or instead of the operation
   (in the case of inserts, updates or deletes on a view).
   If the trigger fires before or instead of the event, the trigger can skip
   the operation for the current row, or change the row being inserted (for
   <command>INSERT</command> and <command>UPDATE</command> operations
   only). If the trigger fires after the event, all changes, including
   the effects of other triggers, are <quote>visible</quote>
   to the trigger.
  </para>
-->
<para>
触发器可以声明为在对记录进行操作之前(在检查约束之前和<command>INSERT</command>、
<command>UPDATE</command>、<command>DELETE</command>执行前)；
或操作完成之后(在检查约束之后和完成<command>INSERT</command>、
<command>UPDATE</command>、<command>UPDATE</command>操作)；或取代操作
（在视图上插入、更新或删除）触发。如果触发器在事件之前或者取代事件，
触发器可能略过当前记录的操作或改变被插入的记录(只对<command>UPDATE</command>
和<command>UPDATE</command>操作有效)。如果触发器在事件之后，
所有更改，包括其他触发器的影响，对触发器都是<quote>可见</quote>的。
</para>

  <!--
<para>
   A trigger that is marked <literal>FOR EACH ROW</literal> is called
   once for every row that the operation modifies. For example, a
   <command>DELETE</command> that affects 10 rows will cause any
   <literal>ON DELETE</literal> triggers on the target relation to be
   called 10 separate times, once for each deleted row. In contrast, a
   trigger that is marked <literal>FOR EACH STATEMENT</literal> only
   executes once for any given operation, regardless of how many rows
   it modifies (in particular, an operation that modifies zero rows
   will still result in the execution of any applicable <literal>FOR
   EACH STATEMENT</literal> triggers).
  </para>
-->
<para>
一个被标记为<literal>FOR EACH ROW</literal>的触发器为操作修改的每一行都调用一次。
比如，一个影响 10 行的<command>DELETE</command>将导致任何在目标关系上的
<literal>ON DELETE</literal>触发器独立调用 10 次，每个被删除的行调用一次。
相比之下，一个被标记为<literal>FOR EACH STATEMENT</literal>的触发器只执行一次，
而不管有多少行被修改。（特别是，一个修改零行的操作仍然会导致合适的
<literal>FOR EACH STATEMENT</literal>触发器被执行。
</para>

  <!--
<para>
   Triggers that are specified to fire <literal>INSTEAD OF</> the trigger
   event must be marked <literal>FOR EACH ROW</>, and can only be defined
   on views. <literal>BEFORE</> and <literal>AFTER</> triggers on a view
   must be marked as <literal>FOR EACH STATEMENT</>.
  </para>
-->
<para>
指定为触发<literal>INSTEAD OF</>触发器事件的触发器必须被标记为
<literal>FOR EACH ROW</>，并且只能在视图上定义。视图上的<literal>BEFORE</>
和<literal>AFTER</>触发器必须被标记为<literal>FOR EACH STATEMENT</>。
</para>

  <!--
<para>
   In addition, triggers may be defined to fire for
   <command>TRUNCATE</command>, though only
   <literal>FOR EACH STATEMENT</literal>.
  </para>
-->
<para>
另外，触发器可能被定义为为<command>TRUNCATE</command>触发，
尽管只有<literal>FOR EACH STATEMENT</literal>。
</para>

  <!--
<para>
   The following table summarizes which types of triggers may be used on
   tables and views:
  </para>
-->
<para>
下面表总结中的触发器类型可能被用在表和视图上：
</para>

  <informaltable id="supported-trigger-types">
   <tgroup cols="4">
    <thead>
     <row>
      <!--
  <entry>When</entry>
      <entry>Event</entry>
      <entry>Row-level</entry>
      <entry>Statement-level</entry>
  -->
  <entry>何时</entry>
      <entry>事件</entry>
      <entry>行级别</entry>
      <entry>语句级别</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry align="center" morerows="1"><literal>BEFORE</></entry>
      <entry align="center"><command>INSERT</>/<command>UPDATE</>/<command>DELETE</></entry>
      <!--
  <entry align="center">Tables</entry>
      <entry align="center">Tables and views</entry>
  -->
  <entry align="center">表</entry>
      <entry align="center">表和视图</entry>
     </row>
     <row>
      <entry align="center"><command>TRUNCATE</></entry>
      <entry align="center">&mdash;</entry>
      <!--
  <entry align="center">Tables</entry> 
  -->
  <entry align="center">表</entry>
     </row>
     <row>
      <entry align="center" morerows="1"><literal>AFTER</></entry>
      <entry align="center"><command>INSERT</>/<command>UPDATE</>/<command>DELETE</></entry>
      <!--
  <entry align="center">Tables</entry>
      <entry align="center">Tables and views</entry>
  -->
  <entry align="center">表</entry>
      <entry align="center">表和视图</entry>
     </row>
     <row>
      <entry align="center"><command>TRUNCATE</></entry>
      <entry align="center">&mdash;</entry>
      <!--
  <entry align="center">Tables</entry> 
  -->
  <entry align="center">表</entry>
     </row>
     <row>
      <entry align="center" morerows="1"><literal>INSTEAD OF</></entry>
      <entry align="center"><command>INSERT</>/<command>UPDATE</>/<command>DELETE</></entry>
      <!--
  <entry align="center">Views</entry>
  -->
  <entry align="center">视图</entry>
      <entry align="center">&mdash;</entry>
     </row>
     <row>
      <entry align="center"><command>TRUNCATE</></entry>
      <entry align="center">&mdash;</entry>
      <entry align="center">&mdash;</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>

  <!--
<para>
   Also, a trigger definition can specify a Boolean <literal>WHEN</>
   condition, which will be tested to see whether the trigger should
   be fired.  In row-level triggers the <literal>WHEN</> condition can
   examine the old and/or new values of columns of the row.  Statement-level
   triggers can also have <literal>WHEN</> conditions, although the feature
   is not so useful for them since the condition cannot refer to any values
   in the table.
  </para>
-->
<para>
还有，触发器定义可以声明一个布尔<literal>WHEN</>条件，用来测试触发器是否应该被触发。
在行级别触发器中，<literal>WHEN</>条件可以检测该行的字段的旧的和/或新值。
语句级别的触发器也可以拥有<literal>WHEN</>条件，尽管该特性对于它们来说不太有用，
因为该条件不能引用表中的任何值。
</para>

  <!--
<para>
   If multiple triggers of the same kind are defined for the same event,
   they will be fired in alphabetical order by name.
  </para>
-->
<para>
如果多个同类型的触发器为同一事件做了定义，那么它们将按照字母顺序被触发。
</para>

  <!--
<para>
   When the <literal>CONSTRAINT</> option is specified, this command creates a
   <firstterm>constraint trigger</>.  This is the same as a regular trigger
   except that the timing of the trigger firing can be adjusted using
   <xref linkend="SQL-SET-CONSTRAINTS">.
   Constraint triggers must be <literal>AFTER ROW</> triggers.  They can
   be fired either at the end of the statement causing the triggering event,
   or at the end of the containing transaction; in the latter case they are
   said to be <firstterm>deferred</>.  A pending deferred-trigger firing can
   also be forced to happen immediately by using <command>SET CONSTRAINTS</>.
   Constraint triggers are expected to raise an exception when the constraints
   they implement are violated.
  </para>
-->
<para>
当声明了<literal>CONSTRAINT</>选项时，这个命令创建一个<firstterm>约束触发器</>。
作为正规触发器也是相同的，除了触发器触发的时间可以使用<xref linkend="SQL-SET-CONSTRAINTS">
调整。约束触发器必须是<literal>AFTER ROW</>触发器。
它们可以在导致触发事件的语句的结束触发，也可以在包含的事务的结束触发；
在后面一种情况下，它们被称为<firstterm>延迟的</>。
一个等待延迟的触发器触发也可以通过使用<command>SET CONSTRAINTS</>强制立即发生。
当它们实现的约束非法时，约束触发器预计会引发一个异常。
</para>

  <!--
<para>
   <command>SELECT</command> does not modify any rows so you cannot
   create <command>SELECT</command> triggers. Rules and views are more
   appropriate in such cases.
  </para>
-->
<para>
<command>SELECT</command>并不更改任何行，因此你不能创建
<command>SELECT</command>触发器。这种场合下规则和视图更合适些。
</para>

  <!--
<para>
   Refer to <xref linkend="triggers"> for more information about triggers.
  </para>
-->
<para>
请参考<xref linkend="triggers">获取更多触发器信息。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>Parameters</title>
-->
<title>参数</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="parameter">name</replaceable></term>
    <listitem>
     <!--
<para>
      The name to give the new trigger.  This must be distinct from
      the name of any other trigger for the same table.
      The name cannot be schema-qualified &mdash; the trigger inherits the
      schema of its table.  For a constraint trigger, this is also the name to
      use when modifying the trigger's behavior using
      <command>SET CONSTRAINTS</>.
     </para>
-->
<para>
赋予新触发器的名称。它必需和任何作用于同一表的触发器不同。
该名字不能是模式修饰的&mdash;触发器继承它的表的模式。
对于约束触发器，当使用<command>SET CONSTRAINTS</>修改触发器的行为时，
这也是要使用的名字。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>BEFORE</literal></term>
    <term><literal>AFTER</literal></term>
    <term><literal>INSTEAD OF</literal></term>
    <listitem>
     <!--
<para>
      Determines whether the function is called before, after, or instead of
      the event.  A constraint trigger can only be specified as
      <literal>AFTER</>.
     </para>
-->
<para>
决定该函数是在事件之前、之后还是取代事件时调用。
约束触发器只能被声明为<literal>AFTER</>。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">event</replaceable></term>
    <listitem>
     <!--
<para>
      One of <literal>INSERT</literal>, <literal>UPDATE</literal>,
      <literal>DELETE</literal>, or <literal>TRUNCATE</literal>;
      this specifies the event that will fire the trigger. Multiple
      events can be specified using <literal>OR</literal>.
     </para>
-->
<para>
<literal>INSERT</literal>、<literal>UPDATE</literal>、<literal>DELETE</literal>
或<literal>TRUNCATE</literal>之一。它声明激发触发器的事件。
多个事件可以用<literal>OR</literal>声明。
</para>

     <!--
<para>
      For <literal>UPDATE</literal> events, it is possible to
      specify a list of columns using this syntax:
<synopsis>
UPDATE OF <replaceable>column_name1</replaceable> [, <replaceable>column_name2</replaceable> ... ]
</synopsis>
      The trigger will only fire if at least one of the listed columns
      is mentioned as a target of the <command>UPDATE</> command.
     </para>
-->
<para>
对于<literal>UPDATE</literal>事件，使用这个语法声明一个字段列表是可能的：
<synopsis>
UPDATE OF <replaceable>column_name1</replaceable> [, <replaceable>column_name2</replaceable> ... ]
</synopsis>
该触发器将只在至少一个列表中的字段在<command>UPDATE</>命令的目标中提及时触发。
</para>

     <!--
<para><literal>INSTEAD OF UPDATE</> events do not support lists of columns.
     </para>
-->
<para>
<literal>INSTEAD OF UPDATE</>事件不支持字段的列表。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">table_name</replaceable></term>
    <listitem>
     <!--
<para>
      The name (optionally schema-qualified) of the table or view the trigger
      is for.
     </para>
-->
<para>
触发器作用的表或视图的名称(可以有模式修饰)
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">referenced_table_name</replaceable></term>
    <listitem>
     <!--
<para>
      The (possibly schema-qualified) name of another table referenced by the
      constraint.  This option is used for foreign-key constraints and is not
      recommended for general use.  This can only be specified for
      constraint triggers.
     </para>
-->
<para>
约束引用的另外一个表的名字（可以有模式修饰）。这个选项用于外键约束，
不推荐用于一般用途。只能为约束触发器指定。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>DEFERRABLE</literal></term>
    <term><literal>NOT DEFERRABLE</literal></term>
    <term><literal>INITIALLY IMMEDIATE</literal></term>
    <term><literal>INITIALLY DEFERRED</literal></term>
    <listitem>
     <!--
<para>
      The default timing of the trigger.
      See the <xref linkend="SQL-CREATETABLE"> documentation for details of
      these constraint options.  This can only be specified for constraint
      triggers.
     </para>
-->
<para>
触发器的默认时机。参阅<xref linkend="SQL-CREATETABLE">文档获取这些约束选项的详细信息。
只能为约束触发器指定。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>FOR EACH ROW</literal></term>
    <term><literal>FOR EACH STATEMENT</literal></term>

    <listitem>
     <!--
<para>
      This specifies whether the trigger procedure should be fired
      once for every row affected by the trigger event, or just once
      per SQL statement. If neither is specified, <literal>FOR EACH
      STATEMENT</literal> is the default.  Constraint triggers can only
      be specified <literal>FOR EACH ROW</>.
     </para>
-->
<para>
这些选项声明触发器过程是否为触发器事件影响的每个行触发一次，
还是只为每条 SQL 语句触发一次。如果都没有声明，
那么<literal>FOR EACH STATEMENT</literal>将是缺省。
约束触发器只能声明为<literal>FOR EACH ROW</>。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">condition</replaceable></term>
    <listitem>
     <!--
<para>
      A Boolean expression that determines whether the trigger function
      will actually be executed.  If <literal>WHEN</> is specified, the
      function will only be called if the <replaceable
      class="parameter">condition</replaceable> returns <literal>true</>.
      In <literal>FOR EACH ROW</literal> triggers, the <literal>WHEN</>
      condition can refer to columns of the old and/or new row values
      by writing <literal>OLD.<replaceable
      class="parameter">column_name</replaceable></literal> or
      <literal>NEW.<replaceable
      class="parameter">column_name</replaceable></literal> respectively.
      Of course, <literal>INSERT</> triggers cannot refer to <literal>OLD</>
      and <literal>DELETE</> triggers cannot refer to <literal>NEW</>.
     </para>
-->
<para>
一个决定触发器函数实际上是否执行的布尔表达式。如果声明了<literal>WHEN</>，
那么该函数只有<replaceable class="parameter">condition</replaceable>
返回<literal>true</>时被调用。在<literal>FOR EACH ROW</literal>触发器中，
<literal>WHEN</>条件可以通过分别写<literal>OLD.<replaceable class="parameter">
column_name</replaceable></literal>或<literal>NEW.<replaceable class="parameter">
column_name</replaceable></literal>参考字段的旧的和/或新的行值。
当然，<literal>INSERT</>触发器不能参考<literal>OLD</>，
<literal>OLD</>触发器不能参考<literal>NEW</>。
</para>

     <!--
<para><literal>INSTEAD OF</> triggers do not support <literal>WHEN</>
      conditions.
     </para>
-->
<para>
<literal>INSTEAD OF</>触发器不支持<literal>WHEN</>条件。
</para>

     <!--
<para>
      Currently, <literal>WHEN</literal> expressions cannot contain
      subqueries.
     </para>
-->
<para>
目前，<literal>WHEN</literal>表达式不能包含子查询。
</para>

     <!--
<para>
      Note that for constraint triggers, evaluation of the <literal>WHEN</>
      condition is not deferred, but occurs immediately after the row update
      operation is performed. If the condition does not evaluate to true then
      the trigger is not queued for deferred execution.
     </para>
-->
<para>
请注意，对于约束触发器，<literal>WHEN</>条件的计算是不延迟的，
只是在行更新操作执行之后立即发生。如果该条件计算不为真，
那么触发器就不排队延迟执行。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">function_name</replaceable></term>
    <listitem>
     <!--
<para>
      A user-supplied function that is declared as taking no arguments
      and returning type <literal>trigger</>, which is executed when
      the trigger fires.
     </para>
-->
<para>
一个用户提供的函数，它声明为不接受参数并且返回<literal>trigger</>类型，
该函数将在触发器被触发时调用。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">arguments</replaceable></term>
    <listitem>
     <!--
<para>
      An optional comma-separated list of arguments to be provided to
      the function when the trigger is executed.  The arguments are
      literal string constants.  Simple names and numeric constants
      can be written here, too, but they will all be converted to
      strings.  Please check the description of the implementation
      language of the trigger function to find out how these arguments
      can be accessed within the function; it might be different from
      normal function arguments.
     </para>
-->
<para>
一个可选的用逗号分隔的参数列表，它将在触发器执行的时候提供给函数。
这些参数是文本字符串常量。也可以在这里写简单的名字和数值常量，
但是它们会被转换成字符串。请检查该触发器函数的实现语言的描述，
找出如何在该函数中访问这些参数；这些参数可能和普通的函数参数不同。
</para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 id="SQL-CREATETRIGGER-notes">
  <!--
<title>Notes</title>
-->
<title>注意</title>

  <!--
<para>
   To create a trigger on a table, the user must have the
   <literal>TRIGGER</literal> privilege on the table.  The user must
   also have <literal>EXECUTE</literal> privilege on the trigger function.
  </para>
-->
<para>
要在表上创建一个触发器，用户必需在该表上有<literal>TRIGGER</literal>权限。
用户也必须在触发器函数上有<literal>EXECUTE</literal>权限。
</para>

  <!--
<para>
   Use <xref linkend="sql-droptrigger"> to remove a trigger.
  </para>
-->
<para>
使用<xref linkend="sql-droptrigger">删除触发器。
</para>

  <!--
<para>
   A column-specific trigger (one defined using the <literal>UPDATE OF
   <replaceable>column_name</replaceable></literal> syntax) will fire when any
   of its columns are listed as targets in the <command>UPDATE</>
   command's <literal>SET</> list.  It is possible for a column's value
   to change even when the trigger is not fired, because changes made to the
   row's contents by <literal>BEFORE UPDATE</> triggers are not considered.
   Conversely, a command such as <literal>UPDATE ... SET x = x ...</>
   will fire a trigger on column <literal>x</>, even though the column's
   value did not change.
  </para>
-->
<para>
字段特有的触发器（使用<literal>UPDATE OF <replaceable>column_name</replaceable></literal>
定义的）将在它的任意字段作为目标列出在<command>UPDATE</>命令的<literal>SET</>
列表中时触发。当触发器没有触发时，字段的值也是有可能改变的，因为通过
<literal>BEFORE UPDATE</>触发器做的行内容的改变是不考虑的。相反的，
命令如<literal>UPDATE ... SET x = x ...</>将触发在字段<literal>x</>
上的触发器，尽管字段的值没有改变。
</para>

  <!--
<para>
   In a <literal>BEFORE</> trigger, the <literal>WHEN</> condition is
   evaluated just before the function is or would be executed, so using
   <literal>WHEN</> is not materially different from testing the same
   condition at the beginning of the trigger function.  Note in particular
   that the <literal>NEW</> row seen by the condition is the current value,
   as possibly modified by earlier triggers.  Also, a <literal>BEFORE</>
   trigger's <literal>WHEN</> condition is not allowed to examine the
   system columns of the <literal>NEW</> row (such as <literal>oid</>),
   because those won't have been set yet.
  </para>
-->
<para>
在<literal>BEFORE</>触发器中，<literal>WHEN</>条件只在函数被或将被执行之前计算，
所以使用<literal>WHEN</>与在触发器函数的开始测试相同的条件并无实质区别。
要特别的注意，条件看到的<literal>NEW</>行是当前的值，可能被早些的触发器修改了。
另外，<literal>BEFORE</>触发器的<literal>WHEN</>条件不允许检测<literal>NEW</>
行的系统字段(比如<literal>oid</>)，因为那些目前还没有设置。
</para>

  <!--
<para>
   In an <literal>AFTER</> trigger, the <literal>WHEN</> condition is
   evaluated just after the row update occurs, and it determines whether an
   event is queued to fire the trigger at the end of statement.  So when an
   <literal>AFTER</> trigger's <literal>WHEN</> condition does not return
   true, it is not necessary to queue an event nor to re-fetch the row at end
   of statement.  This can result in significant speedups in statements that
   modify many rows, if the trigger only needs to be fired for a few of the
   rows.
  </para>
-->
<para>
在<literal>AFTER</>触发器中，<literal>WHEN</>条件只在行更新发生之后计算，
并且它决定一个事件是否在语句的最后排队触发该触发器。所以当<literal>AFTER</>
触发器的<literal>WHEN</>条件没有返回真时，不需要排队一个事件，
也不需要在语句的最后重新抓取行。如果触发器只需要为少量的行触发，
这会导致修改许多行的语句明显的加速。
</para>

  <!--
<para>
   In <productname>PostgreSQL</productname> versions before 7.3, it was
   necessary to declare trigger functions as returning the placeholder
   type <type>opaque</>, rather than <type>trigger</>.  To support loading
   of old dump files, <command>CREATE TRIGGER</> will accept a function
   declared as returning <type>opaque</>, but it will issue a notice and
   change the function's declared return type to <type>trigger</>.
  </para>
-->
<para>
在<productname>PostgreSQL</productname> 7.3以前，
必须把触发器函数声明为返回<type>opaque</>占位类型，而不是<type>trigger</>类型。
为了支持加载老的转储文件，<command>CREATE TRIGGER</>将接受一个声明为返回
<type>opaque</>的函数，但是它将发出一条 NOTICE 并且把函数声明的返回类型改成
<type>trigger</>。
</para>
 </refsect1>

 <refsect1 id="SQL-CREATETRIGGER-examples">
  <!--
<title>Examples</title>
-->
<title>例子</title>

<para>
<!-- 
   Execute the function <function>check_account_update</> whenever
   a row of the table <literal>accounts</> is about to be updated:
-->
当表<literal>accounts</>的一行要被更新时，执行函数
<function>check_account_update</> ：
<programlisting>
CREATE TRIGGER check_update
    BEFORE UPDATE ON accounts
    FOR EACH ROW
    EXECUTE PROCEDURE check_account_update();
</programlisting>
<!-- 
   The same, but only execute the function if column <literal>balance</>
   is specified as a target in the <command>UPDATE</> command:
-->
同样的，但是只在字段<literal>balance</>在<command>UPDATE</>
命令的目标中指定时执行该函数：
<programlisting>
CREATE TRIGGER check_update
    BEFORE UPDATE OF balance ON accounts
    FOR EACH ROW
    EXECUTE PROCEDURE check_account_update();
</programlisting>
<!-- 
   This form only executes the function if column <literal>balance</>
   has in fact changed value:
-->
这种形式只在字段<literal>balance</>实际上改变了值时执行该函数：
<programlisting>
CREATE TRIGGER check_update
    BEFORE UPDATE ON accounts
    FOR EACH ROW
    WHEN (OLD.balance IS DISTINCT FROM NEW.balance)
    EXECUTE PROCEDURE check_account_update();
</programlisting>
<!-- 
   Call a function to log updates of <literal>accounts</>, but only if
   something changed:
-->
只在改变了什么东西时，调用函数记录<literal>accounts</>的更新：
<programlisting>
CREATE TRIGGER log_update
    AFTER UPDATE ON accounts
    FOR EACH ROW
    WHEN (OLD.* IS DISTINCT FROM NEW.*)
    EXECUTE PROCEDURE log_account_update();
</programlisting>
<!-- 
   Execute the function <function>view_insert_row</> for each row to insert
   rows into the tables underlying a view:
-->
为每一行执行函数<function>view_insert_row</>以在一个视图下插入行到表：
<programlisting>
CREATE TRIGGER view_insert
    INSTEAD OF INSERT ON my_view
    FOR EACH ROW
    EXECUTE PROCEDURE view_insert_row();
</programlisting>
  </para>

  <!--
<para>
   <xref linkend="trigger-example"> contains a complete example of a trigger
   function written in C.
  </para>
-->
<para>
<xref linkend="trigger-example">包含一个完整的用C写的触发器函数的例子。
</para>
 </refsect1>

 <refsect1 id="SQL-CREATETRIGGER-compatibility">
  <!--
<title>Compatibility</title>
-->
<title>兼容性</title>

<para>
<!-- 
   The <command>CREATE TRIGGER</command> statement in
   <productname>PostgreSQL</productname> implements a subset of the
   <acronym>SQL</> standard. The following functionalities are currently
   missing:
-->
<productname>PostgreSQL</productname>里的<command>CREATE TRIGGER</command>
语句实现了一个<acronym>SQL</>标准的子集。目前仍然缺少下面的功能：
   <itemizedlist>
    <listitem>
<!-- 
     <para>
      SQL allows you to define aliases for the <quote>old</quote>
      and <quote>new</quote> rows or tables for use in the definition
      of the triggered action (e.g., <literal>CREATE TRIGGER ... ON
      tablename REFERENCING OLD ROW AS somename NEW ROW AS othername
      ...</literal>).  Since <productname>PostgreSQL</productname>
      allows trigger procedures to be written in any number of
      user-defined languages, access to the data is handled in a
      language-specific way.
     </para>
-->
<para>
SQL 允许你为<quote>old</quote>和<quote>new</quote>行或者表定义别名，
用于定义触发器的动作(也就是<literal>CREATE TRIGGER ... ON tablename 
REFERENCING OLD ROW AS somename NEW ROW AS othername ...</literal>)。
因为<productname>PostgreSQL</productname>
允许触发器过程以任意数量的用户定义语言进行书写，
所以访问数据的工作是用和语言相关的方法实现的。
</para>
    </listitem>

    <listitem>
     <!--
<para>
      <productname>PostgreSQL</productname> does not allow the old and new
      tables to be referenced in statement-level triggers, i.e., the tables
      that contain all the old and/or new rows, which are referred to by the
      <literal>OLD TABLE</literal> and <literal>NEW TABLE</literal> clauses in
      the <acronym>SQL</> standard.
     </para>
-->
<para>
<productname>PostgreSQL</productname>不允许旧的和新的表在语句级别的触发器中引用，
也就是，包含所有旧的和/或新的行的表，在<acronym>SQL</>标准中被<literal>OLD TABLE</literal>
和<literal>NEW TABLE</literal>子句提及。
</para>
    </listitem>

    <listitem>
     <!--
<para><productname>PostgreSQL</productname> only allows the execution
      of a user-defined function for the triggered action.  The standard
      allows the execution of a number of other SQL commands, such as
      <command>CREATE TABLE</command>, as the triggered action.  This
      limitation is not hard to work around by creating a user-defined
      function that executes the desired commands.
     </para>
-->
<para>
<productname>PostgreSQL</productname>只允许为触发的动作执行用户定义的函数。
SQL 标准允许执行一些其它的命令，比如拿<command>CREATE TABLE</command>
作为触发器动作。这个限止并不难绕开，只要创建一个执行这些命令的用户定义的函数即可。
</para>
    </listitem>

   </itemizedlist>
  </para>

  <!--
<para>
   SQL specifies that multiple triggers should be fired in
   time-of-creation order.  <productname>PostgreSQL</productname> uses
   name order, which was judged to be more convenient.
  </para>
-->
<para>
SQL 要求多个触发器应该以创建的时间顺序执行。
<productname>PostgreSQL</productname>采用的是按照名字顺序，并认为这样更加方便。
</para>

  <!--
<para>
   SQL specifies that <literal>BEFORE DELETE</literal> triggers on cascaded
   deletes fire <emphasis>after</> the cascaded <literal>DELETE</> completes.
   The <productname>PostgreSQL</productname> behavior is for <literal>BEFORE
   DELETE</literal> to always fire before the delete action, even a cascading
   one.  This is considered more consistent.  There is also nonstandard
   behavior if <literal>BEFORE</literal> triggers modify rows or prevent
   updates during an update that is caused by a referential action.  This can
   lead to constraint violations or stored data that does not honor the
   referential constraint.
  </para>
-->
<para>
SQL 要求必须在级联<literal>DELETE</>完成<emphasis>之后</>再触发级联删除上的
<literal>BEFORE DELETE</literal>触发器。<productname>PostgreSQL</productname>
的行为是<literal>BEFORE DELETE</literal>将永远在删除动作之前触发，
即使对于级联删除也是如此，我们认为这样更一致。如果<literal>BEFORE</literal>
触发器在由引用操作引起的更新期间修改行或阻止更新，仍然存在不标准的行为。
这将导致违反约束或者存储不符合参照完整性的数据。
</para>

  <!--
<para>
   The ability to specify multiple actions for a single trigger using
   <literal>OR</literal> is a <productname>PostgreSQL</> extension of
   the SQL standard.
  </para>
-->
<para>
用<literal>OR</literal>给一个触发器声明多个动作是
<productname>PostgreSQL</>对SQL标准的扩展。
</para>

  <!--
<para>
   The ability to fire triggers for <command>TRUNCATE</command> is a
   <productname>PostgreSQL</> extension of the SQL standard, as is the
   ability to define statement-level triggers on views.
  </para>
-->
<para>
触发触发器<command>TRUNCATE</command>的能力是一个
<productname>PostgreSQL</>对SQL标准的扩展，就像在视图上定义语句级别触发器的能力。
</para>

  <!--
<para>
   <command>CREATE CONSTRAINT TRIGGER</command> is a
   <productname>PostgreSQL</productname> extension of the <acronym>SQL</>
   standard.
  </para>
-->
<para>
<command>CREATE CONSTRAINT TRIGGER</command>是一个
<productname>PostgreSQL</>对<acronym>SQL</>标准的扩展。
</para>

 </refsect1>

 <refsect1>
  <!--
<title>See Also</title>
-->
<title>又见</title>

  <simplelist type="inline">
   <member><xref linkend="sql-altertrigger"></member>
   <member><xref linkend="sql-droptrigger"></member>
   <member><xref linkend="sql-createfunction"></member>
   <member><xref linkend="sql-set-constraints"></member>
  </simplelist>
 </refsect1>
</refentry>
