<!--
doc/src/sgml/ref/alter_opfamily.sgml
PostgreSQL documentation
-->

<refentry id="SQL-ALTEROPFAMILY">
 <refmeta>
  <refentrytitle>ALTER OPERATOR FAMILY</refentrytitle>
  <manvolnum>7</manvolnum>
  <!--
<refmiscinfo>SQL - Language Statements</refmiscinfo>
-->
<refmiscinfo>SQL - 语句</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>ALTER OPERATOR FAMILY</refname>
  <!--
  <refpurpose>change the definition of an operator family</refpurpose>
  -->
  <refpurpose>修改操作符族的定义</refpurpose>
 </refnamediv>

 <indexterm zone="sql-alteropfamily">
  <primary>ALTER OPERATOR FAMILY</primary>
 </indexterm>

 <refsynopsisdiv>
<synopsis>
ALTER OPERATOR FAMILY <replaceable>name</replaceable> USING <replaceable class="parameter">index_method</replaceable> ADD
  {  OPERATOR <replaceable class="parameter">strategy_number</replaceable> <replaceable class="parameter">operator_name</replaceable> ( <replaceable class="parameter">op_type</replaceable>, <replaceable class="parameter">op_type</replaceable> ) [ FOR SEARCH | FOR ORDER BY <replaceable class="parameter">sort_family_name</replaceable> ]
   | FUNCTION <replaceable class="parameter">support_number</replaceable> [ ( <replaceable class="parameter">op_type</replaceable> [ , <replaceable class="parameter">op_type</replaceable> ] ) ] <replaceable class="parameter">function_name</replaceable> ( <replaceable class="parameter">argument_type</replaceable> [, ...] )
  } [, ... ]
ALTER OPERATOR FAMILY <replaceable>name</replaceable> USING <replaceable class="parameter">index_method</replaceable> DROP
  {  OPERATOR <replaceable class="parameter">strategy_number</replaceable> ( <replaceable class="parameter">op_type</replaceable> [ , <replaceable class="parameter">op_type</replaceable> ] )
   | FUNCTION <replaceable class="parameter">support_number</replaceable> ( <replaceable class="parameter">op_type</replaceable> [ , <replaceable class="parameter">op_type</replaceable> ] )
  } [, ... ]
ALTER OPERATOR FAMILY <replaceable>name</replaceable> USING <replaceable class="parameter">index_method</replaceable> RENAME TO <replaceable>new_name</replaceable>
ALTER OPERATOR FAMILY <replaceable>name</replaceable> USING <replaceable class="parameter">index_method</replaceable> OWNER TO <replaceable>new_owner</replaceable>
ALTER OPERATOR FAMILY <replaceable>name</replaceable> USING <replaceable class="parameter">index_method</replaceable> SET SCHEMA <replaceable>new_schema</replaceable>
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <!--
<title>Description</title>
-->
<title>描述</title>

  <!--
<para>
   <command>ALTER OPERATOR FAMILY</command> changes the definition of
   an operator family.  You can add operators and support functions
   to the family, remove them from the family,
   or change the family's name or owner.
  </para>
-->
<para>
<command>ALTER OPERATOR FAMILY</command>修改一个操作符族的定义。
你可以添加操作符和支持函数到该族、从该族中删除它们或修改该族的名字或所有者。
</para>

  <!--
<para>
   When operators and support functions are added to a family with
   <command>ALTER OPERATOR FAMILY</command>, they are not part of any
   specific operator class within the family, but are just <quote>loose</>
   within the family.  This indicates that these operators and functions
   are compatible with the family's semantics, but are not required for
   correct functioning of any specific index.  (Operators and functions
   that are so required should be declared as part of an operator class,
   instead; see <xref linkend="sql-createopclass">.)
   <productname>PostgreSQL</productname> will allow loose members of a
   family to be dropped from the family at any time, but members of an
   operator class cannot be dropped without dropping the whole class and
   any indexes that depend on it.
   Typically, single-data-type operators
   and functions are part of operator classes because they are needed to
   support an index on that specific data type, while cross-data-type
   operators and functions are made loose members of the family.
  </para>
-->
<para>
当使用<command>ALTER OPERATOR FAMILY</command>添加操作符和支持函数到一个族时，
它们不是该操作符族中任意指定操作符类的一部分，只是<quote>松散</>在该族中。
这表明这些操作符和函数与该族的语义兼容，但不是正确运行任何指定索引的所需。
（操作符和函数要成为索引的所需，应该被声明为一个操作符类的一部分；参阅
<xref linkend="sql-createopclass">。）<productname>PostgreSQL</productname>
将允许一个族的松散成员在任何时候被从该族中删除，但是操作符类的成员不能被删除，
除非删除整个类和任何依赖于它的索引。典型的，单数据类型操作符和函数是操作符类的一部分，
因为需要它们支持一个特定数据类型的索引，而交叉数据类型操作符和函数由族的松散成员组成。
</para>

  <!--
<para>
   You must be a superuser to use <command>ALTER OPERATOR FAMILY</>.
   (This restriction is made because an erroneous operator family definition
   could confuse or even crash the server.)
  </para>
-->
<para>
要使用<command>ALTER OPERATOR FAMILY</>，你必须是一个超级用户。
（做这个限制是因为一个错误的操作符族定义会混淆或者甚至崩溃服务器。）
</para>

  <!--
<para>
   <command>ALTER OPERATOR FAMILY</command> does not presently check
   whether the operator family definition includes all the operators and
   functions required by the index method, nor whether the operators and
   functions form a self-consistent set.  It is the user's
   responsibility to define a valid operator family.
  </para>
-->
<para>
<command>ALTER OPERATOR FAMILY</command>
目前并不检查操作符族定义是否包括索引方法所需的所有操作符和函数，
也不检查操作符和函数是否来自一个自相一致的集合。定义一个有效的操作符族是用户的责任。
</para>

  <!--
<para>
   Refer to <xref linkend="xindex"> for further information.
  </para>
-->
<para>
参阅<xref linkend="xindex">获取更多信息。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>Parameters</title>
-->
<title>参数</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="parameter">name</replaceable></term>
    <listitem>
     <!--
<para>
      The name (optionally schema-qualified) of an existing operator
      family.
     </para>
-->
<para>
一个现有操作符族的名字（可以有模式修饰）。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">index_method</replaceable></term>
    <listitem>
     <!--
<para>
      The name of the index method this operator family is for.
     </para>
-->
<para>
使用这个操作符族的索引方法的名字。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">strategy_number</replaceable></term>
    <listitem>
     <!--
<para>
      The index method's strategy number for an operator
      associated with the operator family.
     </para>
-->
<para>
该索引方法的与该操作符族相关的一个操作符的策略数。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">operator_name</replaceable></term>
    <listitem>
     <!--
<para>
      The name (optionally schema-qualified) of an operator associated
      with the operator family.
     </para>
-->
<para>
与该操作符族相关的一个操作符的名字（可以有模式修饰）。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">op_type</replaceable></term>
    <listitem>
     <!--
<para>
      In an <literal>OPERATOR</> clause,
      the operand data type(s) of the operator, or <literal>NONE</> to
      signify a left-unary or right-unary operator.  Unlike the comparable
      syntax in <command>CREATE OPERATOR CLASS</>, the operand data types
      must always be specified.
     </para>
-->
<para>
在一个<literal>OPERATOR</>子句中，该操作符的操作数的数据类型或<literal>NONE</>
表示一个左目或右目操作符。不像<command>CREATE OPERATOR CLASS</>
中可比较的语法，必须总是指定操作数的数据类型。
</para>

     <!--
<para>
      In an <literal>ADD FUNCTION</> clause, the operand data type(s) the
      function is intended to support, if different from
      the input data type(s) of the function.  For B-tree comparison functions
      and hash functions it is not necessary to specify <replaceable
      class="parameter">op_type</replaceable> since the function's input
      data type(s) are always the correct ones to use.  For B-tree sort
      support functions and all functions in GiST, SP-GiST and GIN operator
      classes, it is necessary to specify the operand data type(s) the function
      is to be used with.
     </para>
-->
<para>
在一个<literal>ADD FUNCTION</>子句中，函数的操作数的数据类型如果与该函数的输入数据类型不同，
则打算支持操作数的数据类型。对于B-tree比较函数和哈希函数，不需要指定
<replaceable class="parameter">op_type</replaceable>，
因为函数的输入数据类型总是要使用的正确类型。对于B-tree排序支持函数和所有在GiST、
SP-GiST和GIN操作符类中的函数，必须指定该函数要使用的操作数的数据类型。
</para>

     <!--
<para>
      In a <literal>DROP FUNCTION</> clause, the operand data type(s) the
      function is intended to support must be specified.
     </para>
-->
<para>
在<literal>DROP FUNCTION</>子句中，打算支持的函数的操作数的数据类型必须指定。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">sort_family_name</replaceable></term>
    <listitem>
     <!--
<para>
      The name (optionally schema-qualified) of an existing <literal>btree</literal> operator
      family that describes the sort ordering associated with an ordering
      operator.
     </para>
-->
<para>
描述与一个排序操作符相关的排序顺序的现有<literal>btree</literal>操作符族的名字
（可以有模式修饰）。
</para>

     <!--
<para>
      If neither <literal>FOR SEARCH</> nor <literal>FOR ORDER BY</> is
      specified, <literal>FOR SEARCH</> is the default.
     </para>
-->
<para>
如果既没有指定<literal>FOR SEARCH</>也没有指定<literal>FOR ORDER BY</>，
那么<literal>FOR SEARCH</>是缺省。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">support_number</replaceable></term>
    <listitem>
     <!--
<para>
      The index method's support procedure number for a
      function associated with the operator family.
     </para>
-->
<para>
与该操作符族相关的一个函数的索引方法的支持过程数量。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">function_name</replaceable></term>
    <listitem>
     <!--
<para>
      The name (optionally schema-qualified) of a function that is an
      index method support procedure for the operator family.
     </para>
-->
<para>
该操作符族的索引方法支持过程的函数的名字（可以有模式修饰）。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">argument_type</replaceable></term>
    <listitem>
     <!--
<para>
      The parameter data type(s) of the function.
     </para>
-->
<para>
该函数的参数数据类型。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">new_name</replaceable></term>
    <listitem>
     <!--
<para>
      The new name of the operator family.
     </para>
-->
<para>
操作符族的新名字。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">new_owner</replaceable></term>
    <listitem>
     <!--
<para>
      The new owner of the operator family.
     </para>
-->
<para>
操作符族的新所有者。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">new_schema</replaceable></term>
    <listitem>
     <!--
<para>
      The new schema for the operator family.
     </para>
-->
<para>
操作符族的新模式。
</para>
    </listitem>
   </varlistentry>
 </variablelist>

  <!--
<para>
   The <literal>OPERATOR</> and <literal>FUNCTION</>
   clauses can appear in any order.
  </para>
-->
<para>
<literal>OPERATOR</>和<literal>FUNCTION</>子句可以以任意顺序出现。
</para>

 </refsect1>

 <refsect1>
  <!--
<title>Notes</title>
-->
<title>注意</title>

  <!--
<para>
   Notice that the <literal>DROP</> syntax only specifies the <quote>slot</>
   in the operator family, by strategy or support number and input data
   type(s).  The name of the operator or function occupying the slot is not
   mentioned.  Also, for <literal>DROP FUNCTION</> the type(s) to specify
   are the input data type(s) the function is intended to support; for
   GiST, SP-GiST and GIN indexes this might have nothing to do with the actual
   input argument types of the function.
  </para>
-->
<para>
请注意，<literal>DROP</>语法只指定了操作符族中的<quote>位置</>，
通过策略或支持数和输入数据类型。占领该位置的操作符或函数的名字没有提及。
另外，对于<literal>DROP FUNCTION</>来说，要指定的类型是该函数打算支持的输入数据类型；
对于GiST、SP-GiST和GIN索引来说，可能与该函数的实际输入参数类型无关。
</para>

  <!--
<para>
   Because the index machinery does not check access permissions on functions
   before using them, including a function or operator in an operator family
   is tantamount to granting public execute permission on it.  This is usually
   not an issue for the sorts of functions that are useful in an operator
   family.
  </para>
-->
<para>
因为索引机制在使用函数之前并不检查函数上的访问权限，
包括一个操作符族中的函数或操作符相当于赋予了公共执行权限。
这对于操作符族中有用的函数的种类通常不是一个问题。
</para>

  <!--
<para>
   The operators should not be defined by SQL functions.  A SQL function
   is likely to be inlined into the calling query, which will prevent
   the optimizer from recognizing that the query matches an index.
  </para>
-->
<para>
操作符不应该通过SQL函数定义。一个SQL函数可以内联到调用查询，
这将阻止优化器认识到该查询匹配一个索引。
</para>

  <!--
<para>
   Before <productname>PostgreSQL</productname> 8.4, the <literal>OPERATOR</>
   clause could include a <literal>RECHECK</> option.  This is no longer
   supported because whether an index operator is <quote>lossy</> is now
   determined on-the-fly at run time.  This allows efficient handling of
   cases where an operator might or might not be lossy.
  </para>
-->
<para>
在<productname>PostgreSQL</productname> 8.4之前，<literal>OPERATOR</>子句
会包括一个<literal>RECHECK</>选项。现在不再支持这个了，因为一个索引操作符是否是
<quote>松散的</>决定了运行时的动态。这允许有效的处理操作符可能或可能不是松散的的情况。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>Examples</title>
-->
<title>例子</title>

  <!--
<para>
   The following example command adds cross-data-type operators and
   support functions to an operator family that already contains B-tree
   operator classes for data types <type>int4</> and <type>int2</>.
  </para>
-->
<para>
下列的示例命令添加了跨数据类型的操作符和支持函数到一个操作符族，
该操作符族早已包含数据类型<type>int4</>和<type>int2</>的B-tree操作符类。
</para>

<programlisting>
ALTER OPERATOR FAMILY integer_ops USING btree ADD

  -- int4 vs int2
  OPERATOR 1 &lt; (int4, int2) ,
  OPERATOR 2 &lt;= (int4, int2) ,
  OPERATOR 3 = (int4, int2) ,
  OPERATOR 4 &gt;= (int4, int2) ,
  OPERATOR 5 &gt; (int4, int2) ,
  FUNCTION 1 btint42cmp(int4, int2) ,

  -- int2 vs int4
  OPERATOR 1 &lt; (int2, int4) ,
  OPERATOR 2 &lt;= (int2, int4) ,
  OPERATOR 3 = (int2, int4) ,
  OPERATOR 4 &gt;= (int2, int4) ,
  OPERATOR 5 &gt; (int2, int4) ,
  FUNCTION 1 btint24cmp(int2, int4) ;
</programlisting>

  <!--
<para>
   To remove these entries again:
  </para>
-->
<para>
再次删除这些条目：
</para>

<programlisting>
ALTER OPERATOR FAMILY integer_ops USING btree DROP

  -- int4 vs int2
  OPERATOR 1 (int4, int2) ,
  OPERATOR 2 (int4, int2) ,
  OPERATOR 3 (int4, int2) ,
  OPERATOR 4 (int4, int2) ,
  OPERATOR 5 (int4, int2) ,
  FUNCTION 1 (int4, int2) ,

  -- int2 vs int4
  OPERATOR 1 (int2, int4) ,
  OPERATOR 2 (int2, int4) ,
  OPERATOR 3 (int2, int4) ,
  OPERATOR 4 (int2, int4) ,
  OPERATOR 5 (int2, int4) ,
  FUNCTION 1 (int2, int4) ;
</programlisting>
 </refsect1>

 <refsect1>
  <!--
<title>Compatibility</title>
-->
<title>兼容性</title>

  <!--
<para>
   There is no <command>ALTER OPERATOR FAMILY</command> statement in
   the SQL standard.
  </para>
-->
<para>
SQL标准中没有<command>ALTER OPERATOR FAMILY</command>语句。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>See Also</title>
-->
<title>又见</title>

  <simplelist type="inline">
   <member><xref linkend="sql-createopfamily"></member>
   <member><xref linkend="sql-dropopfamily"></member>
   <member><xref linkend="sql-createopclass"></member>
   <member><xref linkend="sql-alteropclass"></member>
   <member><xref linkend="sql-dropopclass"></member>
  </simplelist>
 </refsect1>
</refentry>
