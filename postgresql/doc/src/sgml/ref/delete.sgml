<!--
doc/src/sgml/ref/delete.sgml
PostgreSQL documentation
-->

<refentry id="SQL-DELETE">
 <refmeta>
  <refentrytitle>DELETE</refentrytitle>
  <manvolnum>7</manvolnum>
  <!--
<refmiscinfo>SQL - Language Statements</refmiscinfo>
-->
<refmiscinfo>SQL - 语句</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>DELETE</refname>
  <!-- 
  <refpurpose>delete rows of a table</refpurpose> 
  -->
  <refpurpose>删除一个表中的行</refpurpose>
 </refnamediv>

 <indexterm zone="sql-delete">
  <primary>DELETE</primary>
 </indexterm>

 <refsynopsisdiv>
<synopsis>
[ WITH [ RECURSIVE ] <replaceable class="parameter">with_query</replaceable> [, ...] ]
DELETE FROM [ ONLY ] <replaceable class="PARAMETER">table_name</replaceable> [ * ] [ [ AS ] <replaceable class="parameter">alias</replaceable> ]
    [ USING <replaceable class="PARAMETER">using_list</replaceable> ]
    [ WHERE <replaceable class="PARAMETER">condition</replaceable> | WHERE CURRENT OF <replaceable class="PARAMETER">cursor_name</replaceable> ]
    [ RETURNING * | <replaceable class="parameter">output_expression</replaceable> [ [ AS ] <replaceable class="parameter">output_name</replaceable> ] [, ...] ]
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <!-- 
  <title>Description</title>
  -->
  <title>描述</title>

  <!--
<para>
   <command>DELETE</command> deletes rows that satisfy the
   <literal>WHERE</literal> clause from the specified table.  If the
   <literal>WHERE</literal> clause is absent, the effect is to delete
   all rows in the table.  The result is a valid, but empty table.
  </para>
-->
<para>
<command>DELETE</command>从指定的表里删除满足<literal>WHERE</literal>子句的行。
如果<literal>WHERE</literal>子句不存在，将删除表中所有行。结果是一个有效的空表。
</para>

   <tip>
    <!--
<para>
     <xref linkend="sql-truncate"> is a
     <productname>PostgreSQL</productname> extension that provides a
     faster mechanism to remove all rows from a table.
    </para>
-->
<para>
<xref linkend="sql-truncate">是一个<productname>PostgreSQL</productname>扩展，
它提供一个更快的从表中删除所有行的机制。
</para>
   </tip>

  <!--
<para>
   There are two ways to delete rows in a table using information
   contained in other tables in the database: using sub-selects, or
   specifying additional tables in the <literal>USING</literal> clause.
   Which technique is more appropriate depends on the specific
   circumstances.
  </para>
-->
<para>
使用数据库中其它表的信息删除某个表中的数据行有两个办法：使用子查询，
或者在<literal>USING</literal>子句中声明额外的表。哪种技巧更合适取决于特定的环境。
</para>

  <!--
<para>
   The optional <literal>RETURNING</> clause causes <command>DELETE</>
   to compute and return value(s) based on each row actually deleted.
   Any expression using the table's columns, and/or columns of other
   tables mentioned in <literal>USING</literal>, can be computed.
   The syntax of the <literal>RETURNING</> list is identical to that of the
   output list of <command>SELECT</>.
  </para>
-->
<para>
可选的<literal>RETURNING</>子句将使得<command>DELETE</>计算并返回实际被删除了的行。
任何使用表字段的表达式和/或<literal>USING</literal>中提到的其他表的字段，
都可以用于计算。<literal>RETURNING</>列表的语法和<command>SELECT</>输出列表的语法相同。
</para>

  <!--
<para>
   You must have the <literal>DELETE</literal> privilege on the table
   to delete from it, as well as the <literal>SELECT</literal>
   privilege for any table in the <literal>USING</literal> clause or
   whose values are read in the <replaceable
   class="parameter">condition</replaceable>.
  </para>
-->
<para>
要对表进行删除，你必须对它有<literal>DELETE</literal>权限，同样也必须有<literal>USING</literal>
子句的表以及<replaceable class="parameter">condition</replaceable>上读取的表的
<literal>SELECT</literal>权限。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>Parameters</title>
-->
<title>参数</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="parameter">with_query</replaceable></term>
    <listitem>
     <!--
<para>
      The <literal>WITH</literal> clause allows you to specify one or more
      subqueries that can be referenced by name in the <command>DELETE</>
      query. See <xref linkend="queries-with"> and <xref linkend="sql-select">
      for details.
     </para>
-->
<para>
<literal>WITH</literal>子句允许指定一个或多个可以通过<command>DELETE</>查询中的名字引用的子查询。
参阅<xref linkend="queries-with">和<xref linkend="sql-select">获取详细信息。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">table_name</replaceable></term>
    <listitem>
     <!--
<para>
      The name (optionally schema-qualified) of the table to delete rows
      from.  If <literal>ONLY</> is specified before the table name,
      matching rows are deleted from the named table only.  If
      <literal>ONLY</> is not specified, matching rows are also deleted
      from any tables inheriting from the named table.  Optionally,
      <literal>*</> can be specified after the table name to explicitly
      indicate that descendant tables are included.
     </para>
-->
<para>
要删除行的表的名字（可以有模式修饰）。如果在表的名字前指定了<literal>ONLY</>，
则只从指定的表中删除匹配的行。如果没有指定<literal>ONLY</>，则从指定的表及其所有子表中的删除匹配的行。
可选的，可以在表名的后面指定<literal>*</>以明确的指出包括后代表。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">alias</replaceable></term>
    <listitem>
     <!--
<para>
      A substitute name for the target table. When an alias is
      provided, it completely hides the actual name of the table.  For
      example, given <literal>DELETE FROM foo AS f</>, the remainder
      of the <command>DELETE</command> statement must refer to this
      table as <literal>f</> not <literal>foo</>.
     </para>
-->
<para>
目标表的别名。如果提供了别名，那么它将完全掩盖实际的表名。例如给定<literal>DELETE FROM foo AS f</>
之后，<command>DELETE</command>语句的剩余部分必须使用<literal>f</>而不是<literal>foo</>来引用该表。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">using_list</replaceable></term>
    <listitem>
     <!--
<para>
      A list of table expressions, allowing columns from other tables
      to appear in the <literal>WHERE</> condition.  This is similar
      to the list of tables that can be specified in the <xref
      linkend="sql-from" endterm="sql-from-title"> of a
      <command>SELECT</command> statement; for example, an alias for
      the table name can be specified.  Do not repeat the target table
      in the <replaceable class="PARAMETER">using_list</replaceable>,
      unless you wish to set up a self-join.
     </para>
-->
<para>
表表达式列表，允许来自其他表的列出现在<literal>WHERE</>条件中。这与可以在
<command>SELECT</command>命令的<xref linkend="sql-from" endterm="sql-from-title">
中指定的表列表相似。例如，可以为该表的名字声明一个别名。不要在
<replaceable class="PARAMETER">using_list</replaceable>里重复目标表，除非你希望产生一个自连接。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">condition</replaceable></term>
    <listitem>
     <!--
<para>
      An expression that returns a value of type <type>boolean</type>.
      Only rows for which this expression returns <literal>true</>
      will be deleted.
     </para>
-->
<para>
一个返回<type>boolean</type>值的表达式，只用表达式返回<literal>true</>的行被删除。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">cursor_name</replaceable></term>
    <listitem>
     <!--
<para>
      The name of the cursor to use in a <literal>WHERE CURRENT OF</>
      condition.  The row to be deleted is the one most recently fetched
      from this cursor.  The cursor must be a non-grouping
      query on the <command>DELETE</>'s target table.
      Note that <literal>WHERE CURRENT OF</> cannot be
      specified together with a Boolean condition.  See
      <xref linkend="sql-declare">
      for more information about using cursors with
      <literal>WHERE CURRENT OF</>.
     </para>
-->
<para>
在<literal>WHERE CURRENT OF</>条件中使用的游标的名字。要删除的行是最近从这个游标获取到的。
该游标必须是一个在<command>DELETE</>的目标表中非分组的查询。请注意，<literal>WHERE CURRENT OF</>
不能和一个布尔条件一起指定，参阅<xref linkend="sql-declare">获取更多关于和<literal>WHERE CURRENT OF</>
一起使用游标的信息。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">output_expression</replaceable></term>
    <listitem>
     <!--
<para>
      An expression to be computed and returned by the <command>DELETE</>
      command after each row is deleted.  The expression can use any
      column names of the table named by <replaceable class="PARAMETER">table_name</replaceable>
      or table(s) listed in <literal>USING</>.
      Write <literal>*</> to return all columns.
     </para>
-->
<para>
计算并在删除行后由<command>DELETE</>命令返回的一个表达式。该表达式可以使用由
<replaceable class="PARAMETER">table_name</replaceable>命名的表的任意字段名或在<literal>USING</>
中列出的表。<literal>*</>返回所有字段。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">output_name</replaceable></term>
    <listitem>
     <!--
<para>
      A name to use for a returned column.
     </para>
-->
<para>
用于返回的列名称。
</para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
  <!--
  <title>Outputs</title>
  -->
  <title>输出</title>

  <!--
<para>
   On successful completion, a <command>DELETE</> command returns a command
   tag of the form
<screen>
DELETE <replaceable class="parameter">count</replaceable>
</screen>
   The <replaceable class="parameter">count</replaceable> is the number
   of rows deleted.  Note that the number may be less than the number of
   rows that matched the <replaceable
   class="parameter">condition</replaceable> when deletes were
   suppressed by a <literal>BEFORE DELETE</> trigger.  If <replaceable
   class="parameter">count</replaceable> is 0, no rows were deleted by
   the query (this is not considered an error).
  </para>
-->
<para>
成功时，<command>DELETE</>命令返回形如
<screen>
DELETE <replaceable class="parameter">count</replaceable>
</screen>
的标签。<replaceable class="parameter">count</replaceable>是被删除的行数。
请注意，当删除被<literal>BEFORE DELETE</>触发器取消时，这个数字可能小于匹配
<replaceable class="parameter">condition</replaceable>的行数。
如果<replaceable class="parameter">count</replaceable>为 0 则没有行被该查询删除，
这个不认为是错误。
</para>

  <!--
<para>
   If the <command>DELETE</> command contains a <literal>RETURNING</>
   clause, the result will be similar to that of a <command>SELECT</>
   statement containing the columns and values defined in the
   <literal>RETURNING</> list, computed over the row(s) deleted by the
   command.
  </para>
-->
<para>
如果<command>DELETE</>命令包含一个<literal>RETURNING</>子句，那么其结果非常类似于
<command>SELECT</>语句基于<literal>RETURNING</>子句中包含的字段和值列表的结果，
只是基于被删除的行进行计算而已。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>Notes</title>
-->
<title>注意</title>

<para>
<!-- 
   <productname>PostgreSQL</productname> lets you reference columns of
   other tables in the <literal>WHERE</> condition by specifying the
   other tables in the <literal>USING</literal> clause.  For example,
   to delete all films produced by a given producer, one can do: 
-->
<productname>PostgreSQL</productname>允许你在<literal>WHERE</>条件里引用其它表的字段，
方法是在<literal>USING</literal>子句里声明其它表。比如，要删除给出制片商制作的所有电影，可以：
<programlisting>
DELETE FROM films USING producers
  WHERE producer_id = producers.id AND producers.name = 'foo';
</programlisting>
<!-- 
   What is essentially happening here is a join between <structname>films</>
   and <structname>producers</>, with all successfully joined
   <structname>films</> rows being marked for deletion.
   This syntax is not standard.  A more standard way to do it is: 
-->
这里实际发生的事情是在<structname>films</>和<structname>producers</>之间的一个连接，
然后所有成功连接的<structname>films</>行都标记为删除。这个语法不是标准的，更标准的语法是这么做：
<programlisting>
DELETE FROM films
  WHERE producer_id IN (SELECT id FROM producers WHERE name = 'foo');
</programlisting>
<!-- 
   In some cases the join style is easier to write or faster to
   execute than the sub-select style. 
-->
有时候连接风格比子查询风格更容易写或者执行更快。
  </para>
 </refsect1>

 <refsect1>
  <!--
<title>Examples</title>
-->
<title>例子</title>

  <!--
<para>
   Delete all films but musicals:
<programlisting>
DELETE FROM films WHERE kind &lt;&gt; 'Musical';
</programlisting>
  </para>
-->
<para>
删除所有电影(films)但不删除音乐(musicals)：
<programlisting>
DELETE FROM films WHERE kind &lt;&gt; 'Musical';
</programlisting>
</para>

  <!--
<para>
   Clear the table <literal>films</literal>:
<programlisting>
DELETE FROM films;
</programlisting>
  </para>
-->
<para>
清空<literal>films</literal>表：
<programlisting>
DELETE FROM films;
</programlisting>
</para>

  <!--
<para>
   Delete completed tasks, returning full details of the deleted rows:
<programlisting>
DELETE FROM tasks WHERE status = 'DONE' RETURNING *;
</programlisting>
  </para>
-->
<para>
从 tasks 表及其子表中删除，并返回所有被删除的行：
<programlisting>
DELETE FROM tasks WHERE status = 'DONE' RETURNING *;
</programlisting>
</para>

   <!--
<para>
   Delete the row of <structname>tasks</> on which the cursor
   <literal>c_tasks</> is currently positioned:
<programlisting>
DELETE FROM tasks WHERE CURRENT OF c_tasks;
</programlisting></para>
-->
<para>
删除游标<literal>c_tasks</>当前指向的<structname>tasks</>的行：
<programlisting>
DELETE FROM tasks WHERE CURRENT OF c_tasks;
</programlisting>
</para>
 </refsect1>

 <refsect1>
  <!--
<title>Compatibility</title>
-->
<title>兼容性</title>

  <!--
<para>
   This command conforms to the <acronym>SQL</acronym> standard, except
   that the <literal>USING</literal> and <literal>RETURNING</> clauses
   are <productname>PostgreSQL</productname> extensions, as is the ability
   to use <literal>WITH</> with <command>DELETE</>.
  </para>
-->
<para>
这条命令遵循<acronym>SQL</acronym>标准，但是<literal>USING</literal>和<literal>RETURNING</>
子句是<productname>PostgreSQL</productname>的扩展，就像在<command>DELETE</>中使用<literal>WITH</>。
</para>
 </refsect1>
</refentry>
