<!--
doc/src/sgml/ref/alter_type.sgml
PostgreSQL documentation
-->

<refentry id="SQL-ALTERTYPE">
 <refmeta>
  <refentrytitle>ALTER TYPE</refentrytitle>
  <manvolnum>7</manvolnum>
  <!--
<refmiscinfo>SQL - Language Statements</refmiscinfo>
-->
<refmiscinfo>SQL - 语句</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>ALTER TYPE</refname>
  <!--
<refpurpose>
   change the definition of a type
  </refpurpose>
-->
<refpurpose>
 修改一个类型的定义。
</refpurpose>
 </refnamediv>

 <indexterm zone="sql-altertype">
  <primary>ALTER TYPE</primary>
 </indexterm>

 <refsynopsisdiv>
<synopsis>
ALTER TYPE <replaceable class="PARAMETER">name</replaceable> <replaceable class="PARAMETER">action</replaceable> [, ... ]
ALTER TYPE <replaceable class="PARAMETER">name</replaceable> OWNER TO <replaceable class="PARAMETER">new_owner</replaceable>
ALTER TYPE <replaceable class="PARAMETER">name</replaceable> RENAME ATTRIBUTE <replaceable class="PARAMETER">attribute_name</replaceable> TO <replaceable class="PARAMETER">new_attribute_name</replaceable> [ CASCADE | RESTRICT ]
ALTER TYPE <replaceable class="PARAMETER">name</replaceable> RENAME TO <replaceable class="PARAMETER">new_name</replaceable>
ALTER TYPE <replaceable class="PARAMETER">name</replaceable> SET SCHEMA <replaceable class="PARAMETER">new_schema</replaceable>
ALTER TYPE <replaceable class="PARAMETER">name</replaceable> ADD VALUE [ IF NOT EXISTS ] <replaceable class="PARAMETER">new_enum_value</replaceable> [ { BEFORE | AFTER } <replaceable class="PARAMETER">existing_enum_value</replaceable> ]

<phrase><replaceable class="PARAMETER">action</replaceable>可以是下列选项之一：</phrase>

    ADD ATTRIBUTE <replaceable class="PARAMETER">attribute_name</replaceable> <replaceable class="PARAMETER">data_type</replaceable> [ COLLATE <replaceable class="PARAMETER">collation</replaceable> ] [ CASCADE | RESTRICT ]
    DROP ATTRIBUTE [ IF EXISTS ] <replaceable class="PARAMETER">attribute_name</replaceable> [ CASCADE | RESTRICT ]
    ALTER ATTRIBUTE <replaceable class="PARAMETER">attribute_name</replaceable> [ SET DATA ] TYPE <replaceable class="PARAMETER">data_type</replaceable> [ COLLATE <replaceable class="PARAMETER">collation</replaceable> ] [ CASCADE | RESTRICT ]
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <!--
<title>Description</title>
-->
<title>描述</title>

  <!--
<para>
   <command>ALTER TYPE</command> changes the definition of an existing type.
   There are several subforms:
   </para>
-->
<para>
<command>ALTER TYPE</command>改变一个现有类型的定义。 有以下几种形式：
</para>

  <variablelist>
   <varlistentry>
    <term><literal>ADD ATTRIBUTE</literal></term>
    <listitem>
   <!--
     <para>
      This form adds a new attribute to a composite type, using the same syntax as
      <xref linkend="SQL-CREATETYPE">.
     </para>
-->
<para>
这种形式给复合类型增加新的属性，与<xref linkend="SQL-CREATETYPE">命令语法相同。 
</para>

    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>DROP ATTRIBUTE [ IF EXISTS ]</literal></term>
    <listitem>
<!--
<para>
      This form drops an attribute from a composite type.
      If <literal>IF EXISTS</literal> is specified and the attribute
      does not exist, no error is thrown. In this case a notice
      is issued instead.
     </para>
-->
<para>
这种形式从复合类型删除一个属性。如果指定了<literal>IF EXISTS</literal>选项，并且属性不存在时，不会有错误产生。在这种情况下系统仅会有一个提示信息。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>SET DATA TYPE</literal></term>
    <listitem>
     <!--
<para>
      This form changes the type of an attribute of a composite type.
     </para>
-->
<para>
这种形式改变一种复合类型中某个属性的类型。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>OWNER</literal></term>
    <listitem>
     <!--
<para>
      This form changes the owner of the type.
     </para>
-->
<para>
这种形式改变类型的所有者。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>RENAME</literal></term>
    <listitem>
<!--
<para>
      This form changes the name of the type or the name of an
      individual attribute of a composite type.
     </para>
-->
<para>
这种形式改变类型的名称或是一个复合类型中的一个属性的名称。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>SET SCHEMA</literal></term>
    <listitem>
     <!--
<para>
      This form moves the type into another schema.
     </para>
-->
<para>
这种形式将类型移至一个新的模式中。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>ADD VALUE [ IF NOT EXISTS ] [ BEFORE | AFTER ]</literal></term>
    <listitem>
     <!--
<para>
      This form adds a new value to an enum type.  The new value's place in
      the enum's ordering can be specified as being <literal>BEFORE</literal>
      or <literal>AFTER</literal> one of the existing values.  Otherwise,
      the new item is added at the end of the list of values.
     </para>
-->
<para>
这种形式给枚举类型增加一个新值。新值在枚举类型中的位置可通过对一个已有数值使用<literal>BEFORE</literal>或<literal>AFTER</literal>选项来指定。否则，新值会加在值列表的最后面。
</para>
     <!--
<para>
      If <literal>IF NOT EXISTS</literal> is specified, it is not an error if
      the type already contains the new value: a notice is issued but no other
      action is taken. Otherwise, an error will occur if the new value is
      already present.
     </para>
-->
<para>
如果使用了<literal>IF NOT EXISTS</literal>选项，即使枚举中已含有新值也不会报错，仅有提示信息。相反，新增一个枚举中已有的新值会产生错误提示。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>CASCADE</literal></term>
    <listitem>
<!--
<para>
      Automatically propagate the operation to typed tables of the
      type being altered, and their descendants.
     </para>
-->
<para>
自动级联更新需更新类型以及相关联的记录和继承它们的子表。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>RESTRICT</literal></term>
    <listitem>
<!--
<para>
      Refuse the operation if the type being altered is the type of a
      typed table.  This is the default.
     </para>
-->
<para>
如果需联动更新类型是已更新类型的关联记录，则拒绝更新。这是缺省选项。
</para>
    </listitem>
   </varlistentry>
  </variablelist>

  <!--
<para>
   The <literal>ADD ATTRIBUTE</literal>, <literal>DROP
   ATTRIBUTE</literal>, and <literal>ALTER ATTRIBUTE</literal> actions
   can be combined into a list of multiple alterations to apply in
   parallel.  For example, it is possible to add several attributes
   and/or alter the type of several attributes in a single command.
  </para>
-->
<para>
<literal>ADD ATTRIBUTE</literal>、<literal>DROP  ATTRIBUTE</literal>和<literal>ALTER ATTRIBUTE</literal>选项可以组合成一个列表同时处理。
例如，在一条命令中同时增加几个属性或是更改几个属性的类型是可以实现的。
</para>

  <!--
<para>
   You must own the type to use <command>ALTER TYPE</>.
   To change the schema of a type, you must also have
   <literal>CREATE</literal> privilege on the new schema.
   To alter the owner, you must also be a direct or indirect member of the new
   owning role, and that role must have <literal>CREATE</literal> privilege on
   the type's schema.  (These restrictions enforce that altering the owner
   doesn't do anything you couldn't do by dropping and recreating the type.
   However, a superuser can alter ownership of any type anyway.)
   To add an attribute or alter an attribute type, you must also
   have <literal>USAGE</literal> privilege on the data type.
  </para>
-->
<para>
要使用<command>ALTER TYPE</>，你必须是该类型的所有者。
要修改一个类型的模式，你还必须在新模式上拥有<literal>CREATE</literal>权限。 
要修改所有者，你还必须是新的所有角色的直接或间接成员， 并且该成员必须在此类型的模式上有<literal>CREATE</literal>权限。
（这些限制强制了修改该所有者不会做任何通过删除和重建类型不能做的事情。 不过，超级用户可以以任何方式修改任意类型的所有权。 ）
要增加一个属性或是修改一个属性的类型，你也必须有该类型的<literal>USAGE</literal>权限。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>Parameters</title>
-->
<title>参数</title>

   
<para>
    <variablelist>
     <varlistentry>
      <term><replaceable class="PARAMETER">name</replaceable></term>
      <listitem>
    <!--
       <para>
        The name (possibly schema-qualified) of an existing type to
        alter.
       </para>
-->
<para>
一个需要修改的现有的类型的名字(可以有模式修饰) 。
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="PARAMETER">new_name</replaceable></term>
      <listitem>
       <!--
<para>
        The new name for the type.
       </para>
-->
<para>
该类型的新名称。
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="PARAMETER">new_owner</replaceable></term>
      <listitem>
       <!--
<para>
        The user name of the new owner of the type.
       </para>
-->
<para>
新所有者的用户名 。
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="PARAMETER">new_schema</replaceable></term>
      <listitem>
       <!--
<para>
        The new schema for the type.
       </para>
-->
<para>
该类型的新模式 。
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="PARAMETER">attribute_name</replaceable></term>
      <listitem>
       <!--
<para>
        The name of the attribute to add, alter, or drop.
       </para>
-->
<para>
拟增加、更改或删除的属性的名称。
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="PARAMETER">new_attribute_name</replaceable></term>
      <listitem>
       <!--
<para>
        The new name of the attribute to be renamed.
       </para>
-->
<para>
拟改名的属性的新名称。
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="PARAMETER">data_type</replaceable></term>
      <listitem>
       <!--
<para>
        The data type of the attribute to add, or the new type of the
        attribute to alter.
       </para>
-->
<para>
拟新增属性的数据类型，或是拟更改的属性的新类型名。
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="PARAMETER">new_enum_value</replaceable></term>
      <listitem>
       <!--
<para>
        The new value to be added to an enum type's list of values.
        Like all enum literals, it needs to be quoted.
       </para>
-->
<para>
拟加入枚举类型值列表中的新值。和所有枚举参数一样，它必须使用引号引起来。
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="PARAMETER">existing_enum_value</replaceable></term>
      <listitem>
       <!--
<para>
        The existing enum value that the new value should be added immediately
        before or after in the enum type's sort ordering.
        Like all enum literals, it needs to be quoted.
       </para>
-->
<para>
用于设定将要新增的枚举值在枚举中前后位置的已存在的枚举参考值。和所有枚举参数一样，它必须使用引号引起来。
</para>
      </listitem>
     </varlistentry>

    </variablelist>
   </para>
  </refsect1>

 <refsect1>
  <!--
<title>Notes</title>
-->
<title>注意</title>

<!--
<para>
   <command>ALTER TYPE ... ADD VALUE</> (the form that adds a new value to an
   enum type) cannot be executed inside a transaction block.
  </para>
-->
<para>
<command>ALTER TYPE ... ADD VALUE</>（这种形式给枚举增加一个新值）命令是不能在一个事务处理块内部执行的。
</para>

<!--
<para>
   Comparisons involving an added enum value will sometimes be slower than
   comparisons involving only original members of the enum type.  This will
   usually only occur if <literal>BEFORE</literal> or <literal>AFTER</literal>
   is used to set the new value's sort position somewhere other than at the
   end of the list.  However, sometimes it will happen even though the new
   value is added at the end (this occurs if the OID counter <quote>wrapped
   around</> since the original creation of the enum type).  The slowdown is
   usually insignificant; but if it matters, optimal performance can be
   regained by dropping and recreating the enum type, or by dumping and
   reloading the database.
  </para>
-->
<para>
与处理枚举原有的列表值相比，新增一个枚举值有时有点慢，这一般出现在新增的枚举值使用了 <literal>BEFORE</literal> 或 <literal>AFTER</literal>选项来
指定新值的位置，而不是使用缺省的选项放在列表最后。不过有时使用缺省放在最后也会慢（这在该枚举创建后其OID计数出现了<quote>复位</>情况）。
当然，这种性能上的损失是很小的。如果用户介意的话，可以通过删除这个枚举然后重新创建，或是导出数据库再导入即可恢复正常性能。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>Examples</title>
-->
<title>例子</title>

  <!--
<para>
   To rename a data type:
<programlisting>
ALTER TYPE electronic_mail RENAME TO email;
</programlisting>
  </para>
-->
<para>
 重命名数据类型: 
<programlisting>
ALTER TYPE electronic_mail RENAME TO email;
</programlisting>
</para>

  <!--
<para>
   To change the owner of the type <literal>email</literal>
   to <literal>joe</literal>:
<programlisting>
ALTER TYPE email OWNER TO joe;
</programlisting>
  </para>
-->
<para>
 要改变一个用户定义类型 <literal>email</literal>的所有者为<literal>joe</literal>: 
 <programlisting>
ALTER TYPE email OWNER TO joe;
</programlisting>
  </para>

  <!--
<para>
   To change the schema of the type <literal>email</literal>
   to <literal>customers</literal>:
<programlisting>
ALTER TYPE email SET SCHEMA customers;
</programlisting>
  </para>
-->
<para>
把用户定义类型<literal>email</literal>的模式改变为<literal>customers</literal>:
<programlisting>
ALTER TYPE email SET SCHEMA customers;
</programlisting>
</para>

  <!--
<para>
   To add a new attribute to a type:
<programlisting>
ALTER TYPE compfoo ADD ATTRIBUTE f3 int;
</programlisting>
  </para>
-->
<para>
给一个数据类型增加一个新的属性：
<programlisting>
ALTER TYPE compfoo ADD ATTRIBUTE f3 int;
</programlisting>
</para>

  <!--
<para>
   To add a new value to an enum type in a particular sort position:
<programlisting>
ALTER TYPE colors ADD VALUE 'orange' AFTER 'red';
</programlisting></para>
-->
<para>
给一个枚举类型增加一个指定位置的新值：
<programlisting>
ALTER TYPE colors ADD VALUE 'orange' AFTER 'red';
</programlisting>
</para>
 </refsect1>

 <refsect1>
  <!--
<title>Compatibility</title>
-->
<title>兼容性</title>

  <!--
<para>
   The variants to add and drop attributes are part of the SQL
   standard; the other variants are PostgreSQL extensions.
  </para>
-->
<para>
增加或删除属性是SQL标准，其他选项都是PostgreSQL的扩展。
</para>
 </refsect1>

 <refsect1 id="SQL-ALTERTYPE-see-also">
  <!--
<title>See Also</title>
-->
<title>参见</title>

  <simplelist type="inline">
   <member><xref linkend="sql-createtype"></member>
   <member><xref linkend="sql-droptype"></member>
  </simplelist>
 </refsect1>
</refentry>
