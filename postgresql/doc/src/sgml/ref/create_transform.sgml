<!-- doc/src/sgml/ref/create_transform.sgml -->

<refentry id="SQL-CREATETRANSFORM">
 <indexterm zone="sql-createtransform">
  <primary>CREATE TRANSFORM</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>CREATE TRANSFORM</refentrytitle>
  <manvolnum>7</manvolnum>
  <!-- 
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
  -->
  <refmiscinfo>SQL - 语句</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE TRANSFORM</refname>
  <!-- 
  <refpurpose>define a new transform</refpurpose>
  -->
  <refpurpose>定义一个新的变换</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
CREATE [ OR REPLACE ] TRANSFORM FOR <replaceable>type_name</replaceable> LANGUAGE <replaceable>lang_name</replaceable> (
    FROM SQL WITH FUNCTION <replaceable>from_sql_function_name</replaceable> (<replaceable>argument_type</replaceable> [, ...]),
    TO SQL WITH FUNCTION <replaceable>to_sql_function_name</replaceable> (<replaceable>argument_type</replaceable> [, ...])
);
</synopsis>
 </refsynopsisdiv>

 <refsect1 id="sql-createtransform-description">
  <!-- 
  <title>Description</title>
  -->
  <title>描述</title>

  <!-- 
  <para>
   <command>CREATE TRANSFORM</command> defines a new transform.
   <command>CREATE OR REPLACE TRANSFORM</command> will either create a new
   transform, or replace an existing definition.
  </para>
  -->
  <para>
   <command>CREATE TRANSFORM</command>定义一个新的变换。
   <command>CREATE OR REPLACE TRANSFORM</command>创建一个新的变换，
   或者替换一个现有的定义。
  </para>

  <!-- 
  <para>
   A transform specifies how to adapt a data type to a procedural language.
   For example, when writing a function in PL/Python using
   the <type>hstore</type> type, PL/Python has no prior knowledge how to
   present <type>hstore</type> values in the Python environment.  Language
   implementations usually default to using the text representation, but that
   is inconvenient when, for example, an associative array or a list would be
   more appropriate.
  </para>
  -->
  <para>
   变换指定如何使数据类型适应过程语言。例如，在使用<type>hstore</type>
   类型在PL/Python中编写函数时，PL/Python之前没有如何在Python环境中显示
   <type>hstore</type>值的知识。语言实现通常默认使用文本表示，
   但是当例如关联数组或列表更合适时，这是不方便的。
  </para>

  <para>
   <!--
   A transform specifies two functions:
   -->
   一个变换指定两个函数：
   <itemizedlist>
    <listitem>
     <!-- 
     <para>
      A <quote>from SQL</quote> function that converts the type from the SQL
      environment to the language.  This function will be invoked on the
      arguments of a function written in the language.
     </para>
     -->
     <para>
      <quote>from SQL</quote>函数，用于将类型从SQL环境转换为语言。
      此函数将调用以该语言编写的函数的参数。
     </para>
    </listitem>

    <listitem>
     <!-- 
     <para>
      A <quote>to SQL</quote> function that converts the type from the
      language to the SQL environment.  This function will be invoked on the
      return value of a function written in the language.
     </para>
     -->
     <para>
      <quote>to SQL</quote>函数，将类型从语言转换为SQL环境。
      此函数将在用该语言编写的函数的返回值上调用。
     </para>
    </listitem>
   </itemizedlist>
   <!-- 
   It is not necessary to provide both of these functions.  If one is not
   specified, the language-specific default behavior will be used if
   necessary.  (To prevent a transformation in a certain direction from
   happening at all, you could also write a transform function that always
   errors out.)
   -->
   不必提供这两种功能。如果没有指定，如果需要，将使用特定于语言的默认行为。
   （为了防止某个方向的转换发生，你也可以写一个总是出错的转换函数。）
  </para>

  <!-- 
  <para>
   To be able to create a transform, you must own and
   have <literal>USAGE</literal> privilege on the type, have
   <literal>USAGE</literal> privilege on the language, and own and
   have <literal>EXECUTE</literal> privilege on the from-SQL and to-SQL
   functions, if specified.
  </para>
  -->
  <para>
   要能够创建转换，您必须拥有该类型的<literal>USAGE</literal> 特权，
   具有该语言的<literal>USAGE</literal>特权，并且拥有并具有
   from-SQL和to-SQL函数（如果指定）的<literal>EXECUTE</literal>特权。
  </para>
 </refsect1>

 <refsect1>
  <!-- 
  <title>Parameters</title>
  -->
  <title>参数</title>

   <variablelist>
    <varlistentry>
     <term><replaceable>type_name</replaceable></term>

     <listitem>
      <!-- 
      <para>
       The name of the data type of the transform.
      </para>
      -->
      <para>
       变换的数据类型的名称。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable>lang_name</replaceable></term>

     <listitem>
      <!-- 
      <para>
       The name of the language of the transform.
      </para>
      -->
      <para>
       变换的语言的名称。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable>from_sql_function_name</replaceable>(<replaceable>argument_type</replaceable> [, ...])</term>

     <listitem>
      <!-- 
      <para>
       The name of the function for converting the type from the SQL
       environment to the language.  It must take one argument of
       type <type>internal</type> and return type <type>internal</type>.  The
       actual argument will be of the type for the transform, and the function
       should be coded as if it were.  (But it is not allowed to declare an
       SQL-level function returning <type>internal</type> without at
       least one argument of type <type>internal</type>.)  The actual return
       value will be something specific to the language implementation.
      </para>
      -->
      <para>
       用于将类型从SQL环境转换为语言的函数的名称。它必须接受一个类型为
       <type>internal</type>的参数并且返回类型为<type>internal</type>。
       实际的参数将是变换的类型，函数应该被编码，如果它是。
       （但是不允许声明一个SQL级函数返回<type>internal</type>，
       而没有至少一个类型为<type>internal</type>的参数。）
       实际的返回值将是特定于语言实现的。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable>to_sql_function_name</replaceable>(<replaceable>argument_type</replaceable> [, ...])</term>

     <listitem>
      <!-- 
      <para>
       The name of the function for converting the type from the language to
       the SQL environment.  It must take one argument of type
       <type>internal</type> and return the type that is the type for the
       transform.  The actual argument value will be something specific to the
       language implementation.
      </para>
      -->
      <para>
       用于将类型从语言转换为SQL环境的函数的名称。它必须接受一个类型为
       <type>internal</type>的参数，并返回作为转换类型的类型。
       实际的参数值将是特定于语言实现的。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
 </refsect1>

 <refsect1 id="sql-createtransform-notes">
  <!-- 
  <title>Notes</title>
  -->
  <title>注意</title>

  <!-- 
  <para>
   Use <xref linkend="sql-droptransform"> to remove transforms.
  </para>
  -->
  <para>
   使用<xref linkend="sql-droptransform">移除转换。
  </para>
 </refsect1>

 <refsect1 id="sql-createtransform-examples">
  <!-- 
  <title>Examples</title>
  -->
  <title>示例</title>

  <para>
   <!-- 
   To create a transform for type <type>hstore</type> and language
   <literal>plpythonu</literal>, first set up the type and the language:
   -->
   要为类型<type>hstore</type>和语言<literal>plpythonu</literal>
   创建变换，首先设置类型和语言：
<programlisting>
CREATE TYPE hstore ...;

CREATE LANGUAGE plpythonu ...;
</programlisting>
   <!-- 
   Then create the necessary functions:
   -->
   然后创建必须的函数：
<programlisting>
CREATE FUNCTION hstore_to_plpython(val internal) RETURNS internal
LANGUAGE C STRICT IMMUTABLE
AS ...;

CREATE FUNCTION plpython_to_hstore(val internal) RETURNS hstore
LANGUAGE C STRICT IMMUTABLE
AS ...;
</programlisting>
   <!-- 
   And finally create the transform to connect them all together:
   -->
   最后创建将它们连接在一起的变换：
<programlisting>
CREATE TRANSFORM FOR hstore LANGUAGE plpythonu (
    FROM SQL WITH FUNCTION hstore_to_plpython(internal),
    TO SQL WITH FUNCTION plpython_to_hstore(internal)
);
</programlisting>
   <!-- 
   In practice, these commands would be wrapped up in extensions.
   -->
   实际上，这些命令将被包装在扩展中。
  </para>

  <!-- 
  <para>
   The <filename>contrib</filename> section contains a number of extensions
   that provide transforms, which can serve as real-world examples.
  </para>
  -->
  <para>
   <filename>contrib</filename>部分包含多个提供转换的扩展，它们可以作为现实世界的例子。
  </para>
 </refsect1>

 <refsect1 id="sql-createtransform-compat">
  <!-- 
  <title>Compatibility</title>
  -->
  <title>兼容性</title>

  <!-- 
  <para>
   This form of <command>CREATE TRANSFORM</command> is a
   <productname>PostgreSQL</productname> extension.  There is a <command>CREATE
   TRANSFORM</command> command in the <acronym>SQL</acronym> standard, but it
   is for adapting data types to client languages.  That usage is not supported
   by <productname>PostgreSQL</productname>.
  </para>
  -->
  <para>
   这种形式的<command>CREATE TRANSFORM</command>是一个
   <productname>PostgreSQL</productname>扩展。
   在<acronym>SQL</acronym>标准中有一个<command>CREATE TRANSFORM</command>命令，
   但它用于将数据类型适配为客户端语言。
   <productname>PostgreSQL</productname>不支持这种用法。
  </para>
 </refsect1>

 <refsect1 id="sql-createtransform-seealso">
  <!-- 
  <title>See Also</title>
  -->
  <title>又见</title>

  <para>
   <xref linkend="sql-createfunction">,
   <xref linkend="sql-createlanguage">,
   <xref linkend="sql-createtype">,
   <xref linkend="sql-droptransform">
  </para>
 </refsect1>

</refentry>
