<!--
doc/src/sgml/ref/create_extension.sgml
PostgreSQL documentation
-->

<refentry id="SQL-CREATEEXTENSION">
 <refmeta>
  <refentrytitle>CREATE EXTENSION</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE EXTENSION</refname>
  <refpurpose><!--install an extension-->安装一个扩展</refpurpose>
 </refnamediv>

 <indexterm zone="sql-createextension">
  <primary>CREATE EXTENSION</primary>
 </indexterm>

 <refsynopsisdiv>
<synopsis>
CREATE EXTENSION [ IF NOT EXISTS ] <replaceable class="parameter">extension_name</replaceable>
    [ WITH ] [ SCHEMA <replaceable class="parameter">schema_name</replaceable> ]
             [ VERSION <replaceable class="parameter">version</replaceable> ]
             [ FROM <replaceable class="parameter">old_version</replaceable> ]
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title><!--Description-->描述</title>

  <para>
   <!--
   <command>CREATE EXTENSION</command> loads a new extension into the current
   database.  There must not be an extension of the same name already loaded.-->
    create extension 命令安装一个新的扩展到一个数据库中.必须保证没有同名的扩展已经被安装.
  </para>

  <para>
   <!--
   Loading an extension essentially amounts to running the extension's script
   file.  The script will typically create new <acronym>SQL</> objects such as
   functions, data types, operators and index support methods.
   <command>CREATE EXTENSION</command> additionally records the identities
   of all the created objects, so that they can be dropped again if
   <command>DROP EXTENSION</command> is issued.
   -->
  安装一个扩展意味着执行一个扩展的脚本文件.这个脚本会创建一个新的SQL实体,例如函数,
数据类型,操作符,和索引支持的方法.
  </para>

  <para>
<!--
   Loading an extension requires the same privileges that would be
   required to create its component objects.  For most extensions this
   means superuser or database owner privileges are needed.
   The user who runs <command>CREATE EXTENSION</command> becomes the
   owner of the extension for purposes of later privilege checks, as well
   as the owner of any objects created by the extension's script.-->
 安装扩展需要有和创建他的组件对象相同的权限.对于大多数扩展这意味着需要超户或者数据库所有者的权限.
对于后续的权限检查和该扩展脚本所创建的实体，运行CREARE EXTENSION命令的角色将变为扩展的所有者．
  </para>

 </refsect1>

 <refsect1>
  <title><!--Parameters-->参数</title>

    <variablelist>
     <varlistentry>
      <term><literal>IF NOT EXISTS</></term>
      <listitem>
       <para><!--
        Do not throw an error if an extension with the same name already
        exists.  A notice is issued in this case.  Note that there is no
        guarantee that the existing extension is anything like the one that
        would have been created from the currently-available script file.-->
        如果系统已经存在一个同名的扩展，不会报错．这种情况下会给出一个提示．请注意该参数不保证系统存在的扩展和现在脚本创建的扩展相同．
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">extension_name</replaceable></term>
      <listitem>
       <para>
　　<!--
        The name of the extension to be
        installed. <productname>PostgreSQL</productname> will create the
        extension using details from the file
        <literal>SHAREDIR/extension/</literal><replaceable class="parameter">extension_name</replaceable><literal>.control</literal>.
        -->  
       将被安装扩展的名字．PostgresQL从<literal>SHAREDIR/extension/</literal><replaceable class="parameter">extension_name</replaceable><literal>.control</literal>这个文件安装扩展.
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">schema_name</replaceable></term>
      <listitem>
       <para><!--
        The name of the schema in which to install the extension's
        objects, given that the extension allows its contents to be
        relocated.  The named schema must already exist.
        If not specified, and the extension's control file does not specify a
        schema either, the current default object creation schema is used.
    -->
        扩展的实例被安装在该模式下,扩展的内容可以被重新安装.指定的模式必须已经存在.如果没有指定,扩展的控制文件也不指定一个模式,这样将使用默认模式.
    </para>
       <para>
<!--
        Remember that the extension itself is not considered to be within any
        schema: extensions have unqualified names that must be unique
        database-wide.  But objects belonging to the extension can be within
        schemas.
-->
        注意扩展不认为它在任何模式里面:扩展在一个数据库范围内的名字是不受限制的,但是一个扩展的实例是属于一个模式的.      
 </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">version</replaceable></term>
      <listitem>
       <para>
        <!--
        The version of the extension to install.  This can be written as
        either an identifier or a string literal.  The default version is
        whatever is specified in the extension's control file.
        -->
        安装扩展的版本.这个可以写为一个标识符或者字符串.默认的版本在扩展的控制文件中指定.       
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">old_version</replaceable></term>
      <listitem>
       <para>
<!--
<literal>FROM</> <replaceable class="parameter">old_version</>
        must be specified when, and only when, you are attempting to install
        an extension that replaces an <quote>old style</> module that is just
        a collection of objects not packaged into an extension.  This option
        causes <command>CREATE EXTENSION</> to run an alternative installation
        script that absorbs the existing objects into the extension, instead
        of creating new objects.  Be careful that <literal>SCHEMA</> specifies
        the schema containing these pre-existing objects.
-->
       当你想升级安装<quote>old style</> 模块中没有的内容时,你必须指定<literal>FROM</> <replaceable class="parameter">old_version</>.
       这个选项使<command>CREATE EXTENSION</> 运行一个安装脚本将新的内容安装到扩展中,而不是创建一个新的实体.注意<literal>SCHEMA</>指定了包括这些已存在实体的模式.
</para>

       <para>
        <!--
        The value to use for <replaceable
        class="parameter">old_version</replaceable> is determined by the
        extension's author, and might vary if there is more than one version
        of the old-style module that can be upgraded into an extension.
        For the standard additional modules supplied with pre-9.1
        <productname>PostgreSQL</productname>, use <literal>unpackaged</>
        for <replaceable class="parameter">old_version</replaceable> when
        updating a module to extension style.-->
        <replaceable class="parameter">old_version</replaceable>的值由扩展的作者决定,如果有多个旧的版本升级到一个扩展这个值可能会改变.对于pre-9.1<productname>PostgreSQL</productname> 提供的标准扩展,当升级扩展时使用<literal>unpackaged</>
        代替<replaceable class="parameter">old_version</replaceable>
       </para>
      </listitem>
     </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
  <title><!--Notes-->注意</title>

  <para>
   <!--
   Before you can use <command>CREATE EXTENSION</> to load an extension
   into a database, the extension's supporting files must be installed.
   Information about installing the extensions supplied with
   <productname>PostgreSQL</productname> can be found in
   <link linkend="contrib">Additional Supplied Modules</link>.-->
    在你使用 <command>CREATE EXTENSION</>去安装一个扩展到数据库之前,扩展所需的文件必须被安装.安装扩展所需的信息在<link linkend="contrib">Additional Supplied Modules</link>.
  </para>

  <para>
<!--
   The extensions currently available for loading can be identified from the
   <link linkend="view-pg-available-extensions"><structname>pg_available_extensions</structname></link>
   or
   <link linkend="view-pg-available-extension-versions"><structname>pg_available_extension_versions</structname></link>
   system views.-->
    现在可以安装的扩展可以在<link linkend="view-pg-available-extensions"><structname>pg_available_extensions</structname></link>
   或者<link linkend="view-pg-available-extension-versions"><structname>pg_available_extension_versions</structname></link>找到.
  </para>

  <para>
  <!--
   For information about writing new extensions, see
   <xref linkend="extend-extensions">.-->
   关于写一个扩展信息,可以查看<xref linkend="extend-extensions">.
  </para>
 </refsect1>

 <refsect1>
  <title><!--Examples-->例子</title>

  <para>
 <!--
   Install the <link linkend="hstore">hstore</link> extension into the
   current database:
<programlisting>
CREATE EXTENSION hstore;
</programlisting>-->
在当前数据库安装<link linkend="hstore">hstore</link>扩展:
<programlisting>
CREATE EXTENSION hstore;
</programlisting>
  </para>

  <para>
<!--
   Update a pre-9.1 installation of <literal>hstore</> into
   extension style:
<programlisting>
CREATE EXTENSION hstore SCHEMA public FROM unpackaged;
</programlisting>
   Be careful to specify the schema in which you installed the existing
   <literal>hstore</> objects.-->
升级一个9.1安装的<literal>hstore</> :
<programlisting>
CREATE EXTENSION hstore SCHEMA public FROM unpackaged;
</programlisting>
注意指定你在哪个模式安装过 <literal>hstore</> .
  </para>
 </refsect1>

 <refsect1>
  <title><!--Compatibility-->兼容性</title>

  <para>
   <!--<command>CREATE EXTENSION</command> is a <productname>PostgreSQL</>
   extension.-->
   <command>CREATE EXTENSION</command>是<productname>PostgreSQL</>的一个扩展.
  </para>
 </refsect1>

 <refsect1>
  <title>相关内容</title>

  <simplelist type="inline">
   <member><xref linkend="sql-alterextension"></member>
   <member><xref linkend="sql-dropextension"></member>
  </simplelist>
 </refsect1>

</refentry>
