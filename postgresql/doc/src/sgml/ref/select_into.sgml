<!--
doc/src/sgml/ref/select_into.sgml
PostgreSQL documentation
-->

<refentry id="SQL-SELECTINTO">
 <refmeta>
  <refentrytitle>SELECT INTO</refentrytitle>
  <manvolnum>7</manvolnum>
  <!--
<refmiscinfo>SQL - Language Statements</refmiscinfo>
-->
<refmiscinfo>SQL - 语句</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>SELECT INTO</refname>
  <!-- 
  <refpurpose>define a new table from the results of a query</refpurpose> 
  -->
  <refpurpose>从一条查询的结果中定义一个新表</refpurpose>
 </refnamediv>

 <indexterm zone="sql-selectinto">
  <primary>SELECT INTO</primary>
 </indexterm>

 <refsynopsisdiv>
<synopsis>
[ WITH [ RECURSIVE ] <replaceable class="parameter">with_query</replaceable> [, ...] ]
SELECT [ ALL | DISTINCT [ ON ( <replaceable class="parameter">expression</replaceable> [, ...] ) ] ]
    * | <replaceable class="parameter">expression</replaceable> [ [ AS ] <replaceable class="parameter">output_name</replaceable> ] [, ...]
    INTO [ TEMPORARY | TEMP | UNLOGGED ] [ TABLE ] <replaceable class="parameter">new_table</replaceable>
    [ FROM <replaceable class="parameter">from_item</replaceable> [, ...] ]
    [ WHERE <replaceable class="parameter">condition</replaceable> ]
    [ GROUP BY <replaceable class="parameter">expression</replaceable> [, ...] ]
    [ HAVING <replaceable class="parameter">condition</replaceable> [, ...] ]
    [ WINDOW <replaceable class="parameter">window_name</replaceable> AS ( <replaceable class="parameter">window_definition</replaceable> ) [, ...] ]
    [ { UNION | INTERSECT | EXCEPT } [ ALL | DISTINCT ] <replaceable class="parameter">select</replaceable> ]
    [ ORDER BY <replaceable class="parameter">expression</replaceable> [ ASC | DESC | USING <replaceable class="parameter">operator</replaceable> ] [ NULLS { FIRST | LAST } ] [, ...] ]
    [ LIMIT { <replaceable class="parameter">count</replaceable> | ALL } ]
    [ OFFSET <replaceable class="parameter">start</replaceable> [ ROW | ROWS ] ]
    [ FETCH { FIRST | NEXT } [ <replaceable class="parameter">count</replaceable> ] { ROW | ROWS } ONLY ]
    [ FOR { UPDATE | SHARE } [ OF <replaceable class="parameter">table_name</replaceable> [, ...] ] [ NOWAIT ] [...] ]
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <!--
<title>Description</title>
-->
<title>描述</title>

  <!--
<para>
   <command>SELECT INTO</command> creates a new table and fills it
   with data computed by a query.  The data is not returned to the
   client, as it is with a normal <command>SELECT</command>.  The new
   table's columns have the names and data types associated with the
   output columns of the <command>SELECT</command>.
  </para>
-->
<para>
<command>SELECT INTO</command>从一个查询中创建一个新表,并且将查询到的数据插入到新表中。数据并不返回给客户端，
这一点和普通的<command>SELECT</command>不同。新表的字段具有和<command>SELECT</command>
的输出字段相同的名字和数据类型。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>Parameters</title>
-->
<title>参数</title>

  <variablelist>
  <varlistentry>
   <!-- 
   <term><literal>TEMPORARY</literal> or <literal>TEMP</literal></term> 
   -->
   <term><literal>TEMPORARY</literal> 或 <literal>TEMP</literal></term>
   <listitem>
    <!--
<para>
     If specified, the table is created as a temporary table.  Refer
     to <xref linkend="sql-createtable"> for details.
    </para>
-->
<para>
如果声明了这个关键字，那么该表是作为一个临时表创建的。
请参考<xref linkend="sql-createtable">获取细节。
</para>
   </listitem>
  </varlistentry>

  <varlistentry>
   <term><literal>UNLOGGED</literal></term>
   <listitem>
    <!--
<para>
     If specified, the table is created as an unlogged table.  Refer
     to <xref linkend="sql-createtable"> for details.
    </para>
-->
<para>
如果指定了，那么表作为一个非日志表创建。参阅<xref linkend="sql-createtable">获取详细信息。
</para>
   </listitem>
  </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">new_table</replaceable></term>
    <listitem>
     <!--
<para>
      The name (optionally schema-qualified) of the table to be created.
     </para>
-->
<para>
要创建的表的名字(可以有模式修饰)。
</para>
    </listitem>
   </varlistentry>
  </variablelist>

  <!--
<para>
   All other parameters are described in detail under <xref
   linkend="sql-select">.
  </para>
-->
<para>
所有其它参数都在<xref linkend="sql-select">中有详细描述。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>Notes</title>
-->
<title>注意</title>

  <!--
<para>
   <xref linkend="sql-createtableas"> is functionally similar to
   <command>SELECT INTO</command>.  <command>CREATE TABLE AS</command>
   is the recommended syntax, since this form of <command>SELECT
   INTO</command> is not available in <application>ECPG</application>
   or <application>PL/pgSQL</application>, because they interpret the
   <literal>INTO</literal> clause differently. Furthermore,
   <command>CREATE TABLE AS</command> offers a superset of the
   functionality provided by <command>SELECT INTO</command>.
  </para>
-->
<para>
<xref linkend="sql-createtableas">的作用和<command>SELECT INTO</command>类似。
建议使用<command>CREATE TABLE AS</command>语法。
实际上，它是不能在<application>ECPG</application>或<application>PL/pgSQL</application>中使用的，
因为它们对<literal>INTO</literal>子句的解释是不同的。而且，<command>CREATE TABLE AS</command>
提供了<command>SELECT INTO</command>所提供功能的超集。
</para>

  <!--
<para>
   Prior to <productname>PostgreSQL</> 8.1, the table created by
   <command>SELECT INTO</command> included OIDs by default. In
   <productname>PostgreSQL</productname> 8.1, this is not the case
   &mdash; to include OIDs in the new table, the <xref
   linkend="guc-default-with-oids"> configuration variable must be
   enabled. Alternatively, <command>CREATE TABLE AS</command> can be
   used with the <literal>WITH OIDS</literal> clause.
  </para>
-->
<para>
在<productname>PostgreSQL</> 8.1以前，<command>SELECT INTO</command>创建的表总是缺省包含 OID 。
到了<productname>PostgreSQL</productname> 8.1，这不再是缺省了，要想在新表中包含 OID ，
可以打开<xref linkend="guc-default-with-oids">配置参数.命令<command>CREATE TABLE AS</command>可以使用<literal>WITH OIDS</literal>子句包含oid列。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>Examples</title>
-->
<title>例子</title>

  <!--
<para>
   Create a new table <literal>films_recent</literal> consisting of only
   recent entries from the table <literal>films</literal>:

<programlisting>
SELECT * INTO films_recent FROM films WHERE date_prod &gt;= '2002-01-01';
</programlisting></para>
-->
<para>
创建一个新表<literal>films_recent</literal>，它的值包含来自<literal>films</literal>的最近的条目：
<programlisting>
SELECT * INTO films_recent FROM films WHERE date_prod &gt;= '2002-01-01';
</programlisting>
</para>
 </refsect1>

 <refsect1>
  <!--
<title>Compatibility</title>
-->
<title>兼容性</title>

  <!--
<para>
   The SQL standard uses <command>SELECT INTO</command> to
   represent selecting values into scalar variables of a host program,
   rather than creating a new table.  This indeed is the usage found
   in <application>ECPG</application> (see <xref linkend="ecpg">) and
   <application>PL/pgSQL</application> (see <xref linkend="plpgsql">).
   The <productname>PostgreSQL</productname> usage of <command>SELECT
   INTO</command> to represent table creation is historical.  It is
   best to use <command>CREATE TABLE AS</command> for this purpose in
   new code.
  </para>
-->
<para>
SQL 标准用<command>SELECT INTO</command>表示选取数值到一个宿主程序的标量变量中，
而不是创建一个新表。这种用法实际上就是在<application>ECPG</application>
(<xref linkend="ecpg">) 和<application>PL/pgSQL</application>(<xref linkend="plpgsql">)
里的用途。<productname>PostgreSQL</productname>用<command>SELECT INTO</command>
创建表是历史原因。在新代码里最好使用<command>CREATE TABLE AS</command>实现这个目的。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>See Also</title>
-->
<title>又见</title>

  <simplelist type="inline">
   <member><xref linkend="sql-createtableas"></member>
  </simplelist>
 </refsect1>
</refentry>