<!--
doc/src/sgml/ref/create_operator.sgml
PostgreSQL documentation
-->

<refentry id="SQL-CREATEOPERATOR">
 <refmeta>
  <refentrytitle>CREATE OPERATOR</refentrytitle>
  <manvolnum>7</manvolnum>
  <!--
<refmiscinfo>SQL - Language Statements</refmiscinfo>
-->
<refmiscinfo>SQL - 语句</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE OPERATOR</refname>
  <!--
  <refpurpose>define a new operator</refpurpose>
  -->
  <refpurpose>定义一个新操作符</refpurpose>
 </refnamediv>

 <indexterm zone="sql-createoperator">
  <primary>CREATE OPERATOR</primary>
 </indexterm>

 <refsynopsisdiv>
<synopsis>
CREATE OPERATOR <replaceable>name</replaceable> (
    PROCEDURE = <replaceable class="parameter">function_name</replaceable>
    [, LEFTARG = <replaceable class="parameter">left_type</replaceable> ] [, RIGHTARG = <replaceable class="parameter">right_type</replaceable> ]
    [, COMMUTATOR = <replaceable class="parameter">com_op</replaceable> ] [, NEGATOR = <replaceable class="parameter">neg_op</replaceable> ]
    [, RESTRICT = <replaceable class="parameter">res_proc</replaceable> ] [, JOIN = <replaceable class="parameter">join_proc</replaceable> ]
    [, HASHES ] [, MERGES ]
)
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <!--
<title>Description</title>
-->
<title>描述</title>

  <!--
<para>
   <command>CREATE OPERATOR</command> defines a new operator,
   <replaceable class="parameter">name</replaceable>.  The user who
   defines an operator becomes its owner.  If a schema name is given
   then the operator is created in the specified schema.  Otherwise it
   is created in the current schema.
  </para>
-->
<para>
<command>CREATE OPERATOR</command>定义一个新的
<replaceable class="parameter">name</replaceable>操作符。
定义该操作符的用户将成为其所有者。如果给出了一个模式名，
那么该操作符将在指定的模式中创建。否则它会在当前模式中创建。
</para>

<para>
<!--
   The operator name is a sequence of up to <symbol>NAMEDATALEN</>-1
   (63 by default) characters from the following list:
-->
操作符 name 是一个最多<symbol>NAMEDATALEN</>-1长的(缺省为 63 个)
下列字符组成的字符串：
<literallayout>
+ - * / &lt; &gt; = ~ ! @ # % ^ &amp; | ` ?
</literallayout>

   <!-- 
   There are a few restrictions on your choice of name: 
   -->
   你选择名字的时候有几个限制：
   <itemizedlist>
    <listitem>
     <!-- 
 <para><literal>&#045;-</literal> and <literal>/*</literal> cannot appear anywhere in an operator name,
     since they will be taken as the start of a comment.
     </para> 
 -->
<para>
<literal>--</literal>和<literal>/*</literal>不能在操作符名的任何地方出现，
因为它们会被认为是一个注释的开始。
</para>
    </listitem>
    <listitem>
     <!--
<para>
     A multicharacter operator name cannot end in <literal>+</literal> or
     <literal>-</literal>,
     unless the name also contains at least one of these characters:
<literallayout>
~ ! @ # % ^ &amp; | ` ?
</literallayout>
     For example, <literal>@-</literal> is an allowed operator name,
     but <literal>*-</literal> is not.
     This restriction allows <productname>PostgreSQL</productname> to
     parse SQL-compliant commands without requiring spaces between tokens.
     </para>
-->
<para>
一个多字符的操作符不能以<literal>+</literal>或<literal>-</literal>结尾，
除非该名字还包含至少下面字符之一：
<literallayout>
~ ! @ # % ^ &amp; | ` ?
</literallayout>
例如，<literal>@-</literal>是一个允许的操作符名，但<literal>*-</literal>不是。
这个限制允许<productname>PostgreSQL</productname>
分析 SQL 兼容的查询而不要求在符号之间有空白。
</para>
    </listitem>
    <listitem>
     <!--
<para>
     The use of <literal>=&gt;</> as an operator name is deprecated.  It may
     be disallowed altogether in a future release.
     </para>
-->
<para>
<literal>=&gt;</>作为一个操作符名的使用已经废弃了。可能在未来的版本中完全禁用。
</para>
    </listitem>
   </itemizedlist>
  </para>

  <!--
<para>
   The operator <literal>!=</literal> is mapped to
   <literal>&lt;&gt;</literal> on input, so these two names are always
   equivalent.
  </para>
-->
<para>
操作符<literal>!=</literal>在输入时映射成<literal>&lt;&gt;</literal>，
因此这两个名称总是等价的。
</para>

  <!--
<para>
   At least one of <literal>LEFTARG</> and <literal>RIGHTARG</> must be defined.  For
   binary operators, both must be defined. For right  unary
   operators, only <literal>LEFTARG</> should be defined, while for left
   unary operators only <literal>RIGHTARG</> should be defined.
  </para>
-->
<para>
至少需要定义一个<literal>LEFTARG</>和<literal>RIGHTARG</>。对于双目操作符来说，
两者都需要定义。对右目操作符来说，只需要定义<literal>LEFTARG</>，
而对于左目操作符来说，只需要定义<literal>RIGHTARG</>。
</para>

  <!--
<para>
   The <replaceable class="parameter">function_name</replaceable>
   procedure must have been previously defined using <command>CREATE
   FUNCTION</command> and must be defined to accept the correct number
   of arguments (either one or two) of the indicated types.
  </para>
-->
<para>
同样，<replaceable class="parameter">function_name</replaceable>
过程必须已经用<command>CREATE FUNCTION</command>定义过，
而且必须定义为接受正确数量的指定类型参数(一个或是两个)。
</para>

  <!--
<para>
   The other clauses specify optional operator optimization clauses.
   Their meaning is detailed in <xref linkend="xoper-optimization">.
  </para>
-->
<para>
其它子句声明可选的操作符优化子句。他们的含义在<xref linkend="xoper-optimization">里定义。
</para>

  <!--
<para>
   To be able to create an operator, you must have <literal>USAGE</literal>
   privilege on the argument types and the return type, as well
   as <literal>EXECUTE</literal> privilege on the underlying function.  If a
   commutator or negator operator is specified, you must own these operators.
  </para>
-->
<para>
要想能够创建一个操作符，你必须在参数类型和返回类型上有<literal>USAGE</literal>权限，
还要在底层函数上有<literal>EXECUTE</literal>权限。如果指定了交换或者负操作符，
你必须拥有这些操作符。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>Parameters</title>
-->
<title>参数</title>

    <variablelist>
     <varlistentry>
      <term><replaceable class="parameter">name</replaceable></term>
      <listitem>
       <!--
<para>
        The name of the operator to be defined. See above for allowable
        characters.  The name can be schema-qualified, for example
        <literal>CREATE OPERATOR myschema.+ (...)</>.  If not, then
        the operator is created in the current schema.  Two operators
        in the same schema can have the same name if they operate on
        different data types.  This is called
        <firstterm>overloading</>.
       </para>
-->
<para>
要定义的操作符。可用的字符见上文。其名字可以用模式修饰，
比如<literal>CREATE OPERATOR myschema.+ (...)</>。如果没有模式，
则在当前模式中创建操作符。同一个模式中的两个操作符可以有一样的名字，
只要他们操作不同的数据类型。这叫做<firstterm>重载</>。
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">function_name</replaceable></term>
      <listitem>
       <!--
<para>
        The function used to implement this operator.
       </para>
-->
<para>
用于实现该操作符的函数。
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">left_type</replaceable></term>
      <listitem>
       <!--
<para>
        The data type of the operator's left operand, if any.
        This option would be omitted for a left-unary operator.
       </para>
-->
<para>
操作符左边的参数数据类型，如果存在的话。如果是左目操作符，这个参数可以省略。
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">right_type</replaceable></term>
      <listitem>
       <!--
<para>
        The data type of the operator's right operand, if any.
        This option would be omitted for a right-unary operator.
       </para>
-->
<para>
操作符右边的参数数据类型，如果存在的话。如果是右目操作符，这个参数可以省略。
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">com_op</replaceable></term>
      <listitem>
       <!--
<para>
        The commutator of this operator.
       </para>
-->
<para>
该操作符对应的交换操作符。
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">neg_op</replaceable></term>
      <listitem>
       <!--
<para>
        The negator of this operator.
       </para>
-->
<para>
该操作符对应的负操作符。
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">res_proc</replaceable></term>
      <listitem>
       <!--
<para>
        The restriction selectivity estimator function for this operator.
       </para>
-->
<para>
此操作符约束选择性评估函数。
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">join_proc</replaceable></term>
      <listitem>
       <!--
<para>
        The join selectivity estimator function for this operator.
       </para>
-->
<para>
此操作符连接选择性评估函数。
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>HASHES</literal></term>
      <listitem>
       <!--
<para>
       Indicates this operator can support a hash join.
       </para>
-->
<para>
表明此操作符支持 Hash 连接。
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>MERGES</literal></term>
      <listitem>
       <!--
<para>
       Indicates this operator can support a merge join.
       </para>
-->
<para>
表明此操作符可以支持一个融合连接。
</para>
      </listitem>
     </varlistentry>
    </variablelist>

  <!--
<para>
   To give a schema-qualified operator name in <replaceable
   class="parameter">com_op</replaceable> or the other optional
   arguments, use the <literal>OPERATOR()</> syntax, for example:
<programlisting>
COMMUTATOR = OPERATOR(myschema.===) ,
</programlisting></para>
-->
<para>
使用<literal>OPERATOR()</>语法在<replaceable class="parameter">com_op</replaceable>
或者其它可选参数里给出一个模式修饰的操作符名，比如：
<programlisting>
COMMUTATOR = OPERATOR(myschema.===) ,
</programlisting>
</para>
 </refsect1>

 <refsect1>
  <!--
<title>Notes</title>
-->
<title>注意</title>

  <!--
<para>
   Refer to <xref linkend="xoper"> for further information.
  </para>
-->
<para>
参阅<xref linkend="xoper">中的操作符章节获取更多信息。
</para>

  <!--
<para>
   It is not possible to specify an operator's lexical precedence in
   <command>CREATE OPERATOR</>, because the parser's precedence behavior
   is hard-wired.  See <xref linkend="sql-precedence"> for precedence details.
  </para>
-->
<para>
在<command>CREATE OPERATOR</>中指定操作符的词法优先级是不可能的，
因为分析器的优先级行为是硬链接的。参阅<xref linkend="sql-precedence">
获取优先级的详细信息。
</para>

  <!--
<para>
   The obsolete options <literal>SORT1</>, <literal>SORT2</>,
   <literal>LTCMP</>, and <literal>GTCMP</> were formerly used to
   specify the names of sort operators associated with a merge-joinable
   operator.  This is no longer necessary, since information about
   associated operators is found by looking at B-tree operator families
   instead.  If one of these options is given, it is ignored except
   for implicitly setting <literal>MERGES</> true.
  </para>
-->
<para>
废弃的选项<literal>SORT1</>、<literal>SORT2</>、<literal>LTCMP</>和
<literal>GTCMP</>以前用于指定与可合并连接的操作符相关的排序操作符的名字。
现在不再需要了，因为相关操作符的信息通过查询B-tree操作符类来找到。
如果给出了这些中的一个选项，那么会忽略该选项，除非暗中设置<literal>MERGES</>为真。
</para>

  <!--
<para>
   Use <xref linkend="sql-dropoperator"> to delete user-defined operators
   from a database.  Use <xref linkend="sql-alteroperator"> to modify operators in a
   database.
  </para>
-->
<para>
使用<xref linkend="sql-dropoperator">从数据库中删除用户定义操作符。
使用<xref linkend="sql-alteroperator">修改一个数据库里的操作符。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>Examples</title>
-->
<title>例子</title>

 
<para>
<!--
   The following command defines a new operator, area-equality, for
   the data type <type>box</type>:
-->
下面命令定义一个新操作符：面积相等，用于<type>box</type>数据类型。
<programlisting>
CREATE OPERATOR === (
    LEFTARG = box,
    RIGHTARG = box,
    PROCEDURE = area_equal_procedure,
    COMMUTATOR = ===,
    NEGATOR = !==,
    RESTRICT = area_restriction_procedure,
    JOIN = area_join_procedure,
    HASHES, MERGES
);
</programlisting></para>
 </refsect1>

 <refsect1>
  <!--
<title>Compatibility</title>
-->
<title>兼容性</title>

  <!--
<para>
   <command>CREATE OPERATOR</command> is a
   <productname>PostgreSQL</productname> extension.  There are no
   provisions for user-defined operators in the SQL standard.
  </para>
-->
<para>
<command>CREATE OPERATOR</command>是<productname>PostgreSQL</productname>扩展。
SQL 标准中没有该语句。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>See Also</title>
-->
<title>又见</title>

  <simplelist type="inline">
   <member><xref linkend="sql-alteroperator"></member>
   <member><xref linkend="sql-createopclass"></member>
   <member><xref linkend="sql-dropoperator"></member>
  </simplelist>
 </refsect1>
</refentry>
