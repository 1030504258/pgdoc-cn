<!--
doc/src/sgml/ref/listen.sgml
PostgreSQL documentation
-->

<refentry id="SQL-LISTEN">
 <refmeta>
  <refentrytitle>LISTEN</refentrytitle>
  <manvolnum>7</manvolnum>
  <!--
<refmiscinfo>SQL - Language Statements</refmiscinfo>
-->
<refmiscinfo>SQL - 语句</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>LISTEN</refname>
  <!-- 
  <refpurpose>listen for a notification</refpurpose> 
  -->
  <refpurpose>监听一个通知</refpurpose>
 </refnamediv>

 <indexterm zone="sql-listen">
  <primary>LISTEN</primary>
 </indexterm>

 <refsynopsisdiv>
<synopsis>
LISTEN <replaceable class="PARAMETER">channel</replaceable>
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <!--
<title>Description</title>
-->
<title>描述</title>

  <!--
<para>
   <command>LISTEN</command> registers the current session as a
   listener on the notification channel named <replaceable
   class="PARAMETER">channel</replaceable>.
   If the current session is already registered as a listener for
   this notification channel, nothing is done.
  </para>
-->
<para>
<command>LISTEN</command>将当前会话注册为通知通道<replaceable
   class="PARAMETER">channel</replaceable>的监听器。
如果当前会话已经被注册为该通知通道的监听器，那么什么也不做。
</para>

  <!--
<para>
   Whenever the command <command>NOTIFY <replaceable
   class="PARAMETER">channel</replaceable></command> is invoked, either
   by this session or another one connected to the same database, all
   the sessions currently listening on that notification channel are
   notified, and each will in turn notify its connected client
   application.
  </para>
-->
<para>
当执行了命令<command>NOTIFY <replaceable class="PARAMETER">channel</replaceable></command>
后，不管是此会话还是其它连接到同一数据库的会话，所有正在监听此通知通道的会话都将收到通知，
并且接下来每个会话将通知与其相连的前端应用。
</para>

  <!--
<para>
   A session can be unregistered for a given notification channel with the
   <command>UNLISTEN</command> command.  A session's listen
   registrations are automatically cleared when the session ends.
  </para>
-->
<para>
使用<command>UNLISTEN</command>命令可以将一个会话内已注册的通知通道删除。同样，
会话退出时自动删除该会话正在监听的已注册通知通道。
</para>

  <!--
<para>
   The method a client application must use to detect notification events depends on
   which <productname>PostgreSQL</productname> application programming interface it
   uses.  With the <application>libpq</> library, the application issues
   <command>LISTEN</command> as an ordinary SQL command, and then must
   periodically call the function <function>PQnotifies</function> to find out
   whether any notification events have been received.  Other interfaces such as
   <application>libpgtcl</> provide higher-level methods for handling notify events; indeed,
   with <application>libpgtcl</> the application programmer should not even issue
   <command>LISTEN</command> or <command>UNLISTEN</command> directly.  See the
   documentation for the interface you are using for more details.
  </para>
-->
<para>
前端应用检测通知事件的方法取决于<productname>PostgreSQL</productname>应用使用的编程接口。
如果使用基本的<application>libpq</>库，那么应用将<command>LISTEN</command>当作普通 SQL 命令使用，
而且必须周期地调用<function>PQnotifies</function>过程来检测是否有通知到达。
其它像<application>libpgtcl</>接口提供了更高级的控制通知事件的方法；实际上，
使用<application>libpgtcl</>的应用程序员不应该直接使用<command>LISTEN</command>或<command>UNLISTEN</command>。
请参考你使用的接口的文档获取更多细节。
</para>

  <!--
<para>
   <xref linkend="sql-notify">
   contains a more extensive
   discussion of the use of <command>LISTEN</command> and
   <command>NOTIFY</command>.
  </para>
-->
<para>
<xref linkend="sql-notify">的手册页包含更广泛的关于<command>LISTEN</command>
和<command>NOTIFY</command>的使用的讨论。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>Parameters</title>
-->
<title>参数</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="PARAMETER">channel</replaceable></term>
    <listitem>
     <!--
<para>
      Name of a notification channel (any identifier).
     </para>
-->
<para>
通知通道的名字，可以是任意标识符。
</para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
  <!--
<title>Notes</title>
-->
<title>注意</title>

  <!--
<para>
   <command>LISTEN</command> takes effect at transaction commit.
   If <command>LISTEN</command> or <command>UNLISTEN</command> is executed
   within a transaction that later rolls back, the set of notification
   channels being listened to is unchanged.
  </para>
-->
<para>
<command>LISTEN</command>在事务提交时生效。如果<command>LISTEN</command>或
<command>UNLISTEN</command>在一个稍后回滚的事务中执行，那么被监听的通知通道的设置不会改变。
</para>
  <!--
<para>
   A transaction that has executed <command>LISTEN</command> cannot be
   prepared for two-phase commit.
  </para>
-->
<para>
一个已经执行了<command>LISTEN</command>的事务不能准备两阶段提交。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>Examples</title>
-->
<title>例子</title>

  <!--
<para>
   Configure and execute a listen/notify sequence from
   <application>psql</application>:

<programlisting>
LISTEN virtual;
NOTIFY virtual;
Asynchronous notification "virtual" received from server process with PID 8448.
</programlisting></para>
-->
<para>
在<application>psql</application>里配制和执行一个监听/通知序列：
<programlisting>
LISTEN virtual;
NOTIFY virtual;
Asynchronous notification "virtual" received from server process with PID 8448.
</programlisting>
</para>
 </refsect1>

 <refsect1>
  <!--
<title>Compatibility</title>
-->
<title>兼容性</title>

  <!--
<para>
   There is no <command>LISTEN</command> statement in the SQL
   standard.
  </para>
-->
<para>
SQL 标准里没有<command>LISTEN</command>语句。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>See Also</title>
-->
<title>又见</title>

  <simplelist type="inline">
   <member><xref linkend="sql-notify"></member>
   <member><xref linkend="sql-unlisten"></member>
  </simplelist>
 </refsect1>
</refentry>
