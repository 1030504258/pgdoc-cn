<!--
doc/src/sgml/ref/pg_rewind.sgml
PostgreSQL documentation
-->

<refentry id="app-pgrewind">
 <indexterm zone="app-pgrewind">
  <primary>pg_rewind</primary>
 </indexterm>

 <refmeta>
  <refentrytitle><application>pg_rewind</application></refentrytitle>
  <manvolnum>1</manvolnum>
  <refmiscinfo>Application</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>pg_rewind</refname>
  <!-- 
  <refpurpose>synchronize a <productname>PostgreSQL</productname> data directory with another data directory that was forked from the first one</refpurpose>
   -->
  <refpurpose>将<productname>PostgreSQL</productname>数据目录与另一个从第一个分叉的数据目录同步</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
  <cmdsynopsis>
   <command>pg_rewind</command>
   <arg rep="repeat"><replaceable>option</replaceable></arg>
   <group choice="plain">
    <group choice="req">
     <arg choice="plain"><option>-D </option></arg>
     <arg choice="plain"><option>--target-pgdata</option></arg>
    </group>
    <replaceable> directory</replaceable>
    <group choice="req">
     <arg choice="plain"><option>--source-pgdata=<replaceable>directory</replaceable></option></arg>
     <arg choice="plain"><option>--source-server=<replaceable>connstr</replaceable></option></arg>
    </group>
   </group>
  </cmdsynopsis>
 </refsynopsisdiv>

 <refsect1>
  <!-- 
  <title>Description</title>
  -->
  <title>描述</title>

  <!-- 
  <para>
   <application>pg_rewind</> is a tool for synchronizing a PostgreSQL cluster
   with another copy of the same cluster, after the clusters' timelines have
   diverged. A typical scenario is to bring an old master server back online
   after failover, as a standby that follows the new master.
  </para>
  -->
  <para>
   <application>pg_rewind</>是一个工具，用于在集群的时间轴发散后，
   将PostgreSQL集群与同一集群的另一个副本同步。
   典型的方案是在故障转移后使旧主服务器重新联机，作为跟随新主服务器的备用服务器。
  </para>

  <!-- 
  <para>
   The result is equivalent to replacing the target data directory with the
   source one. All files are copied, including configuration files. The
   advantage of <application>pg_rewind</> over taking a new base backup, or
   tools like <application>rsync</>, is that <application>pg_rewind</> does
   not require reading through all unchanged files in the cluster. That makes
   it a lot faster when the database is large and only a small portion of it
   differs between the clusters.
  </para>
  -->
  <para>
   结果等效于用源代码替换目标数据目录。复制所有文件，包括配置文件。
   <application>pg_rewind</>在进行新的基本备份或者像<application>rsync</>
   之类的工具方面的优点是，<application>pg_rewind</>不需要读取集群中所有未更改的文件。
   这使得它在数据库很大时更快，并且只有一小部分在集群之间不同。
  </para>

  <!-- 
  <para>
   <application>pg_rewind</> examines the timeline histories of the source
   and target clusters to determine the point where they diverged, and
   expects to find WAL in the target cluster's <filename>pg_xlog</> directory
   reaching all the way back to the point of divergence. In the typical
   failover scenario where the target cluster was shut down soon after the
   divergence, that is not a problem, but if the target cluster had run for a
   long time after the divergence, the old WAL files might not be present
   anymore. In that case, they can be manually copied from the WAL archive to
   the <filename>pg_xlog</> directory. Fetching missing files from a WAL
   archive automatically is currently not supported.
  </para>
  -->
  <para>
   <application>pg_rewind</>检查源和目标集群的时间线历史，以确定它们发散的点，
   并且期望在目标集群的<filename>pg_xlog</>目录中找到WAL，一直到达分歧点。
   在典型的故障切换情况下，目标集群在分歧后很快关闭，这不是问题，
   但如果目标集群在分歧后运行了很长时间，旧的WAL文件可能不再存在。
   在这种情况下，可以将它们从WAL归档手动复制到<filename>pg_xlog</>目录。
   目前不支持自动从WAL档案中获取缺少的文件。
  </para>

  <!-- 
  <para>
   When the target server is started up for the first time after running
   <application>pg_rewind</>, it will go into recovery mode and replay all
   WAL generated in the source server after the point of divergence.
   If some of the WAL was no longer available in the source server when
   <application>pg_rewind</> was run, and therefore could not be copied by
   <application>pg_rewind</> session, it needs to be made available when the
   target server is started up. That can be done by creating a
   <filename>recovery.conf</> file in the target data directory with a
   suitable <varname>restore_command</>.
  </para>
  -->
  <para>
   当目标服务器在运行<application>pg_rewind</>之后第一次启动时，
   它将进入恢复模式，并在发散点之后重放源服务器中生成的所有WAL。
   如果在<application>pg_rewind</>运行时，源服务器中的某些WAL不再可用，
   因此无法通过<application>pg_rewind</>会话复制，则需要在目标服务器启动时可用。
   这可以通过使用合适的<varname>restore_command</>
   在目标数据目录中创建一个<filename>recovery.conf</>文件来完成。
  </para>

  <!-- 
  <para>
   <application>pg_rewind</> requires that the target server either has
   the <xref linkend="guc-wal-log-hints"> option is enabled
   in <filename>postgresql.conf</> or that data checksums were enabled when
   the cluster was initialized with <application>initdb</>.  Neither of these
   are currently on by default.
   <xref linkend="guc-full-page-writes"> must also be enabled.  That is the
   default.
  </para>
  -->
  <para>
   <application>pg_rewind</>要求目标服务器在<filename>postgresql.conf</>
   中启用<xref linkend="guc-wal-log-hints">选项，或者在使用<application>initdb</>
   初始化集群时启用数据校验和。默认情况下，这两个都不是当前启用的。
   <xref linkend="guc-full-page-writes">也必须启用。这是默认值。
  </para>
 </refsect1>

 <refsect1>
  <!-- 
  <title>Options</title>
  -->
  <title>选项</title>

   <para>
    <!-- 
    <application>pg_rewind</application> accepts the following command-line
    arguments:
    -->
    <application>pg_rewind</application>接受下列命令行参数：

    <variablelist>
     <varlistentry>
      <term><option>-D <replaceable class="parameter">directory</replaceable></option></term>
      <term><option>--target-pgdata=<replaceable class="parameter">directory</replaceable></option></term>
      <listitem>
       <!-- 
       <para>
        This option specifies the target data directory that is synchronized
        with the source. The target server must shut down cleanly before
        running <application>pg_rewind</application>
       </para>
       -->
       <para>
        此选项指定与源同步的目标数据目录。目标服务器必须在运行
        <application>pg_rewind</application>之前完全关闭。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--source-pgdata=<replaceable class="parameter">directory</replaceable></option></term>
      <listitem>
       <!-- 
       <para>
        Specifies path to the data directory of the source server, to
        synchronize the target with. When <option>&#045;-source-pgdata</> is
        used, the source server must be cleanly shut down.
       </para>
       -->
       <para>
        指定源服务器的数据目录的路径，以便与目标服务器同步。
        当使用<option>--source-pgdata</>时，源服务器必须完全关闭。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--source-server=<replaceable class="parameter">connstr</replaceable></option></term>
      <listitem>
       <!-- 
       <para>
        Specifies a libpq connection string to connect to the source
        <productname>PostgreSQL</> server to synchronize the target with.
        The connection must be a normal (non-replication) connection 
        with superuser access. The server must be up and running, 
        and must not be in recovery mode.
       </para>
       -->
       <para>
        指定一个libpq连接字符串以连接到源<productname>PostgreSQL</>
        服务器以与目标同步。连接必须是具有超级用户访问权限的正常（非复制）连接。
        服务器必须已启动并正在运行，且不能处于恢复模式。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-n</option></term>
      <term><option>--dry-run</option></term>
      <listitem>
       <!-- 
       <para>
        Do everything except actually modifying the target directory.
       </para>
       -->
       <para>
        除了实际修改目标目录外，执行所有操作。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-P</option></term>
      <term><option>--progress</option></term>
      <listitem>
       <!-- 
       <para>
        Enables progress reporting. Turning this on will deliver an approximate
        progress report while copying data over from the source cluster.
       </para>
       -->
       <para>
        启用进度报告。打开此选项将在从源群集复制数据时提供大致的进度报告。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--debug</option></term>
      <listitem>
       <!-- 
       <para>
        Print verbose debugging output that is mostly useful for developers
        debugging <application>pg_rewind</>.
       </para>
       -->
       <para>
        打印详细调试输出，对于调试<application>pg_rewind</>的开发人员来说非常有用。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-V</option></term>
      <term><option>--version</option></term>
      <!-- 
      <listitem><para>Display version information, then exit.</para></listitem>
      -->
      <listitem><para>显示版本信息，然后退出。</para></listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-?</option></term>
      <term><option>--help</option></term>
      <!-- 
      <listitem><para>Show help, then exit.</para></listitem>
      -->
      <listitem><para>显示帮助，然后退出。</para></listitem>
     </varlistentry>

    </variablelist>
   </para>
 </refsect1>

 <refsect1>
  <!-- 
  <title>Environment</title>
  -->
  <title>环境</title>

  <!-- 
  <para>
   When <option>&#045;-source-server</> option is used,
   <application>pg_rewind</application> also uses the environment variables
   supported by <application>libpq</> (see <xref linkend="libpq-envars">).
  </para>
  -->
  <para>
   当使用<option>--source-server</>选项时，<application>pg_rewind</application>
   也使用<application>libpq</>支持的环境变量（参见<xref linkend="libpq-envars">）。
  </para>
 </refsect1>

 <refsect1>
  <!-- 
  <title>Notes</title>
  -->
  <title>注意</title>

  <refsect2>
   <!-- 
   <title>How it works</title>
   -->
   <title>它是怎么运行的</title>

   <!--
   <para>
    The basic idea is to copy everything from the new cluster to the old
    cluster, except for the blocks that we know to be the same.
   </para>
   -->
   <para>
    基本思想是将所有从新集群复制到旧集群，除了我们知道的那些相同的块。
   </para>

   <procedure>
    <step>
     <!-- 
     <para>
      Scan the WAL log of the old cluster, starting from the last checkpoint
      before the point where the new cluster's timeline history forked off
      from the old cluster. For each WAL record, make a note of the data
      blocks that were touched. This yields a list of all the data blocks
      that were changed in the old cluster, after the new cluster forked off.
     </para>
     -->
     <para>
      扫描旧集群的WAL日志，从新集群的时间线历史记录从旧集群分出的点之前的最后一个检查点开始。
      对于每个WAL记录，记下被触及的数据块。
      这将产生在新群集分叉之后在旧群集中更改的所有数据块的列表。
     </para>
    </step>
    <step>
     <!-- 
     <para>
      Copy all those changed blocks from the new cluster to the old cluster.
     </para>
     -->
     <para>
      将所有更改的块从新集群复制到旧集群。
     </para>
    </step>
    <step>
     <!-- 
     <para>
      Copy all other files such as <filename>clog</filename> and configuration files from the new cluster
      to the old cluster, everything except the relation files.
     </para>
     -->
     <para>
      将所有其他文件（如<filename>clog</filename>和配置文件）
      从新集群复制到旧集群，除关系文件外的所有内容。
     </para>
    </step>
    <step>
     <!-- 
     <para>
      Apply the WAL from the new cluster, starting from the checkpoint
      created at failover. (Strictly speaking, <application>pg_rewind</>
      doesn't apply the WAL, it just creates a backup label file indicating
      that when <productname>PostgreSQL</> is started, it will start replay
      from that checkpoint and apply all the required WAL.)
     </para>
     -->
     <para>
      从在故障切换时创建的检查点开始，从新集群应用WAL。
      （严格地说， <application>pg_rewind</>不应用WAL，
      它只是创建一个备份标签文件，指示当<productname>PostgreSQL</>启动时，
      它将从该检查点开始重放，并应用所有需要的WAL。）
     </para>
    </step>
   </procedure>
  </refsect2>
 </refsect1>

</refentry>
