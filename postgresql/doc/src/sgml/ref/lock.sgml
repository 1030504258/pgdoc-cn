<!--
doc/src/sgml/ref/lock.sgml
PostgreSQL documentation
-->

<refentry id="SQL-LOCK">
 <indexterm zone="sql-lock">
  <primary>LOCK</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>LOCK</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>LOCK</refname>
  <refpurpose>锁定一个表</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
LOCK [ TABLE ] [ ONLY ] <replaceable class="PARAMETER">name</replaceable> [ * ] [, ...] [ IN <replaceable class="PARAMETER">lockmode</replaceable> MODE ] [ NOWAIT ]

<phrase>其中 <replaceable class="PARAMETER">lockmode</replaceable> 可以是以下之一：</phrase>

    ACCESS SHARE | ROW SHARE | ROW EXCLUSIVE | SHARE UPDATE EXCLUSIVE
    | SHARE | SHARE ROW EXCLUSIVE | EXCLUSIVE | ACCESS EXCLUSIVE
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>描述</title>

  <para>
   <command>LOCK TABLE</command>获得一个表级锁，必要时会
   等待任何冲突锁被释放。如果指定了<literal>NOWAIT</literal>，
   <command>LOCK TABLE</command>不会等待以获得想要的锁：
   如果它不能立刻得到，该命令会被中止并且发出一个错误。一旦获取到，
   该锁会被在当前事务中一直持有（没有<command>UNLOCK
   TABLE</command>命令，锁总是在事务结束时被释放）。
  </para>

  <para>
   在为引用表的命令自动获取锁时，
   <productname>PostgreSQL</productname>总是尽可能使用最不严格的
   锁模式。提供<command>LOCK TABLE</command>是用于想要更严格
   的锁定的情况。例如，假设一个应用运行一个<literal>READ COMMITTED</>隔离级别的事务，
   并且需要确保一个表中的数据在该事务的期间保持稳定。要实现这个目的，
   必须在查询之前在表上获得<literal>SHARE</>锁模式。这将阻止并发的
   数据更改并且确保该表的后续读操作会看到已提交数据的一个稳定视图，
   因为<literal>SHARE</>锁模式与写入者所要求的
   <literal>ROW EXCLUSIVE</>锁有冲突，并且你的
   <command>LOCK TABLE <replaceable
   class="PARAMETER">name</replaceable> IN SHARE MODE</command>
   语句将等待，直到任何并发持有<literal>ROW
   EXCLUSIVE</literal>模式锁的持有者提交或者回滚。因此，一旦得到锁，
   就不会有未提交的写入还没有解决。更进一步，在释放该锁之前，任何
   人都不能开始。
  </para>

  <para>
   要在运行在<literal>REPEATABLE READ</>或<literal>SERIALIZABLE</>
   隔离级别的事务中得到类似的效果，你必须在执行任何
   <command>SELECT</>或者数据修改语句之前执行
   <command>LOCK TABLE</>语句。一个
   <literal>REPEATABLE READ</>或者<literal>SERIALIZABLE</>事务的
   数据视图将在它的第一个<command>SELECT</>或者数据修改语句开始
   时被冻结。在该事务中稍后的一个<command>LOCK
   TABLE</>仍将阻止并发写
   &mdash; 但它不会确保该事务读到的东西对应于最新的已提交值。
  </para>

  <!-- 
  <para>
   If a transaction of this sort is going to change the data in the
   table, then it should use <literal>SHARE ROW EXCLUSIVE</> lock mode
   instead of <literal>SHARE</> mode.  This ensures that only one
   transaction of this type runs at a time.  Without this, a deadlock
   is possible: two transactions might both acquire <literal>SHARE</>
   mode, and then be unable to also acquire <literal>ROW EXCLUSIVE</>
   mode to actually perform their updates.  (Note that a transaction's
   own locks never conflict, so a transaction can acquire <literal>ROW
   EXCLUSIVE</> mode when it holds <literal>SHARE</> mode &mdash; but not
   if anyone else holds <literal>SHARE</> mode.)  To avoid deadlocks,
   make sure all transactions acquire locks on the same objects in the
   same order, and if multiple lock modes are involved for a single
   object, then transactions should always acquire the most
   restrictive mode first.
  </para>
  -->
  <para>
   如果一个此类事务正要修改表中的数据，那么它应该使用
   <literal>SHARE ROW EXCLUSIVE</>锁模式来取代<literal>SHARE</>模式。
   这会保证一次只有一个此类事务运行。如果不用这种模式，死锁就可能出现：
   两个事务可能都要求<literal>SHARE</>模式，并且都不能还请求
   <literal>ROW EXCLUSIVE</>模式来真正地执行它们的更新。
   （注意一个事务所拥有的锁不会冲突，因此一个事务可以在它持有
   <literal>SHARE</>模式时可以请求<literal>ROW EXCLUSIVE</>模式 &mdash;
   但是如果有其他人持有<literal>SHARE</>模式时则不能）。为了避免死锁，
   确保所有的事务在同样的对象上以相同的顺序获得锁，
   并且如果在一个对象上涉及多种锁模式，
   事务应该总是首先获得最严格的那种模式。
  </para>

  <!-- 
  <para>
   More information about the lock modes and locking strategies can be
   found in <xref linkend="explicit-locking">.
  </para>
  -->
  <para>
   更多关于锁模式和锁策略的更多信息可见<xref linkend="explicit-locking">.
  </para>
 </refsect1>

 <refsect1>
  <!-- 
  <title>Parameters</title>
  -->
  <title>参数</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="PARAMETER">name</replaceable></term>
    <listitem>
     <!-- 
     <para>
      The name (optionally schema-qualified) of an existing table to
      lock. If <literal>ONLY</> is specified before the table name, only that
      table is locked. If <literal>ONLY</> is not specified, the table and all
      its descendant tables (if any) are locked.  Optionally, <literal>*</>
      can be specified after the table name to explicitly indicate that
      descendant tables are included.
     </para>
     -->
     <para>
      要锁定的一个现有表的名称（可以是模式限定的）。如果在表名前指定了
      <literal>ONLY</>，只有该表会被锁定。如果没有指定<literal>ONLY</>，
      该表和它所有的后代表（如果有）都会被锁定。可选地，
      在表名后指定<literal>*</>来显式地表示把后代表包括在内。
     </para>

     <!-- 
     <para>
      The command <literal>LOCK TABLE a, b;</> is equivalent to
      <literal>LOCK TABLE a; LOCK TABLE b;</>. The tables are locked
      one-by-one in the order specified in the <command>LOCK
      TABLE</command> command.
     </para>
     -->
     <para>
      命令<literal>LOCK TABLE a, b;</>等效于<literal>LOCK TABLE a; LOCK TABLE b;</>。
      这些表会被按照在<command>LOCK TABLE</command>中指定的顺序一个一个被锁定。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">lockmode</replaceable></term>
    <listitem>
     <!-- 
     <para>
      The lock mode specifies which locks this lock conflicts with.
      Lock modes are described in <xref linkend="explicit-locking">.
     </para>
     -->
     <para>
      锁模式指定这个锁和哪些锁冲突。锁模式在<xref linkend="explicit-locking">
      中描述。
     </para>

     <!-- 
     <para>
      If no lock mode is specified, then <literal>ACCESS
      EXCLUSIVE</literal>, the most restrictive mode, is used.
     </para>
     -->
     <para>
      如果没有指定锁模式，则使用最严格的模式
      <literal>ACCESS EXCLUSIVE</literal>。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>NOWAIT</literal></term>
    <listitem>
     <!-- 
     <para>
      Specifies that <command>LOCK TABLE</command> should not wait for
      any conflicting locks to be released: if the specified lock(s)
      cannot be acquired immediately without waiting, the transaction
      is aborted.
     </para>
     -->
     <para>
      指定<command>LOCK TABLE</command>不等待任何冲突锁被释放：
      如果指定的锁不能立即获得，那么事务就会中止。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
  <!-- 
  <title>Notes</title>
  -->
  <title>注解</title>

   <!-- 
   <para>
    <literal>LOCK TABLE ... IN ACCESS SHARE MODE</> requires <literal>SELECT</>
    privileges on the target table.  <literal>LOCK TABLE ... IN ROW EXCLUSIVE
    MODE</> requires <literal>INSERT</>, <literal>UPDATE</>, <literal>DELETE</>,
    or <literal>TRUNCATE</> privileges on the target table. All other forms of
    <command>LOCK</> require table-level <literal>UPDATE</>, <literal>DELETE</>,
    or <literal>TRUNCATE</> privileges.
   </para>
   -->
   <para>
    <literal>LOCK TABLE ... IN ACCESS SHARE MODE</>要求目标表上的<literal>SELECT</>
    权限。<literal>LOCK TABLE ... IN ROW EXCLUSIVE MODE</>要求目标表上的
    <literal>INSERT</>、<literal>UPDATE</>、<literal>DELETE</>或<literal>TRUNCATE</>
    权限。所有其他形式的<command>LOCK</>要求表级<literal>UPDATE</>、<literal>DELETE</>
    或<literal>TRUNCATE</>权限。
   </para>

   <!-- 
   <para>
    <command>LOCK TABLE</> is useless outside a transaction block: the lock
    would remain held only to the completion of the statement.  Therefore
    <productname>PostgreSQL</productname> reports an error if <command>LOCK</>
    is used outside a transaction block.
    Use
    <xref linkend="sql-begin"> and
    <xref linkend="sql-commit">
    (or <xref linkend="sql-rollback">)
    to define a transaction block.
   </para>
   -->
   <para>
    <command>LOCK TABLE</>在一个事务块外部没有用处：锁将只保持到语句完成。
    因此如果在一个事务块外部使用了<command>LOCK</>，<productname>PostgreSQL</productname>
    会报告一个错误。使用<xref linkend="sql-begin">和<xref linkend="sql-commit">
    （或者<xref linkend="sql-rollback">）定义一个事务块。
   </para>

  <!-- 
  <para>
   <command>LOCK TABLE</> only deals with table-level locks, and so
   the mode names involving <literal>ROW</> are all misnomers.  These
   mode names should generally be read as indicating the intention of
   the user to acquire row-level locks within the locked table.  Also,
   <literal>ROW EXCLUSIVE</> mode is a shareable table lock.  Keep in
   mind that all the lock modes have identical semantics so far as
   <command>LOCK TABLE</> is concerned, differing only in the rules
   about which modes conflict with which. For information on how to
   acquire an actual row-level lock, see <xref linkend="locking-rows">
   and the <xref linkend="sql-for-update-share"
   endterm="sql-for-update-share-title"> in the <command>SELECT</command>
   reference documentation.
  </para>
  -->
  <para>
   <command>LOCK TABLE</>只处理表级锁，因此涉及到<literal>ROW</>
   的模式名称在这里都是不当的。
   这些模式名称应该通常被解读为用户在被锁定表中获取行级锁的意向。还有，
   <literal>ROW EXCLUSIVE</>模式是一个可共享的表锁。记住就<command>LOCK TABLE</>
   而言，所有的锁模式都具有相同的语义，只有模式的冲突规则有所不同。
   关于如何获取一个真正的行级锁的信息，请见<command>SELECT</command>
   参考文档中的<xref linkend="locking-rows">和<xref linkend="sql-for-update-share"
   endterm="sql-for-update-share-title">。
  </para>
 </refsect1>

 <refsect1>
  <!-- 
  <title>Examples</title>
  -->
  <title>示例</title>

  <para>
   <!-- 
   Obtain a <literal>SHARE</> lock on a primary key table when going to perform
   inserts into a foreign key table:
   -->
   在将要向一个外键表中执行插入时在主键表上获得一个<literal>SHARE</>锁：

<programlisting>
BEGIN WORK;
LOCK TABLE films IN SHARE MODE;
SELECT id FROM films
    WHERE name = 'Star Wars: Episode I - The Phantom Menace';
-- <!-- Do ROLLBACK if record was not returned -->如果记录没有被返回就做 ROLLBACK
INSERT INTO films_user_comments VALUES
    (_id_, 'GREAT! I was waiting for it for so long!');
COMMIT WORK;
</programlisting>
  </para>

  <para>
   <!-- 
   Take a <literal>SHARE ROW EXCLUSIVE</> lock on a primary key table when going to perform
   a delete operation:
   -->
   在将要执行一次删除操作前在主键表上取一个<literal>SHARE ROW EXCLUSIVE</>锁：

<programlisting>
BEGIN WORK;
LOCK TABLE films IN SHARE ROW EXCLUSIVE MODE;
DELETE FROM films_user_comments WHERE id IN
    (SELECT id FROM films WHERE rating &lt; 5);
DELETE FROM films WHERE rating &lt; 5;
COMMIT WORK;
</programlisting></para>
 </refsect1>

 <refsect1>
  <!-- 
  <title>Compatibility</title>
  -->
  <title>兼容性</title>

  <!-- 
  <para>
   There is no <command>LOCK TABLE</command> in the SQL standard,
   which instead uses <command>SET TRANSACTION</command> to specify
   concurrency levels on transactions.  <productname>PostgreSQL</productname> supports that too;
   see <xref linkend="SQL-SET-TRANSACTION"> for details.
  </para>
  -->
  <para>
   在 SQL 标准中没有<command>LOCK TABLE</command>，SQL 标准中使用
   <command>SET TRANSACTION</command>指定事务上的并发层次。
   <productname>PostgreSQL</productname>也支持这样做，
   详见<xref linkend="SQL-SET-TRANSACTION">。
  </para>

  <!-- 
  <para>
   Except for <literal>ACCESS SHARE</>, <literal>ACCESS EXCLUSIVE</>,
   and <literal>SHARE UPDATE EXCLUSIVE</> lock modes, the
   <productname>PostgreSQL</productname> lock modes and the
   <command>LOCK TABLE</command> syntax are compatible with those
   present in <productname>Oracle</productname>.
  </para>
  -->
  <para>
   除<literal>ACCESS SHARE</>、<literal>ACCESS EXCLUSIVE</>和
   <literal>SHARE UPDATE EXCLUSIVE</>锁模式之外，<productname>PostgreSQL</productname>
   锁模式和<command>LOCK TABLE</command>语法与<productname>Oracle</productname>中的兼容。
  </para>
 </refsect1>
</refentry>
