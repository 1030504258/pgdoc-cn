<!--
doc/src/sgml/ref/savepoint.sgml
PostgreSQL documentation
-->

<refentry id="SQL-SAVEPOINT">
 <refmeta>
  <refentrytitle>SAVEPOINT</refentrytitle>
  <manvolnum>7</manvolnum>
  <!--
<refmiscinfo>SQL - Language Statements</refmiscinfo>
-->
<refmiscinfo>SQL - 语句</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>SAVEPOINT</refname>
  <!-- 
  <refpurpose>define a new savepoint within the current transaction</refpurpose>
  -->
  <refpurpose>在当前事务里定义一个新保存点</refpurpose>
 </refnamediv>

 <indexterm zone="sql-savepoint">
  <primary>SAVEPOINT</primary>
 </indexterm>

 <indexterm zone="sql-savepoint">
  <!-- 
  <primary>savepoints</primary>
  <secondary>defining</secondary> 
  -->
  <primary>保存点</primary>
  <secondary>定义</secondary>
 </indexterm>

 <refsynopsisdiv>
<synopsis>
SAVEPOINT <replaceable>savepoint_name</replaceable>
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <!--
<title>Description</title>
-->
<title>描述</title>

  <!--
<para>
   <command>SAVEPOINT</command> establishes a new savepoint within
   the current transaction.
  </para>
-->
<para>
<command>SAVEPOINT</command>在当前事务里建立一个新的保存点。
</para>

  <!--
<para>
   A savepoint is a special mark inside a transaction that allows all commands
   that are executed after it was established to be rolled back, restoring
   the transaction state to what it was at the time of the savepoint.
  </para>
-->
<para>
保存点是事务中的一个特殊记号，它允许将那些在它建立后执行的命令全部回滚，
把事务的状态恢复到保存点所在的时刻。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>Parameters</title>
-->
<title>参数</title>

  <variablelist>
   <varlistentry>
    <term><replaceable>savepoint_name</replaceable></term>
    <listitem>
     <!--
<para>
      The name to give to the new savepoint.
     </para>
-->
<para>
赋予新保存点的名字。
</para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
  <!--
<title>Notes</title>
-->
<title>注意</title>

  <!--
<para>
   Use <xref linkend="SQL-ROLLBACK-TO"> to
   rollback to a savepoint.  Use <xref linkend="SQL-RELEASE-SAVEPOINT">
   to destroy a savepoint, keeping
   the effects of commands executed after it was established.
  </para>
-->
<para>
使用<xref linkend="SQL-ROLLBACK-TO">回滚到一个保存点。使用<xref linkend="SQL-RELEASE-SAVEPOINT">
删除一个保存点，但是保留该保存点建立后执行的命令的效果。
</para>

  <!--
<para>
   Savepoints can only be established when inside a transaction block.
   There can be multiple savepoints defined within a transaction.
  </para>
-->
<para>
保存点只能在一个事务块里面建立。在一个事务里面可以定义多个保存点。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>Examples</title>
-->
<title>例子</title>

  <!--
<para>
   To establish a savepoint and later undo the effects of all commands executed
   after it was established:
<programlisting>
BEGIN;
    INSERT INTO table1 VALUES (1);
    SAVEPOINT my_savepoint;
    INSERT INTO table1 VALUES (2);
    ROLLBACK TO SAVEPOINT my_savepoint;
    INSERT INTO table1 VALUES (3);
COMMIT;
</programlisting>
   The above transaction will insert the values 1 and 3, but not 2.
  </para>
-->
<para>
建立一个保存点，稍后撤销这个保存点建立后执行的所有命令的结果：
<programlisting>
BEGIN;
    INSERT INTO table1 VALUES (1);
    SAVEPOINT my_savepoint;
    INSERT INTO table1 VALUES (2);
    ROLLBACK TO SAVEPOINT my_savepoint;
    INSERT INTO table1 VALUES (3);
COMMIT;
</programlisting>
上面的事务将插入数值 1 和 3 ，而不会插入 2 。
</para>

  <!--
<para>
   To establish and later destroy a savepoint:
<programlisting>
BEGIN;
    INSERT INTO table1 VALUES (3);
    SAVEPOINT my_savepoint;
    INSERT INTO table1 VALUES (4);
    RELEASE SAVEPOINT my_savepoint;
COMMIT;
</programlisting>
   The above transaction will insert both 3 and 4.
  </para>
-->
<para>
建立并稍后删除一个保存点：
<programlisting>
BEGIN;
    INSERT INTO table1 VALUES (3);
    SAVEPOINT my_savepoint;
    INSERT INTO table1 VALUES (4);
    RELEASE SAVEPOINT my_savepoint;
COMMIT;
</programlisting>
上面的事务将插入 3 和 4 。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>Compatibility</title>
-->
<title>兼容性</title>

  <!--
<para>
   SQL requires a savepoint to be destroyed automatically when another
   savepoint with the same name is established.  In
   <productname>PostgreSQL</>, the old savepoint is kept, though only the more
   recent one will be used when rolling back or releasing.  (Releasing the
   newer savepoint with <command>RELEASE SAVEPOINT</> will cause the older one
   to again become accessible to <command>ROLLBACK TO SAVEPOINT</> and
   <command>RELEASE SAVEPOINT</>.) Otherwise, <command>SAVEPOINT</command> is
   fully SQL conforming.
  </para>
-->
<para>
SQL 要求在另外一个同名保存点建立的时候自动删除前面那个同名保存点。
在<productname>PostgreSQL</>里，将保留旧的保存点，但是在回滚或者释放的时候，
只使用最近的那个。用<command>RELEASE SAVEPOINT</>释放了新的保存点将导致旧的再次成为
<command>ROLLBACK TO SAVEPOINT</>和<command>RELEASE SAVEPOINT</>可以访问的保存点。
否则，<command>SAVEPOINT</command>是完全符合 SQL 标准的。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>See Also</title>
-->
<title>又见</title>

  <simplelist type="inline">
   <member><xref linkend="sql-begin"></member>
   <member><xref linkend="sql-commit"></member>
   <member><xref linkend="sql-release-savepoint"></member>
   <member><xref linkend="sql-rollback"></member>
   <member><xref linkend="sql-rollback-to"></member>
  </simplelist>
 </refsect1>
</refentry>
