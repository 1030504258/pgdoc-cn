<!--
doc/src/sgml/ref/declare.sgml
PostgreSQL documentation
-->

<refentry id="SQL-DECLARE">
 <refmeta>
  <refentrytitle>DECLARE</refentrytitle>
  <manvolnum>7</manvolnum>
  <!--
<refmiscinfo>SQL - Language Statements</refmiscinfo>
-->
<refmiscinfo>SQL - 语句</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>DECLARE</refname>
  <!-- 
  <refpurpose>define a cursor</refpurpose> 
  -->
  <refpurpose>定义一个游标</refpurpose>
 </refnamediv>

 <indexterm zone="sql-declare">
  <primary>DECLARE</primary>
 </indexterm>

 <indexterm zone="sql-declare">
  <!-- 
  <primary>cursor</primary> 
  -->
  <primary>游标</primary>
  <secondary>DECLARE</secondary>
 </indexterm>

 <refsynopsisdiv>
<synopsis>
DECLARE <replaceable class="parameter">name</replaceable> [ BINARY ] [ INSENSITIVE ] [ [ NO ] SCROLL ]
    CURSOR [ { WITH | WITHOUT } HOLD ] FOR <replaceable class="parameter">query</replaceable>
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <!-- 
  <title>Description</title> 
  -->
  <title>描述</title>

  <!--
<para>
   <command>DECLARE</command> allows a user to create cursors, which
   can be used to retrieve
   a small number of rows at a time out of a larger query.
   After the cursor is created, rows are fetched from it using
   <xref linkend="sql-fetch">.
  </para>
-->
<para>
<command>DECLARE</command>允许用户创建游标，用于在一个大的查询里面检索少数几行数据。
在游标建立后，使用<xref linkend="sql-fetch">可以从中取出行。
</para>

  <note>
   <!--
<para>
    This page describes usage of cursors at the SQL command level.
    If you are trying to use cursors inside a <application>PL/pgSQL</>
    function, the rules are different &mdash;
    see <xref linkend="plpgsql-cursors">.
   </para>
-->
<para>
本页描述游标在SQL命令级别的使用。如果你试图在一个<application>PL/pgSQL</>函数里面使用游标，
结果往往是不同的；参阅<xref linkend="plpgsql-cursors">。
</para>
  </note>
 </refsect1>

 <refsect1>
  <!--
<title>Parameters</title>
-->
<title>参数</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="parameter">name</replaceable></term>
    <listitem>
     <!--
<para>
      The name of the cursor to be created.
     </para>
-->
<para>
将要创建的游标名。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>BINARY</literal></term>
    <listitem>
     <!--
<para>
      Causes the cursor to return data in binary rather than in text format.
     </para>
-->
<para>
令游标以二进制而不是文本格式返回数据。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>INSENSITIVE</literal></term>
    <listitem>
     <!--
<para>
      Indicates that data retrieved from the cursor should be
      unaffected by updates to the table(s) underlying the cursor that occur
      after the cursor is created.  In <productname>PostgreSQL</productname>,
      this is the default behavior; so this key word has no
      effect and is only accepted for compatibility with the SQL standard.
     </para>
-->
<para>
表明从游标检索出来的数据不应该被发生在游标创建后的游标的更新动作影响。
在<productname>PostgreSQL</productname>里，这是缺省行为；这个关键字没有什么作用，
只在为了和 SQL 标准兼容的时候接受它。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>SCROLL</literal></term>
    <term><literal>NO SCROLL</literal></term>
    <listitem>
     <!--
<para><literal>SCROLL</literal> specifies that the cursor can be used
      to retrieve rows in a nonsequential fashion (e.g.,
      backward). Depending upon the complexity of the query's
      execution plan, specifying <literal>SCROLL</literal> might impose
      a performance penalty on the query's execution time.
      <literal>NO SCROLL</literal> specifies that the cursor cannot be
      used to retrieve rows in a nonsequential fashion.  The default is to
      allow scrolling in some cases; this is not the same as specifying
      <literal>SCROLL</literal>. See <xref linkend="sql-declare-notes"
      endterm="sql-declare-notes-title"> for details.
     </para>
-->
<para>
<literal>SCROLL</literal>声明该游标可以用于以倒序的方式检索数据行(也就是反向检索)。
根据查询的执行计划的不同，声明<literal>SCROLL</literal>可能会对查询的执行时间有不良影响。
<literal>NO SCROLL</literal>声明该游标不能用于以倒序的方式检索数据行。
缺省仅允许在某些情况下倒序检索，这不同于指定<literal>SCROLL</literal>。
参见<xref linkend="sql-declare-notes" endterm="sql-declare-notes-title">获取细节。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>WITH HOLD</literal></term>
    <term><literal>WITHOUT HOLD</literal></term>
    <listitem>
     <!--
<para><literal>WITH HOLD</literal> specifies that the cursor can
      continue to be used after the transaction that created it
      successfully commits.  <literal>WITHOUT HOLD</literal> specifies
      that the cursor cannot be used outside of the transaction that
      created it. If neither <literal>WITHOUT HOLD</literal> nor
      <literal>WITH HOLD</literal> is specified, <literal>WITHOUT
      HOLD</literal> is the default.
     </para>
-->
<para>
<literal>WITH HOLD</literal>(缺省)声明该游标可以在创建它的事务成功提交后继续使用。
<literal>WITHOUT HOLD</literal>声明该游标不能在创建它的事务之外使用。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">query</replaceable></term>
    <listitem>
     <!--
<para>
      A <xref linkend="sql-select"> or
      <xref linkend="sql-values"> command
      which will provide the rows to be returned by the cursor.
     </para>
-->
<para>
一个<xref linkend="sql-select">或<xref linkend="sql-values">命令，它提供游标返回的行。
</para>
    </listitem>
   </varlistentry>
  </variablelist>

  <!--
<para>
   The key words <literal>BINARY</literal>,
   <literal>INSENSITIVE</literal>, and <literal>SCROLL</literal> can
   appear in any order.
  </para>
-->
<para>
<literal>BINARY</literal>, <literal>INSENSITIVE</literal>, <literal>SCROLL</literal>
关键字可以以任何顺序出现。
</para>
 </refsect1>

 <refsect1 id="sql-declare-notes">
  <!-- 
  <title id="sql-declare-notes-title">Notes</title> 
  -->
  <title id="sql-declare-notes-title">注意</title>

  <!--
<para>
   Normal cursors return data in text format, the same as a
   <command>SELECT</> would produce.  The <literal>BINARY</> option
   specifies that the cursor should return data in binary format.
   This reduces conversion effort for both the server and client,
   at the cost of more programmer effort to deal with platform-dependent
   binary data formats.
   As an example, if a query returns a value of one from an integer column,
   you would get a string of <literal>1</> with a default cursor,
   whereas with a binary cursor you would get
   a 4-byte field containing the internal representation of the value
   (in big-endian byte order).
  </para>
-->
<para>
通常游标和<command>SELECT</>一样返回文本格式。<literal>BINARY</>
选项声明游标应该返回二进制格式的数据。这样就减少了服务器和客户端的转化工作，
花费程序员更多的工作解决平台依赖的二进制数据格式问题。
比如，如果查询从某个整数列返回 1 ，在缺省的游标里将获得一个字符串<literal>1</>，
但在二进制游标里将得到一个 4 字节的包含该数值内部形式的数值(大端顺序)。
</para>

  <!--
<para>
   Binary cursors should be used carefully.  Many applications,
   including <application>psql</application>, are not prepared to
   handle binary cursors and expect data to come back in the text
   format.
  </para>
-->
<para>
应该小心使用二进制游标。一些客户端应用(比如<application>psql</application>)
是不能识别二进制游标的，它们期望返回的数据是文本格式。
</para>

  <note>
   <!--
<para>
    When the client application uses the <quote>extended query</> protocol
    to issue a <command>FETCH</> command, the Bind protocol message
    specifies whether data is to be retrieved in text or binary format.
    This choice overrides the way that the cursor is defined.  The concept
    of a binary cursor as such is thus obsolete when using extended query
    protocol &mdash; any cursor can be treated as either text or binary.
   </para>
-->
<para>
如果客户端应用使用<quote>扩展查询</>协议发出<command>FETCH</>命令，
那么 Bind 协议声明数据是用文本还是用二进制格式检索。这个选择覆盖游标的定义。
因此，在使用扩展查询协议的时候，二进制游标的概念已经过时了，
任何游标都可以当作文本或者二进制的格式发出。
</para>
  </note>

   <!--
<para>
    Unless <literal>WITH HOLD</literal> is specified, the cursor
    created by this command can only be used within the current
    transaction.  Thus, <command>DECLARE</> without <literal>WITH
    HOLD</literal> is useless outside a transaction block: the cursor would
    survive only to the completion of the statement.  Therefore
    <productname>PostgreSQL</productname> reports an error if such a
    command is used outside a transaction block.
    Use
    <xref linkend="sql-begin"> and
    <xref linkend="sql-commit">
    (or <xref linkend="sql-rollback">)
    to define a transaction block.
   </para>
-->
<para>
如果没有声明<literal>WITH HOLD</literal>，那么这个命令创建的游标只能在当前事务中使用。
这样，不带<literal>WITH HOLD</literal>的<command>DECLARE</>在事务块外面没有任何用处：
游标将一直存活到事务结束。因此，<productname>PostgreSQL</productname>
将在这样的命令出现在事务块外面的时候报错。使用<xref linkend="sql-begin">, 
<xref linkend="sql-commit">和<xref linkend="sql-rollback">定义一个事务块。
</para>

   <!--
<para>
    If <literal>WITH HOLD</literal> is specified and the transaction
    that created the cursor successfully commits, the cursor can
    continue to be accessed by subsequent transactions in the same
    session.  (But if the creating transaction is aborted, the cursor
    is removed.)  A cursor created with <literal>WITH HOLD</literal>
    is closed when an explicit <command>CLOSE</command> command is
    issued on it, or the session ends.  In the current implementation,
    the rows represented by a held cursor are copied into a temporary
    file or memory area so that they remain available for subsequent
    transactions.
   </para>
-->
<para>
如果声明了<literal>WITH HOLD</literal>并且创建该游标的事务成功提交，
那么游标还可以在同一会话随后的事务里访问。但如果创建它的事务回滚，
那么游标被删除。带<literal>WITH HOLD</literal>创建的游标是用一个明确的
<command>CLOSE</command>命令或者是会话终止来关闭的。在目前的实现里，
由一个游标代表的行是被拷贝到一个临时文件或者内存区里的，
这样他们就仍然可以在随后的事务中被访问。
</para>

   <!--
<para>
    <literal>WITH HOLD</literal> may not be specified when the query
    includes <literal>FOR UPDATE</> or <literal>FOR SHARE</>.
   </para>
-->
<para>
当查询包含<literal>FOR UPDATE</>或<literal>FOR SHARE</>的时候，
不能指定<literal>WITH HOLD</literal>。
</para>

   <!--
<para>
    The <literal>SCROLL</> option should be specified when defining a
    cursor that will be used to fetch backwards.  This is required by
    the SQL standard.  However, for compatibility with earlier
    versions, <productname>PostgreSQL</productname> will allow
    backward fetches without <literal>SCROLL</>, if the cursor's query
    plan is simple enough that no extra overhead is needed to support
    it. However, application developers are advised not to rely on
    using backward fetches from a cursor that has not been created
    with <literal>SCROLL</literal>.  If <literal>NO SCROLL</> is
    specified, then backward fetches are disallowed in any case.
   </para>
-->
<para>
在定义一个要用来反向抓取的游标的时候，应该声明<literal>SCROLL</>选项，
这是 SQL 标准要求的。不过，为了和早期的版本兼容，
只要游标的查询计划简单得不需要额外的开销，<productname>PostgreSQL</productname>
在没有声明<literal>SCROLL</>的时候也允许反向抓取。不过，
建议应用开发人员不要依赖于使用没有使用<literal>SCROLL</literal>
定义的游标的反向查找功能。如果声明了<literal>NO SCROLL</> ，
那么不管怎样都会禁止反向抓取的功能。
</para>

   <!--
<para>
    Backward fetches are also disallowed when the query
    includes <literal>FOR UPDATE</> or <literal>FOR SHARE</>; therefore
    <literal>SCROLL</literal> may not be specified in this case.
   </para>
-->
<para>
当查询包含<literal>FOR UPDATE</>或<literal>FOR SHARE</>时也不允许反向抓取；
因此在这种情况下不能声明<literal>SCROLL</literal>。
</para>

   <caution>
    <!--
<para>
     Scrollable and <literal>WITH HOLD</literal> cursors may give unexpected
     results if they invoke any volatile functions (see <xref
     linkend="xfunc-volatility">).  When a previously fetched row is
     re-fetched, the functions might be re-executed, perhaps leading to
     results different from the first time.  One workaround for such cases
     is to declare the cursor <literal>WITH HOLD</literal> and commit the
     transaction before reading any rows from it.  This will force the
     entire output of the cursor to be materialized in temporary storage,
     so that volatile functions are executed exactly once for each row.
    </para>
-->
<para>
如果调用任何不稳定的函数，那么可以回滚并且<literal>WITH HOLD</literal>
游标可能给出意外的结果（参阅xref linkend="xfunc-volatility">）。
当重新抓取到以前抓取到的行时，函数可能会重新执行，可能导致结果与之前的不同。
一个绕开这种情况的方法是声明<literal>WITH HOLD</literal>游标，
并且在从它读取任何行之前提交事务。这将强制游标的整个输出在临时存储中物化，
这样不稳定的函数精确的每行只执行一次。
</para>
   </caution>

   <!--
<para>
    If the cursor's query includes <literal>FOR UPDATE</> or <literal>FOR
    SHARE</>, then returned rows are locked at the time they are first
    fetched, in the same way as for a regular
    <xref linkend="sql-select"> command with
    these options.
    In addition, the returned rows will be the most up-to-date versions;
    therefore these options provide the equivalent of what the SQL standard
    calls a <quote>sensitive cursor</>.  (Specifying <literal>INSENSITIVE</>
    together with <literal>FOR UPDATE</> or <literal>FOR SHARE</> is an error.)
   </para>
-->
<para>
如果游标的查询包括<literal>FOR UPDATE</>或<literal>FOR SHARE</>，
那么返回的行在它们第一次被抓取的时候锁定，和有这个选项的<xref linkend="sql-select">
一样。另外，返回行将是最新的版本；因此提供这些选项相当于SQL标准调用一个
<quote>敏感的游标</>。（和<literal>FOR UPDATE</>或
<literal>FOR SHARE</>一起指定<literal>INSENSITIVE</>是错误的。）
</para>

   <caution>
    <!--
<para>
     It is generally recommended to use <literal>FOR UPDATE</> if the cursor
     is intended to be used with <command>UPDATE ... WHERE CURRENT OF</> or
     <command>DELETE ... WHERE CURRENT OF</>.  Using <literal>FOR UPDATE</>
     prevents other sessions from changing the rows between the time they are
     fetched and the time they are updated.  Without <literal>FOR UPDATE</>,
     a subsequent <literal>WHERE CURRENT OF</> command will have no effect if
     the row was changed since the cursor was created.
    </para>
-->
<para>
如果游标定义为使用<command>UPDATE ... WHERE CURRENT OF</>或
<command>DELETE ... WHERE CURRENT OF</>，通常推荐使用<literal>FOR UPDATE</>。
使用<literal>FOR UPDATE</>阻止其他会话在抓取和更新之间改变行。没有<literal>FOR UPDATE</>，
如果在创建游标后改变了行，那么随后的<literal>WHERE CURRENT OF</>命令将没有作用。
</para>

    <!--
<para>
     Another reason to use <literal>FOR UPDATE</> is that without it, a
     subsequent <literal>WHERE CURRENT OF</> might fail if the cursor query
     does not meet the SQL standard's rules for being <quote>simply
     updatable</> (in particular, the cursor must reference just one table
     and not use grouping or <literal>ORDER BY</>).  Cursors
     that are not simply updatable might work, or might not, depending on plan
     choice details; so in the worst case, an application might work in testing
     and then fail in production.
    </para>
-->
<para>
使用<literal>FOR UPDATE</>的另外一个原因是，没有它，如果游标查询不符合SQL标准的
<quote>简单可更新</>原则，那么随后的<literal>WHERE CURRENT OF</>可能会失败
（尤其是，游标必须只引用一个表，并且不使用分组或<literal>ORDER BY</>）。
不是简单可更新的游标可能会也可能不会工作，取决于计划选择细节；所以在最坏的情况下，
应用可能在测试中工作而在生产中失败。
</para>

    <!--
<para>
     The main reason not to use <literal>FOR UPDATE</> with <literal>WHERE
     CURRENT OF</> is if you need the cursor to be scrollable, or to be
     insensitive to the subsequent updates (that is, continue to show the old
     data).  If this is a requirement, pay close heed to the caveats shown
     above.
    </para>
-->
<para>
不和<literal>WHERE CURRENT OF</>一起使用<literal>FOR UPDATE</>的主要原因是，
你需要游标是可回滚的，或对随后的更新不敏感的（也就是说，持续显示旧的数据）。
如果需要这样，请注意上面显示的注意事项。
</para>
   </caution>

   <!--
<para>
    The SQL standard only makes provisions for cursors in embedded
    <acronym>SQL</acronym>.  The <productname>PostgreSQL</productname>
    server does not implement an <command>OPEN</command> statement for
    cursors; a cursor is considered to be open when it is declared.
    However, <application>ECPG</application>, the embedded SQL
    preprocessor for <productname>PostgreSQL</productname>, supports
    the standard SQL cursor conventions, including those involving
    <command>DECLARE</command> and <command>OPEN</command> statements.
   </para>
-->
<para>
SQL 标准中的游标只能在嵌入<acronym>SQL</acronym>(ESQL)的应用中使用。
<productname>PostgreSQL</productname>服务器没有一个明确的<command>OPEN</command>
语句；一个游标被认为在定义时就已经打开了。不过，<productname>PostgreSQL</productname>
嵌入的 SQL 预处理器(<application>ECPG</application>)支持 SQL 标准的习惯，
包括那些和<command>DECLARE</command>和<command>OPEN</command>相关的语句。
</para>

   <!--
<para>
    You can see all available cursors by querying the <link
    linkend="view-pg-cursors"><structname>pg_cursors</structname></link>
    system view.
   </para>
-->
<para>
可以通过查询<link linkend="view-pg-cursors"><structname>pg_cursors</structname></link>
系统视图看到所有可用游标。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>Examples</title>
-->
<title>例子</title>

  <!--
<para>
   To declare a cursor:
<programlisting>
DECLARE liahona CURSOR FOR SELECT * FROM films;
</programlisting>
   See <xref linkend="sql-fetch"> for more
   examples of cursor usage.
  </para>
-->
<para>
定义一个游标：
<programlisting>
DECLARE liahona CURSOR FOR SELECT * FROM films;
</programlisting>
参阅<xref linkend="sql-fetch">获取有关游标使用的更多例子。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>Compatibility</title>
-->
<title>兼容性</title>

  <!--
<para>
   The SQL standard says that it is implementation-dependent whether cursors
   are sensitive to concurrent updates of the underlying data by default.  In
   <productname>PostgreSQL</productname>, cursors are insensitive by default,
   and can be made sensitive by specifying <literal>FOR UPDATE</>.  Other
   products may work differently.
  </para>
-->
<para>
SQL标准说它是依赖于实现的，不管游标对缺省的底层数据的当前更新是否敏感。
在<productname>PostgreSQL</productname>中，游标缺省是敏感的，并且可以通过声明
<literal>FOR UPDATE</>使其敏感。其他产品工作可能不同。
</para>

  <!--
<para>
   The SQL standard allows cursors only in embedded
   <acronym>SQL</acronym> and in modules. <productname>PostgreSQL</>
   permits cursors to be used interactively.
  </para>
-->
<para>
SQL 标准只允许在嵌入的<acronym>SQL</acronym>中和模块中使用游标。
<productname>PostgreSQL</>允许交互地使用游标。
</para>

  <!--
<para>
   Binary cursors are a <productname>PostgreSQL</productname>
   extension.
  </para>
-->
<para>
二进制游标是<productname>PostgreSQL</productname>扩展。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>See Also</title>
-->
<title>又见</title>

  <simplelist type="inline">
   <member><xref linkend="sql-close"></member>
   <member><xref linkend="sql-fetch"></member>
   <member><xref linkend="sql-move"></member>
  </simplelist>
 </refsect1>
</refentry>
