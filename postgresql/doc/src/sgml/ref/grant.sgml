<!--
doc/src/sgml/ref/grant.sgml
PostgreSQL documentation
-->

<refentry id="SQL-GRANT">
 <refmeta>
  <refentrytitle>GRANT</refentrytitle>
  <manvolnum>7</manvolnum>
  <!--
<refmiscinfo>SQL - Language Statements</refmiscinfo>
-->
<refmiscinfo>SQL - 语句</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>GRANT</refname>
  <!-- 
  <refpurpose>define access privileges</refpurpose> 
  -->
  <refpurpose>赋予访问权限</refpurpose>
 </refnamediv>

 <indexterm zone="sql-grant">
  <primary>GRANT</primary>
 </indexterm>

 <refsynopsisdiv>
<synopsis>
GRANT { { SELECT | INSERT | UPDATE | DELETE | TRUNCATE | REFERENCES | TRIGGER }
    [, ...] | ALL [ PRIVILEGES ] }
    ON { [ TABLE ] <replaceable class="PARAMETER">table_name</replaceable> [, ...]
         | ALL TABLES IN SCHEMA <replaceable class="PARAMETER">schema_name</replaceable> [, ...] }
    TO { [ GROUP ] <replaceable class="PARAMETER">role_name</replaceable> | PUBLIC } [, ...] [ WITH GRANT OPTION ]

GRANT { { SELECT | INSERT | UPDATE | REFERENCES } ( <replaceable class="PARAMETER">column_name</replaceable> [, ...] )
    [, ...] | ALL [ PRIVILEGES ] ( <replaceable class="PARAMETER">column_name</replaceable> [, ...] ) }
    ON [ TABLE ] <replaceable class="PARAMETER">table_name</replaceable> [, ...]
    TO { [ GROUP ] <replaceable class="PARAMETER">role_name</replaceable> | PUBLIC } [, ...] [ WITH GRANT OPTION ]

GRANT { { USAGE | SELECT | UPDATE }
    [, ...] | ALL [ PRIVILEGES ] }
    ON { SEQUENCE <replaceable class="PARAMETER">sequence_name</replaceable> [, ...]
         | ALL SEQUENCES IN SCHEMA <replaceable class="PARAMETER">schema_name</replaceable> [, ...] }
    TO { [ GROUP ] <replaceable class="PARAMETER">role_name</replaceable> | PUBLIC } [, ...] [ WITH GRANT OPTION ]

GRANT { { CREATE | CONNECT | TEMPORARY | TEMP } [, ...] | ALL [ PRIVILEGES ] }
    ON DATABASE <replaceable>database_name</replaceable> [, ...]
    TO { [ GROUP ] <replaceable class="PARAMETER">role_name</replaceable> | PUBLIC } [, ...] [ WITH GRANT OPTION ]

GRANT { USAGE | ALL [ PRIVILEGES ] }
    ON DOMAIN <replaceable>domain_name</replaceable> [, ...]
    TO { [ GROUP ] <replaceable class="PARAMETER">role_name</replaceable> | PUBLIC } [, ...] [ WITH GRANT OPTION ]

GRANT { USAGE | ALL [ PRIVILEGES ] }
    ON FOREIGN DATA WRAPPER <replaceable>fdw_name</replaceable> [, ...]
    TO { [ GROUP ] <replaceable class="PARAMETER">role_name</replaceable> | PUBLIC } [, ...] [ WITH GRANT OPTION ]

GRANT { USAGE | ALL [ PRIVILEGES ] }
    ON FOREIGN SERVER <replaceable>server_name</replaceable> [, ...]
    TO { [ GROUP ] <replaceable class="PARAMETER">role_name</replaceable> | PUBLIC } [, ...] [ WITH GRANT OPTION ]

GRANT { EXECUTE | ALL [ PRIVILEGES ] }
    ON { FUNCTION <replaceable>function_name</replaceable> ( [ [ <replaceable class="parameter">argmode</replaceable> ] [ <replaceable class="parameter">arg_name</replaceable> ] <replaceable class="parameter">arg_type</replaceable> [, ...] ] ) [, ...]
         | ALL FUNCTIONS IN SCHEMA <replaceable class="PARAMETER">schema_name</replaceable> [, ...] }
    TO { [ GROUP ] <replaceable class="PARAMETER">role_name</replaceable> | PUBLIC } [, ...] [ WITH GRANT OPTION ]

GRANT { USAGE | ALL [ PRIVILEGES ] }
    ON LANGUAGE <replaceable>lang_name</replaceable> [, ...]
    TO { [ GROUP ] <replaceable class="PARAMETER">role_name</replaceable> | PUBLIC } [, ...] [ WITH GRANT OPTION ]

GRANT { { SELECT | UPDATE } [, ...] | ALL [ PRIVILEGES ] }
    ON LARGE OBJECT <replaceable class="PARAMETER">loid</replaceable> [, ...]
    TO { [ GROUP ] <replaceable class="PARAMETER">role_name</replaceable> | PUBLIC } [, ...] [ WITH GRANT OPTION ]

GRANT { { CREATE | USAGE } [, ...] | ALL [ PRIVILEGES ] }
    ON SCHEMA <replaceable>schema_name</replaceable> [, ...]
    TO { [ GROUP ] <replaceable class="PARAMETER">role_name</replaceable> | PUBLIC } [, ...] [ WITH GRANT OPTION ]

GRANT { CREATE | ALL [ PRIVILEGES ] }
    ON TABLESPACE <replaceable>tablespace_name</replaceable> [, ...]
    TO { [ GROUP ] <replaceable class="PARAMETER">role_name</replaceable> | PUBLIC } [, ...] [ WITH GRANT OPTION ]

GRANT { USAGE | ALL [ PRIVILEGES ] }
    ON TYPE <replaceable>type_name</replaceable> [, ...]
    TO { [ GROUP ] <replaceable class="PARAMETER">role_name</replaceable> | PUBLIC } [, ...] [ WITH GRANT OPTION ]

GRANT <replaceable class="PARAMETER">role_name</replaceable> [, ...] TO <replaceable class="PARAMETER">role_name</replaceable> [, ...] [ WITH ADMIN OPTION ]
</synopsis>
 </refsynopsisdiv>

 <refsect1 id="sql-grant-description">
  <!--
<title>Description</title>
-->
<title>描述</title>

  <!--
<para>
   The <command>GRANT</command> command has two basic variants: one
   that grants privileges on a database object (table, column, view, foreign
   table, sequence, database, foreign-data wrapper, foreign server, function,
   procedural language, schema, or tablespace), and one that grants
   membership in a role.  These variants are similar in many ways, but
   they are different enough to be described separately.
  </para>
-->
<para>
<command>GRANT</command>命令有两个基本变种：一个变种是给数据库对象
(表、字段、视图、外部表、序列、数据库、外部数据封装器、外部服务器、函数、过程语言、
模式、表空间)赋予权限；一个变种是赋予一个角色中的成员关系。这些变种在很多方面都非常类似，
但是它们之间的区别也有足够理由来分开描述。
</para>

 <refsect2 id="sql-grant-description-objects">
  <!-- 
  <title>GRANT on Database Objects</title> 
  -->
  <title>在数据库对象上的 GRANT</title>

  <!--
<para>
   This variant of the <command>GRANT</command> command gives specific
   privileges on a database object to
   one or more roles.  These privileges are added
   to those already granted, if any.
  </para>
-->
<para>
这个变种的<command>GRANT</command>命令在数据库对象上给一个或多个角色授予特定的权限。
这些权限追加到已经授予的权限上。
</para>

  <!--
<para>
   There is also an option to grant privileges on all objects of the same
   type within one or more schemas.  This functionality is currently supported
   only for tables, sequences, and functions (but note that <literal>ALL
   TABLES</> is considered to include views and foreign tables).
  </para>
-->
<para>
也有一个选项赋予一个或多个模式内的相同类型的所有对象权限。这个功能当前只支持表，
序列和函数（但请注意<literal>ALL TABLES</>被认为包含视图和外部表）。
</para>

  <!--
<para>
   The key word <literal>PUBLIC</literal> indicates that the
   privileges are to be granted to all roles, including those that might
   be created later.  <literal>PUBLIC</literal> can be thought of as an
   implicitly defined group that always includes all roles.
   Any particular role will have the sum
   of privileges granted directly to it, privileges granted to any role it
   is presently a member of, and privileges granted to
   <literal>PUBLIC</literal>.
  </para>
-->
<para>
关键字<literal>PUBLIC</literal>表示该权限要赋予所有角色，包括那些以后可能创建的用户。
<literal>PUBLIC</literal>可以看做是一个隐含定义好的组，它总是包括所有角色。
任何特定的角色都将拥有直接赋予他/它的权限，加上他/它所处的任何组，
以及再加上赋予<literal>PUBLIC</literal>的权限的总和。
</para>

  <!--
<para>
   If <literal>WITH GRANT OPTION</literal> is specified, the recipient
   of the privilege can in turn grant it to others.  Without a grant
   option, the recipient cannot do that.  Grant options cannot be granted
   to <literal>PUBLIC</literal>.
  </para>
-->
<para>
如果声明了<literal>WITH GRANT OPTION</literal>，那么权限的接收者也可以将此权限赋予他人，
否则就不能授权他人。这个选项不能赋予<literal>PUBLIC</literal>。
</para>

  <!--
<para>
   There is no need to grant privileges to the owner of an object
   (usually the user that created it),
   as the owner has all privileges by default.  (The owner could,
   however, choose to revoke some of his own privileges for safety.)
  </para>
-->
<para>
对于对象的所有者(通常就是创建者)而言，没有什么权限需要赋予，因为所有者缺省就持有所有权限。
不过，所有者出于安全考虑可以选择废弃一些他自己的权限。
</para>

  <!--
<para>
   The right to drop an object, or to alter its definition in any way, is
   not treated as a grantable privilege; it is inherent in the owner,
   and cannot be granted or revoked.  (However, a similar effect can be
   obtained by granting or revoking membership in the role that owns
   the object; see below.)  The owner implicitly has all grant
   options for the object, too.
  </para>
-->
<para>
删除一个对象的权力，或者是任意修改它的权力都不是可赋予的权限；它是创建者固有的，
并且不能赋予或撤销。（然而，一个类似的影响可以通过赋予或撤销拥有这个对象的角色的成员关系来获得；
参阅下文。）所有者也隐含地拥有该对象的所有授权选项。
</para>

  <!--
<para>
   PostgreSQL grants default privileges on some types of objects to
   <literal>PUBLIC</literal>.  No privileges are granted to
   <literal>PUBLIC</literal> by default on tables,
   columns, schemas or tablespaces. For other types, the default privileges
   granted to <literal>PUBLIC</literal> are as follows:
   <literal>CONNECT</literal> and <literal>CREATE TEMP TABLE</literal> for
   databases; <literal>EXECUTE</literal> privilege for functions; and
   <literal>USAGE</literal> privilege for languages.
   The object owner can, of course, <command>REVOKE</command>
   both default and  expressly granted privileges. (For maximum
   security, issue the <command>REVOKE</> in the same transaction that
   creates the object; then there is no window in which another user
   can use the object.)
   Also, these initial default privilege settings can be changed using the
   <xref linkend="sql-alterdefaultprivileges">
   command.
  </para>
-->
<para>
PostgreSQL给<literal>PUBLIC</literal>对象的某些类型赋予缺省的权限。在表、字段、
模式或表空间上缺省不会赋予<literal>PUBLIC</literal>权限。对于其他类型，
赋予<literal>PUBLIC</literal>以下缺省的权限：数据库为 <literal>CONNECT</literal>
和<literal>CREATE TEMP TABLE</literal>权限；函数为<literal>EXECUTE</literal>权限；
语言为<literal>USAGE</literal>权限。对象所有者当然可以<command>REVOKE</command>
缺省的或明确赋予的权限。出于最大安全性考虑，在创建该对象的同一个事务中发出
<command>REVOKE</>就不会打开给别的用户使用该对象的窗口。同样，
这些缺省初始化权限设置可以使用<xref linkend="sql-alterdefaultprivileges">命令改变。
</para>


<para>
   <!-- 
   The possible privileges are: 
   -->
   可能的权限有：

   <variablelist>
    <varlistentry>
     <term>SELECT</term>
     <listitem>
  <!--
  <para>
       Allows <xref linkend="sql-select"> from
       any column, or the specific columns listed, of the specified table,
       view, or sequence.
       Also allows the use of
       <xref linkend="sql-copy"> TO.
       This privilege is also needed to reference existing column values in
       <xref linkend="sql-update"> or
       <xref linkend="sql-delete">.
       For sequences, this privilege also allows the use of the
       <function>currval</function> function.
       For large objects, this privilege allows the object to be read.
      </para>
-->
<para>
允许对声明的表、视图、序列<xref linkend="sql-select">任意字段或指定字段列表。
还允许做<xref linkend="sql-copy">的源。这个权限也需要引用<xref linkend="sql-update">
或<xref linkend="sql-delete">现存的字段值。对于序列而言，这个权限还允许使用
<function>currval</function>函数。对于大对象，这个权限允许读对象。
</para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>INSERT</term>
     <listitem>
      <!--
<para>
       Allows <xref linkend="sql-insert"> of a new
       row into the specified table.  If specific columns are listed,
       only those columns may be assigned to in the <command>INSERT</>
       command (other columns will therefore receive default values).
       Also allows <xref linkend="sql-copy"> FROM.
      </para>
-->
<para>
允许向声明的表<xref linkend="sql-insert">一个新行。如果列出了指定的字段，
那么只有列出的字段被指派给<command>INSERT</>命令（其他字段因此接受缺省的值）。
同时还允许做<xref linkend="sql-copy">。
</para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>UPDATE</term>
     <listitem>
      <!--
<para>
       Allows <xref linkend="sql-update"> of any
       column, or the specific columns listed, of the specified table.
       (In practice, any nontrivial <command>UPDATE</> command will require
       <literal>SELECT</> privilege as well, since it must reference table
       columns to determine which rows to update, and/or to compute new
       values for columns.)
       <literal>SELECT ... FOR UPDATE</literal>
       and <literal>SELECT ... FOR SHARE</literal>
       also require this privilege on at least one column, in addition to the
       <literal>SELECT</literal> privilege.  For sequences, this
       privilege allows the use of the <function>nextval</function> and
       <function>setval</function> functions.
       For large objects, this privilege allows writing or truncating the
       object.
      </para>
-->
<para>
允许对声明的表中任意字段或指定的字段列表做<xref linkend="sql-update">。
实际上，任何重要的<command>UPDATE</>命令也需要<literal>SELECT</>权限，
因为必须引用表字段决定要更新哪个行，和/或为字段计算新值。
<literal>SELECT ... FOR UPDATE</literal>和<literal>SELECT ... FOR SHARE</literal>
也至少在一个字段上要求这个权限，除了<literal>SELECT</literal>权限之外。比如，
这个权限允许使用<function>nextval</function>和<function>setval</function>函数。
对于大对象，这个权限允许写或截断对象。
</para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>DELETE</term>
     <listitem>
      <!--
<para>
       Allows <xref linkend="sql-delete"> of a row
       from the specified table.
       (In practice, any nontrivial <command>DELETE</> command will require
       <literal>SELECT</> privilege as well, since it must reference table
       columns to determine which rows to delete.)
      </para>
-->
<para>
允许从声明的表中<xref linkend="sql-delete">行。实际上，任何重要的<command>DELETE</>
命令也需要<literal>SELECT</>权限，因为必须引用表字段决定要删除哪个行。
</para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>TRUNCATE</term>
     <listitem>
      <!--
<para>
       Allows <xref linkend="sql-truncate"> on
       the specified table.
      </para>
-->
<para>
允许在指定的表上<xref linkend="sql-truncate">。
</para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>REFERENCES</term>
     <listitem>
      <!--
<para>
       To create a foreign key constraint, it is
       necessary to have this privilege on both the referencing and
       referenced columns.  The privilege may be granted for all columns
       of a table, or just specific columns.
      </para>
-->
<para>
要创建一个外键约束，你必须在参考字段和被参考字段上都拥有这个权限。
该权限可能赋予了表的所有字段，或只是赋予了指定的字段。
</para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>TRIGGER</term>
     <listitem>
      <!--
<para>
       Allows the creation of a trigger on the specified table.  (See the
       <xref linkend="sql-createtrigger"> statement.)
      </para>
-->
<para>
允许在声明表上创建触发器(参见<xref linkend="sql-createtrigger">语句)。
</para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>CREATE</term>
     <listitem>
      <!--
<para>
       For databases, allows new schemas to be created within the database.
      </para>
-->
<para>
对于数据库，允许在该数据库里创建新的模式。
</para>
      <!--
<para>
       For schemas, allows new objects to be created within the schema.
       To rename an existing object, you must own the object <emphasis>and</>
       have this privilege for the containing schema.
      </para>
-->
<para>
对于模式，允许在该模式中创建新的对象。要重命名一个现有对象，
你必需拥有该对象<emphasis>并且</>对包含该对象的模式拥有这个权限。
</para>
      <!--
<para>
       For tablespaces, allows tables, indexes, and temporary files to be
       created within the tablespace, and allows databases to be created that
       have the tablespace as their default tablespace.  (Note that revoking
       this privilege will not alter the placement of existing objects.)
      </para>
-->
<para>
对于表空间，允许在其中创建表，索引和临时文件，以及允许创建数据库的时候把该表空间指定为其缺省表空间。
请注意，撤销这个权限不会改变现有对象的存放位置。
</para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>CONNECT</term>
     <listitem>
      <!--
<para>
       Allows the user to connect to the specified database.  This
       privilege is checked at connection startup (in addition to checking
       any restrictions imposed by <filename>pg_hba.conf</>).
      </para>
-->
<para>
允许用户连接到指定的数据库。该权限将在连接启动时检查
(除了检查<filename>pg_hba.conf</>中的任何限制之外)。
</para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>TEMPORARY</term>
     <term>TEMP</term>
     <listitem>
      <!--
<para>
       Allows temporary tables to be created while using the specified database.
      </para>
-->
<para>
允许在使用指定数据库的时候创建临时表
</para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>EXECUTE</term>
     <listitem>
      <!--
<para>
       Allows the use of the specified function and the use of any
       operators that are implemented on top of the function.  This is
       the only type of privilege that is applicable to functions.
       (This syntax works for aggregate functions, as well.)
      </para>
-->
<para>
允许使用指定的函数并且可以使用任何利用这些函数实现的操作符。
这是适用于函数的唯一权限。该语法同样适用于聚集函数。
</para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>USAGE</term>
     <listitem>
      <!--
<para>
       For procedural languages, allows the use of the specified language for
       the creation of functions in that language.  This is the only type
       of privilege that is applicable to procedural languages.
      </para>
-->
<para>
对于过程语言，允许使用指定过程语言创建该语言的函数。这是适用于过程语言的唯一权限。
</para>
      <!--
<para>
       For schemas, allows access to objects contained in the specified
       schema (assuming that the objects' own privilege requirements are
       also met).  Essentially this allows the grantee to <quote>look up</>
       objects within the schema.  Without this permission, it is still
       possible to see the object names, e.g. by querying the system tables.
       Also, after revoking this permission, existing backends might have
       statements that have previously performed this lookup, so this is not
       a completely secure way to prevent object access.
      </para>
-->
<para>
对于模式，允许访问包含在指定模式中的对象(假设该对象的所有权要求同样也设置了)。
最终这些就允许了权限接受者<quote>查询</>模式中的对象。没有这个权限仍然可以看见这些对象的名字
(比如通过查询系统视图)。同样，撤销该权限之后，现有的后端可能有在查找之前就执行了的语句，
因此这不是一个很安全的限制对象访问的方法。
</para>
      <!--
<para>
       For sequences, this privilege allows the use of the
       <function>currval</function> and <function>nextval</function> functions.
      </para>
-->
<para>
对于序列，该权限允许使用<function>currval</function>和<function>nextval</function>函数。
</para>
      <!--
<para>
       For types and domains, this privilege allow the use of the type or
       domain in the creation of tables, functions, and other schema objects.
       (Note that it does not control general <quote>usage</quote> of the type,
       such as values of the type appearing in queries.  It only prevents
       objects from being created that depend on the type.  The main purpose of
       the privilege is controlling which users create dependencies on a type,
       which could prevent the owner from changing the type later.)
      </para>
-->
<para>
对于类型和域，该权限允许在创建表、函数和其他模式对象时使用类型或域。
（请注意，它不控制类型的一般<quote>使用</quote>，例如显示在查询中的该类型的值。
它只防止依赖于该类型的对象被创建。该权限的主要目的是控制哪个用户在类型上创建依赖，
该依赖会防止用户稍后改变类型。）
</para>
      <!--
<para>
       For foreign-data wrappers, this privilege enables the grantee
       to create new servers using that foreign-data wrapper.
      </para>
-->
<para>
对于外部数据封装器，该权限使权限接受者能够使用那个外部数据封装器创建新的服务器。
</para>
      <!--
<para>
       For servers, this privilege enables the grantee to create foreign
       tables using the server, and also to create, alter, or drop his own
       user's user mappings associated with that server.
      </para>
-->
<para>
对于服务器，该权限使权限接受者能够使用该服务器创建外部表，并且也能创建、
修改或删除他自己的用户的与该服务器相关的用户映射。
</para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>ALL PRIVILEGES</term>
     <listitem>
      <!--
<para>
       Grant all of the available privileges at once.
       The <literal>PRIVILEGES</literal> key word is optional in
       <productname>PostgreSQL</productname>, though it is required by
       strict SQL.
      </para>
-->
<para>
一次性给予所有可以赋予的权限。<literal>PRIVILEGES</literal>关键字在
<productname>PostgreSQL</productname>里是可选的，但是严格的 SQL 要求有这个关键字。
</para>
     </listitem>
    </varlistentry>
   </variablelist>

   <!-- 
   The privileges required by other commands are listed on the
   reference page of the respective command. 
   -->
   其它命令要求的权限都在相应的命令的参考页上列出。
  </para>
 </refsect2>

 <refsect2 id="sql-grant-description-roles">
  <!-- 
  <title>GRANT on Roles</title> 
  -->
  <title>角色上的 GRANT </title>

  <!--
<para>
   This variant of the <command>GRANT</command> command grants membership
   in a role to one or more other roles.  Membership in a role is significant
   because it conveys the privileges granted to a role to each of its
   members.
  </para>
-->
<para>
这个变种的<command>GRANT</command>命令把一个角色的成员关系赋予一个或多个其它角色。
角色里的成员关系很重要，因为它会将赋予该角色的权限传播给所有该角色的成员。
</para>

  <!--
<para>
   If <literal>WITH ADMIN OPTION</literal> is specified, the member can
   in turn grant membership in the role to others, and revoke membership
   in the role as well.  Without the admin option, ordinary users cannot do
   that.  However,
   database superusers can grant or revoke membership in any role to anyone.
   Roles having <literal>CREATEROLE</> privilege can grant or revoke
   membership in any role that is not a superuser.
  </para>
-->
<para>
如果声明了<literal>WITH ADMIN OPTION</literal>，那么该成员随后就可以将角色的成员关系赋予其它角色，
以及撤销其它角色的成员关系。如果没有 admin 选项，普通用户就不能这么做。不过，
数据库超级用户可以给任何人赋与或者撤销任何角色的任何成员关系。拥有<literal>CREATEROLE</>
权限的角色可以赋予或者撤销任何非超级用户角色的成员关系。
</para>

  <!--
<para>
   Unlike the case with privileges, membership in a role cannot be granted
   to <literal>PUBLIC</>.  Note also that this form of the command does not
   allow the noise word <literal>GROUP</>.
  </para>
-->
<para>
与权限不同，角色的成员关系不能被赋予<literal>PUBLIC</>。需要注意的是，
这种形式的命令不允许使用无意义的<literal>GROUP</>关键字。
</para>
 </refsect2>
 </refsect1>


 <refsect1 id="SQL-GRANT-notes">
  <!--
<title>Notes</title>
-->
<title>注意</title>

   <!--
<para>
    The <xref linkend="sql-revoke"> command is used
    to revoke access privileges.
   </para>
-->
<para>
<xref linkend="sql-revoke">命令用于删除访问权限。
</para>

   <!--
<para>
    Since <productname>PostgreSQL</productname> 8.1, the concepts of users and
    groups have been unified into a single kind of entity called a role.
    It is therefore no longer necessary to use the keyword <literal>GROUP</>
    to identify whether a grantee is a user or a group.  <literal>GROUP</>
    is still allowed in the command, but it is a noise word.
   </para>
-->
<para>
自<productname>PostgreSQL</productname> 8.1以来，用户和组的概念统一为角色。
因此不再需要使用关键字<literal>GROUP</>来确定接受者是一个用户还是一个组。
仍然允许在命令中出现<literal>GROUP</>，但这是一个噪声字。
</para>

   <!--
<para>
    A user may perform <command>SELECT</>, <command>INSERT</>, etc. on a
    column if he holds that privilege for either the specific column or
    its whole table.  Granting the privilege at the table level and then
    revoking it for one column will not do what you might wish: the
    table-level grant is unaffected by a column-level operation.
   </para>
-->
<para>
一个用户可以他有相应权限的字段上执行<command>SELECT</>, <command>INSERT</>等，该权限是在指定字段或整个表上。
在表级别授予权限然后从一个字段上撤销该权限将不会做你希望发生的事情：表级别的授权不受字段级别操作的影响。
</para>

   <!--
<para>
    When a non-owner of an object attempts to <command>GRANT</> privileges
    on the object, the command will fail outright if the user has no
    privileges whatsoever on the object.  As long as some privilege is
    available, the command will proceed, but it will grant only those
    privileges for which the user has grant options.  The <command>GRANT ALL
    PRIVILEGES</> forms will issue a warning message if no grant options are
    held, while the other forms will issue a warning if grant options for
    any of the privileges specifically named in the command are not held.
    (In principle these statements apply to the object owner as well, but
    since the owner is always treated as holding all grant options, the
    cases can never occur.)
   </para>
-->
<para>
如果非对象所有者企图在对象上<command>GRANT</>权限，而该用户没有该对象上指定的权限，
那么命令将立即失败。只要有某些可用的权限，该命令就会继续，但是它只授予那些该用户有授权选项的权限。
如果没有可用的授权选项，那么<command>GRANT ALL PRIVILEGES</>形式将发出一个警告信息，
其它命令形式将发出在命令中提到的、但是没有授权选项的那些权限相关的警告信息。
这些语句原则上也适用于对象所有者，但是因为所有者总是被认为拥有所有授权选项，
所以这种情况永远不会发生在所有者身上。
</para>

   <!--
<para>
    It should be noted that database superusers can access
    all objects regardless of object privilege settings.  This
    is comparable to the rights of <literal>root</> in a Unix system.
    As with <literal>root</>, it's unwise to operate as a superuser
    except when absolutely necessary.
   </para>
-->
<para>
要注意数据库超级用户可以访问所有对象，而不会受对象的权限设置影响。
这个特点类似 Unix 系统的<literal>root</>的权限。和<literal>root</>一样，除了必要的情况，
总是以超级用户身份进行操作是不明智的做法。
</para>

   <!--
<para>
    If a superuser chooses to issue a <command>GRANT</> or <command>REVOKE</>
    command, the command is performed as though it were issued by the
    owner of the affected object.  In particular, privileges granted via
    such a command will appear to have been granted by the object owner.
    (For role membership, the membership appears to have been granted
    by the containing role itself.)
   </para>
-->
<para>
如果一个超级用户选择发出一个<command>GRANT</>或<command>REVOKE</>命令，
那么这条命令将是以被影响对象的所有者的形式执行的。特别是，
通过这种方法赋与的权限将显得好像是由对象所有者赋与的。对于角色成员关系，
成员关系的赋与就会像是通过包含角色自己赋与的一样。
</para>

   <!--
<para>
    <command>GRANT</> and <command>REVOKE</> can also be done by a role
    that is not the owner of the affected object, but is a member of the role
    that owns the object, or is a member of a role that holds privileges
    <literal>WITH GRANT OPTION</literal> on the object.  In this case the
    privileges will be recorded as having been granted by the role that
    actually owns the object or holds the privileges
    <literal>WITH GRANT OPTION</literal>.  For example, if table
    <literal>t1</> is owned by role <literal>g1</>, of which role
    <literal>u1</> is a member, then <literal>u1</> can grant privileges
    on <literal>t1</> to <literal>u2</>, but those privileges will appear
    to have been granted directly by <literal>g1</>.  Any other member
    of role <literal>g1</> could revoke them later.
   </para>
-->
<para>
<command>GRANT</>和<command>REVOKE</>也可以不由被影响对象的所有者来执行，
而是由拥有该对象的角色的一个成员来执行，或者是一个在该对象上持有
<literal>WITH GRANT OPTION</literal>权限的角色的成员。在这种情况下，
该权限将被纪录为是由实际拥有该对象或者持有<literal>WITH GRANT OPTION</literal>
权限的对象赋与的。比如，如果表<literal>t1</>被角色<literal>g1</>拥有，
并且<literal>u1</>是<literal>g1</>的一个成员，然后<literal>u1</>可以把<literal>t1</>
的权限赋予<literal>u2</>，但是这些权限将表现为是由<literal>g1</>直接赋予的。
任何<literal>g1</>角色的成员都可以在之后撤销这些权限。
</para>

   <!--
<para>
    If the role executing <command>GRANT</> holds the required privileges
    indirectly via more than one role membership path, it is unspecified
    which containing role will be recorded as having done the grant.  In such
    cases it is best practice to use <command>SET ROLE</> to become the
    specific role you want to do the <command>GRANT</> as.
   </para>
-->
<para>
如果执行<command>GRANT</>的角色所持有的所需权限是通过角色成员关系间接获得的，
那么究竟是那个角色将被纪录为赋予权限的角色就是未知的。在这种情况下，
最好的方法是使用<command>SET ROLE</>成为你想执行<command>GRANT</>命令的指定角色。
</para>

   <!--
<para>
    Granting permission on a table does not automatically extend
    permissions to any sequences used by the table, including
    sequences tied to <type>SERIAL</> columns.  Permissions on
    sequences must be set separately.
   </para>
-->
<para>
在表上赋予的权限不会自动传播到该表使用的序列上，包括<type>SERIAL</>字段上的序列。
必须单独设置序列的权限。
</para>

<para>
    <!-- 
Use <xref linkend="app-psql">'s <command>\dp</command> command
    to obtain information about existing privileges for tables and
    columns.  For example: 
-->
使用<xref linkend="app-psql">的<command>\dp</command>
命令获取表和字段的现存权限的有关的信息。例如：
<programlisting>
=&gt; \dp mytable
                              Access privileges
 Schema |  Name   | Type  |   Access privileges   | Column access privileges 
--------+---------+-------+-----------------------+--------------------------
 public | mytable | table | miriam=arwdDxt/miriam | col1:
                          : =r/miriam             :   miriam_rw=rw/miriam
                          : admin=arw/miriam        
(1 row)
</programlisting>
<!-- 
    The entries shown by <command>\dp</command> are interpreted thus:
<literallayout class="monospaced">
rolename=xxxx &#045;- privileges granted to a role
        =xxxx &#045;- privileges granted to PUBLIC

            r &#045;- SELECT ("read")
            w &#045;- UPDATE ("write")
            a &#045;- INSERT ("append")
            d &#045;- DELETE
            D &#045;- TRUNCATE
            x &#045;- REFERENCES
            t &#045;- TRIGGER
            X &#045;- EXECUTE
            U &#045;- USAGE
            C &#045;- CREATE
            c &#045;- CONNECT
            T &#045;- TEMPORARY
      arwdDxt &#045;- ALL PRIVILEGES (for tables, varies for other objects)
            * &#045;- grant option for preceding privilege

        /yyyy &#045;- role that granted this privilege
</literallayout>
    The above example display would be seen by user <literal>miriam</> after
    creating table <literal>mytable</> and doing:
 -->
<command>\dp</command>显示的条目解释如下：
<literallayout class="monospaced">
rolename=xxxx -- 赋予一个角色的权限
        =xxxx -- 赋予 PUBLIC 的权限

            r -- SELECT ("读")
            w -- UPDATE ("写")
            a -- INSERT ("追加")
            d -- DELETE
            D -- TRUNCATE
            x -- REFERENCES
            t -- TRIGGER
            X -- EXECUTE
            U -- USAGE
            C -- CREATE
            c -- CONNECT
            T -- TEMPORARY
      arwdDxt -- ALL PRIVILEGES (用于表，用于其他对象时不同)
            * -- 给前面权限的授权选项

        /yyyy -- 授出这个权限的角色
</literallayout>
用户<literal>miriam</>在建完<literal>mytable</>表之后再做下面的语句，就可以得到上面例子的结果：
<programlisting>
GRANT SELECT ON mytable TO PUBLIC;
GRANT SELECT, UPDATE, INSERT ON mytable TO admin;
GRANT SELECT (col1), UPDATE (col1) ON mytable TO miriam_rw;
</programlisting>
   </para>


   <!--
<para>
    For non-table objects there are other <command>\d</> commands
    that can display their privileges.
   </para>
-->
<para>
对于非表的对象，可以使用<command>\d</>命令显示他们的权限。
</para>

   <!--
<para>
    If the <quote>Access privileges</> column is empty for a given object,
    it means the object has default privileges (that is, its privileges column
    is null).  Default privileges always include all privileges for the owner,
    and can include some privileges for <literal>PUBLIC</> depending on the
    object type, as explained above.  The first <command>GRANT</> or
    <command>REVOKE</> on an object
    will instantiate the default privileges (producing, for example,
    <literal>{miriam=arwdDxt/miriam}</>) and then modify them per the
    specified request.  Similarly, entries are shown in <quote>Column access
    privileges</> only for columns with nondefault privileges.
    (Note: for this purpose, <quote>default privileges</> always means the
    built-in default privileges for the object's type.  An object whose
    privileges have been affected by an <command>ALTER DEFAULT PRIVILEGES</>
    command will always be shown with an explicit privilege entry that
    includes the effects of the <command>ALTER</>.)
   </para>
-->
<para>
如果一个给定的对象的<quote>Access privileges</>字段是空的，这意味着该对象有缺省权限
(也就是说，它的权限字段是 NULL)。缺省权限总是包括所有者的所有权限，以及根据对象的不同，
可能包含一些给<literal>PUBLIC</>的权限。对象上第一个<command>GRANT</>或<command>REVOKE</>
将实例化这个缺省权限(比如，产生 <literal>{miriam=arwdDxt/miriam}</>) 然后根据每次特定的需求修改它。
相似的，<quote>Column access privileges</>中的记录只为非缺省权限字段。（请注意：为了这个目的，
<quote>default privileges</>总是意味着该对象类型的内建缺省权限。受<command>ALTER DEFAULT PRIVILEGES</>
命令影响权限的对象总是和一个包括<command>ALTER</>影响的明确权限记录一起显示。）
</para>

   <!--
<para>
    Notice that the owner's implicit grant options are not marked in the
    access privileges display.  A <literal>*</> will appear only when
    grant options have been explicitly granted to someone.
   </para>
-->
<para>
请注意所有者的隐含授权选项没有在显示出来的访问权限里标记出来。
只有在授权选项明确地授予某人之后，才会显示一个<literal>*</>。
</para>
 </refsect1>

 <refsect1 id="sql-grant-examples">
  <!--
<title>Examples</title>
-->
<title>例子</title>

  <!--
<para>
   Grant insert privilege to all users on table <literal>films</literal>:

<programlisting>
GRANT INSERT ON films TO PUBLIC;
</programlisting>
  </para>
-->
<para>
把表<literal>films</literal>的插入权限赋予所有用户：
<programlisting>
GRANT INSERT ON films TO PUBLIC;
</programlisting>
</para>

  <!--
<para>
   Grant all available privileges to user <literal>manuel</literal> on view
   <literal>kinds</literal>:

<programlisting>
GRANT ALL PRIVILEGES ON kinds TO manuel;
</programlisting>

   Note that while the above will indeed grant all privileges if executed by a
   superuser or the owner of <literal>kinds</literal>, when executed by someone
   else it will only grant those permissions for which the someone else has
   grant options.
  </para>
-->
<para>
赋予用户<literal>manuel</literal>对视图<literal>kinds</literal>的所有权限：
<programlisting>
GRANT ALL PRIVILEGES ON kinds TO manuel;
</programlisting>
请注意，如果上面的命令由超级用户或者<literal>kinds</literal>的所有者执行，那么它实际上会赋予所有权限，
如果由其他人执行，那么它会赋予这个"其他人"拥有授权选项的所有权限。
</para>

  <!--
<para>
   Grant membership in role <literal>admins</> to user <literal>joe</>:

<programlisting>
GRANT admins TO joe;
</programlisting></para>
-->
<para>
把角色<literal>admins</>的成员关系赋与用户<literal>joe</>：
<programlisting>
GRANT admins TO joe;
</programlisting>
</para>
 </refsect1>

 <refsect1 id="sql-grant-compatibility">
  <!--
<title>Compatibility</title>
-->
<title>兼容性</title>

   <!--
<para>
    According to the SQL standard, the <literal>PRIVILEGES</literal>
    key word in <literal>ALL PRIVILEGES</literal> is required.  The
    SQL standard does not support setting the privileges on more than
    one object per command.
   </para>
-->
<para>
根据 SQL 标准，在<literal>ALL PRIVILEGES</literal>里的<literal>PRIVILEGES</literal>关键字是必须的。
SQL 标准不支持在一条命令里对多个表设置权限。
</para>

   <!--
<para>
    <productname>PostgreSQL</productname> allows an object owner to revoke his
    own ordinary privileges: for example, a table owner can make the table
    read-only to himself by revoking his own <literal>INSERT</>,
    <literal>UPDATE</>, <literal>DELETE</>, and <literal>TRUNCATE</>
    privileges.  This is not possible according to the SQL standard.  The
    reason is that <productname>PostgreSQL</productname> treats the owner's
    privileges as having been granted by the owner to himself; therefore he
    can revoke them too.  In the SQL standard, the owner's privileges are
    granted by an assumed entity <quote>_SYSTEM</>.  Not being
    <quote>_SYSTEM</>, the owner cannot revoke these rights.
   </para>
-->
<para>
<productname>PostgreSQL</productname>允许一个对象所有者撤销它自己的普通权限：比如，
一个表所有者可以让自己对这个表是只读的，方法是撤销自己的<literal>INSERT</>, 
<literal>UPDATE</>, <literal>DELETE</>, 和 <literal>TRUNCATE</>权限。根据 SQL 标准，
这是不可能的。原因是<productname>PostgreSQL</productname>把所有者的权限当作由所有者给自己赋予的；
因此也可以撤销他们。在 SQL 标准里，所有者的权限是假设为<quote>_SYSTEM</>实体赋予的。
因为所有者不是<quote>_SYSTEM</>，所以他不能撤销这些权限。
</para>

   <!--
<para>
    According to the SQL standard, grant options can be granted to
    <literal>PUBLIC</literal>; PostgreSQL only supports granting grant options
    to roles.
   </para>
-->
<para>
根据 SQL 标准，授权选项可以授予<literal>PUBLIC</literal>；PostgreSQL 只支持授予授权选项给角色。
</para>

   <!--
<para>
    The SQL standard provides for a <literal>USAGE</literal> privilege
    on other kinds of objects: character sets, collations,
    translations.
   </para>
-->
<para>
SQL 标准对其它类型的对象提供了一个<literal>USAGE</literal>权限：字符集、校勘、转换。
</para>

   <!--
<para>
    In the SQL standard, sequences only have a <literal>USAGE</literal>
    privilege, which controls the use of the <literal>NEXT VALUE FOR</literal>
    expression, which is equivalent to the
    function <function>nextval</function> in PostgreSQL.  The sequence
    privileges <literal>SELECT</literal> and <literal>UPDATE</literal> are
    PostgreSQL extensions.  The application of the
    sequence <literal>USAGE</literal> privilege to
    the <literal>currval</literal> function is also a PostgreSQL extension (as
    is the function itself).
   </para>
-->
<para>
在SQL标准中，序列只有一个<literal>USAGE</literal>权限，该权限控制<literal>NEXT VALUE FOR</literal>
表达式的使用，该表达式相当于PostgreSQL中的<function>nextval</function>函数。序列权限
<literal>SELECT</literal>和<literal>UPDATE</literal>是PostgreSQL的扩展。序列<literal>USAGE</literal>
权限应用到<literal>currval</literal>函数也是一个PostgreSQL扩展（就像函数本身）。
</para>

   <!--
<para>
    Privileges on databases, tablespaces, schemas, and languages are
    <productname>PostgreSQL</productname> extensions.
   </para>
-->
<para>
在数据库、表空间、模式、语言上的权限是<productname>PostgreSQL</productname>扩展。
</para>
 </refsect1>


 <refsect1>
  <!--
<title>See Also</title>
-->
<title>又见</title>

  <simplelist type="inline">
   <member><xref linkend="sql-revoke"></member>
   <member><xref linkend="sql-alterdefaultprivileges"></member>
  </simplelist>
 </refsect1>

</refentry>
