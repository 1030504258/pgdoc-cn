<!--
doc/src/sgml/ref/revoke.sgml
PostgreSQL documentation
-->

<refentry id="SQL-REVOKE">
 <refmeta>
  <refentrytitle>REVOKE</refentrytitle>
  <manvolnum>7</manvolnum>
  <!--
<refmiscinfo>SQL - Language Statements</refmiscinfo>
-->
<refmiscinfo>SQL - 语句</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>REVOKE</refname>
  <!-- 
  <refpurpose>remove access privileges</refpurpose> 
  -->
  <refpurpose>删除访问权限</refpurpose>
 </refnamediv>

 <indexterm zone="sql-revoke">
  <primary>REVOKE</primary>
 </indexterm>

 <refsynopsisdiv>
<synopsis>
REVOKE [ GRANT OPTION FOR ]
    { { SELECT | INSERT | UPDATE | DELETE | TRUNCATE | REFERENCES | TRIGGER }
    [, ...] | ALL [ PRIVILEGES ] }
    ON { [ TABLE ] <replaceable class="PARAMETER">table_name</replaceable> [, ...]
         | ALL TABLES IN SCHEMA <replaceable>schema_name</replaceable> [, ...] }
    FROM { [ GROUP ] <replaceable class="PARAMETER">role_name</replaceable> | PUBLIC } [, ...]
    [ CASCADE | RESTRICT ]

REVOKE [ GRANT OPTION FOR ]
    { { SELECT | INSERT | UPDATE | REFERENCES } ( <replaceable class="PARAMETER">column_name</replaceable> [, ...] )
    [, ...] | ALL [ PRIVILEGES ] ( <replaceable class="PARAMETER">column_name</replaceable> [, ...] ) }
    ON [ TABLE ] <replaceable class="PARAMETER">table_name</replaceable> [, ...]
    FROM { [ GROUP ] <replaceable class="PARAMETER">role_name</replaceable> | PUBLIC } [, ...]
    [ CASCADE | RESTRICT ]

REVOKE [ GRANT OPTION FOR ]
    { { USAGE | SELECT | UPDATE }
    [, ...] | ALL [ PRIVILEGES ] }
    ON { SEQUENCE <replaceable class="PARAMETER">sequence_name</replaceable> [, ...]
         | ALL SEQUENCES IN SCHEMA <replaceable>schema_name</replaceable> [, ...] }
    FROM { [ GROUP ] <replaceable class="PARAMETER">role_name</replaceable> | PUBLIC } [, ...]
    [ CASCADE | RESTRICT ]

REVOKE [ GRANT OPTION FOR ]
    { { CREATE | CONNECT | TEMPORARY | TEMP } [, ...] | ALL [ PRIVILEGES ] }
    ON DATABASE <replaceable>database_name</replaceable> [, ...]
    FROM { [ GROUP ] <replaceable class="PARAMETER">role_name</replaceable> | PUBLIC } [, ...]
    [ CASCADE | RESTRICT ]

REVOKE [ GRANT OPTION FOR ]
    { USAGE | ALL [ PRIVILEGES ] }
    ON DOMAIN <replaceable>domain_name</replaceable> [, ...]
    FROM { [ GROUP ] <replaceable class="PARAMETER">role_name</replaceable> | PUBLIC } [, ...]
    [ CASCADE | RESTRICT ]

REVOKE [ GRANT OPTION FOR ]
    { USAGE | ALL [ PRIVILEGES ] }
    ON FOREIGN DATA WRAPPER <replaceable>fdw_name</replaceable> [, ...]
    FROM { [ GROUP ] <replaceable class="PARAMETER">role_name</replaceable> | PUBLIC } [, ...]
    [ CASCADE | RESTRICT ]

REVOKE [ GRANT OPTION FOR ]
    { USAGE | ALL [ PRIVILEGES ] }
    ON FOREIGN SERVER <replaceable>server_name</replaceable> [, ...]
    FROM { [ GROUP ] <replaceable class="PARAMETER">role_name</replaceable> | PUBLIC } [, ...]
    [ CASCADE | RESTRICT ]

REVOKE [ GRANT OPTION FOR ]
    { EXECUTE | ALL [ PRIVILEGES ] }
    ON { FUNCTION <replaceable>function_name</replaceable> ( [ [ <replaceable class="parameter">argmode</replaceable> ] [ <replaceable class="parameter">arg_name</replaceable> ] <replaceable class="parameter">arg_type</replaceable> [, ...] ] ) [, ...]
         | ALL FUNCTIONS IN SCHEMA <replaceable>schema_name</replaceable> [, ...] }
    FROM { [ GROUP ] <replaceable class="PARAMETER">role_name</replaceable> | PUBLIC } [, ...]
    [ CASCADE | RESTRICT ]

REVOKE [ GRANT OPTION FOR ]
    { USAGE | ALL [ PRIVILEGES ] }
    ON LANGUAGE <replaceable>lang_name</replaceable> [, ...]
    FROM { [ GROUP ] <replaceable class="PARAMETER">role_name</replaceable> | PUBLIC } [, ...]
    [ CASCADE | RESTRICT ]

REVOKE [ GRANT OPTION FOR ]
    { { SELECT | UPDATE } [, ...] | ALL [ PRIVILEGES ] }
    ON LARGE OBJECT <replaceable class="PARAMETER">loid</replaceable> [, ...]
    FROM { [ GROUP ] <replaceable class="PARAMETER">role_name</replaceable> | PUBLIC } [, ...]
    [ CASCADE | RESTRICT ]

REVOKE [ GRANT OPTION FOR ]
    { { CREATE | USAGE } [, ...] | ALL [ PRIVILEGES ] }
    ON SCHEMA <replaceable>schema_name</replaceable> [, ...]
    FROM { [ GROUP ] <replaceable class="PARAMETER">role_name</replaceable> | PUBLIC } [, ...]
    [ CASCADE | RESTRICT ]

REVOKE [ GRANT OPTION FOR ]
    { CREATE | ALL [ PRIVILEGES ] }
    ON TABLESPACE <replaceable>tablespace_name</replaceable> [, ...]
    FROM { [ GROUP ] <replaceable class="PARAMETER">role_name</replaceable> | PUBLIC } [, ...]
    [ CASCADE | RESTRICT ]

REVOKE [ GRANT OPTION FOR ]
    { USAGE | ALL [ PRIVILEGES ] }
    ON TYPE <replaceable>type_name</replaceable> [, ...]
    FROM { [ GROUP ] <replaceable class="PARAMETER">role_name</replaceable> | PUBLIC } [, ...]
    [ CASCADE | RESTRICT ]

REVOKE [ ADMIN OPTION FOR ]
    <replaceable class="PARAMETER">role_name</replaceable> [, ...] FROM <replaceable class="PARAMETER">role_name</replaceable> [, ...]
    [ CASCADE | RESTRICT ]
</synopsis>
 </refsynopsisdiv>

 <refsect1 id="SQL-REVOKE-description">
  <!--
<title>Description</title>
-->
<title>描述</title>

  <!--
<para>
   The <command>REVOKE</command> command revokes previously granted
   privileges from one or more roles.  The key word
   <literal>PUBLIC</literal> refers to the implicitly defined group of
   all roles.
  </para>
-->
<para>
<command>REVOKE</command>撤销以前赋予一个或多个角色的权限。关键字<literal>PUBLIC</literal>
代表隐含定义的、拥有所有角色的组。
</para>

  <!--
<para>
   See the description of the <xref linkend="sql-grant"> command for
   the meaning of the privilege types.
  </para>
-->
<para>
参阅<xref linkend="sql-grant">命令的描述获取权限类型的含义。
</para>

  <!--
<para>
   Note that any particular role will have the sum
   of privileges granted directly to it, privileges granted to any role it
   is presently a member of, and privileges granted to
   <literal>PUBLIC</literal>.  Thus, for example, revoking <literal>SELECT</> privilege
   from <literal>PUBLIC</literal> does not necessarily mean that all roles
   have lost <literal>SELECT</> privilege on the object: those who have it granted
   directly or via another role will still have it.  Similarly, revoking
   <literal>SELECT</> from a user might not prevent that user from using
   <literal>SELECT</> if <literal>PUBLIC</literal> or another membership
   role still has <literal>SELECT</> rights.
  </para>
-->
<para>
请注意，任何特定的角色都将拥有直接赋予它的权限，加上它所在组的权限，
再加上赋予<literal>PUBLIC</literal>的权限的总和。因此，举例来说，废止<literal>PUBLIC</literal>
的<literal>SELECT</>权限并不意味着所有角色都失去了对该对象的<literal>SELECT</>权限：
那些直接得到的权限以及通过一个组得到的权限仍然有效。相似的，废止一个用户的<literal>SELECT</>
权限可能并不阻止用户使用<literal>SELECT</>，如果<literal>PUBLIC</literal>或其他成员组仍然拥有
<literal>SELECT</>权限。
</para>

  <!--
<para>
   If <literal>GRANT OPTION FOR</literal> is specified, only the grant
   option for the privilege is revoked, not the privilege itself.
   Otherwise, both the privilege and the grant option are revoked.
  </para>
-->
<para>
如果指定了<literal>GRANT OPTION FOR</literal>，那么只是撤销对该权限的授权的权力，
而不是撤销该权限本身。否则，权限和授权选项都被撤销。
</para>

  <!--
<para>
   If a user holds a privilege with grant option and has granted it to
   other users then the privileges held by those other users are
   called dependent privileges. If the privilege or the grant option
   held by the first user is being revoked and dependent privileges
   exist, those dependent privileges are also revoked if
   <literal>CASCADE</literal> is specified; if it is not, the revoke action
   will fail.  This recursive revocation only affects privileges that
   were granted through a chain of users that is traceable to the user
   that is the subject of this <literal>REVOKE</literal> command.
   Thus, the affected users might effectively keep the privilege if it
   was also granted through other users.
  </para>
-->
<para>
如果一个用户持有某个权限，并且还有授权的选项，并且还把这个权限赋予了其它用户，
那么那些其它用户持有的权限都叫做依赖性权限。如果第一个用户持有的权限或者授权选项被撤销，
而依赖性权限仍然存在；那么如果声明了<literal>CASCADE</literal>，则所有依赖性权限都被撤销，
否则撤销动作就会失败。这个递规的撤销只影响那种通过一个用户链赋予的权限，
这个链条可以通过这条<literal>REVOKE</literal>命令里面给出的用户跟踪。因此，
如果权限本身是通过其它用户赋予的，那么被影响的用户可以有效地保留这个权限。
</para>

  <!--
<para>
   When revoking privileges on a table, the corresponding column privileges
   (if any) are automatically revoked on each column of the table, as well.
   On the other hand, if a role has been granted privileges on a table, then
   revoking the same privileges from individual columns will have no effect.
  </para>
-->
<para>
当在表上撤销权限时，相应的字段权限（如果有）也自动撤销。另一方面，
如果已经赋予了一个角色在表上的权限，那么在单独的字段上删除相同的权限将不会有作用。
</para>

  <!--
<para>
   When revoking membership in a role, <literal>GRANT OPTION</> is instead
   called <literal>ADMIN OPTION</>, but the behavior is similar.
   Note also that this form of the command does not
   allow the noise word <literal>GROUP</>.
  </para>
-->
<para>
在撤销一个角色里的成员关系的时候，不是调用<literal>ADMIN OPTION</>而是调用
<literal>GRANT OPTION</>，但是行为类似。不过这种形式的命令不允许出现<literal>GROUP</>噪声字。
</para>
 </refsect1>

 <refsect1 id="SQL-REVOKE-notes">
  <!--
<title>Notes</title>
-->
<title>注意</title>

  <!--
<para>
   Use <xref linkend="app-psql">'s <command>\dp</command> command to
   display the privileges granted on existing tables and columns.  See <xref
   linkend="sql-grant"> for information about the
   format.  For non-table objects there are other <command>\d</> commands
   that can display their privileges.
  </para>
-->
<para>
使用<xref linkend="app-psql">的<command>\dp</command>命令显示在一个现存表和字段上赋予的权限。
又见<xref linkend="sql-grant">获取关于格式的信息。对于非表对象，可以使用<command>\d</>
命令显示他们的权限。
</para>

  <!--
<para>
   A user can only revoke privileges that were granted directly by
   that user.  If, for example, user A has granted a privilege with
   grant option to user B, and user B has in turned granted it to user
   C, then user A cannot revoke the privilege directly from C.
   Instead, user A could revoke the grant option from user B and use
   the <literal>CASCADE</literal> option so that the privilege is
   in turn revoked from user C.  For another example, if both A and B
   have granted the same privilege to C, A can revoke his own grant
   but not B's grant, so C will still effectively have the privilege.
  </para>
-->
<para>
一个用户只能撤销由它自己直接赋予的权限。举例来说，如果用户 A 带着授权选项把一个权限赋予了用户 B ，
然后用户 B 又赋予了用户 C ，那么用户 A 不能直接将 C 的权限撤销。但是，
用户 A 可以撤销用户 B 的授权选项，并且使用<literal>CASCADE</literal>选项，这样，
用户 C 的权限就会自动被撤销。另外一个例子：如果 A 和 B 都赋予了 C 同样的权限，
则 A 可以撤销他自己的授权选项，但是不能撤销 B 的，因此 C 仍然有效地拥有该权限。
</para>

   <!--
<para>
    When a non-owner of an object attempts to <command>REVOKE</> privileges
    on the object, the command will fail outright if the user has no
    privileges whatsoever on the object.  As long as some privilege is
    available, the command will proceed, but it will revoke only those
    privileges for which the user has grant options.  The <command>REVOKE ALL
    PRIVILEGES</> forms will issue a warning message if no grant options are
    held, while the other forms will issue a warning if grant options for
    any of the privileges specifically named in the command are not held.
    (In principle these statements apply to the object owner as well, but
    since the owner is always treated as holding all grant options, the
    cases can never occur.)
   </para>
-->
<para>
如果一个对象的非所有者试图<command>REVOKE</>对象上的权限，那么，如果这个用户没有该对象上的权限，
则命令马上失败。只要他有某些权限，则命令继续，但是它只撤销那些该用户有授权选项的权限。
如果没有在授权选项，那么<command>REVOKE ALL PRIVILEGES</>形式将发出一个错误信息，
而对于其它形式的命令而言，如果同样是命令中指定名字的权限没有相应的授权选项，
那么该命令将发出一个警告。原则上这些语句也适用于对象所有者，
但是因为所有者总是认为持有所有授权选项，所以这种情况绝不会发生。
</para>

   <!--
<para>
    If a superuser chooses to issue a <command>GRANT</> or <command>REVOKE</>
    command, the command is performed as though it were issued by the
    owner of the affected object.  Since all privileges ultimately come
    from the object owner (possibly indirectly via chains of grant options),
    it is possible for a superuser to revoke all privileges, but this might
    require use of <literal>CASCADE</literal> as stated above.
   </para>
-->
<para>
如果一个超级用户发出一个<command>GRANT</>或<command>REVOKE</>命令，
那么命令是以被影响的对象的所有者执行的。因为所有权限最终从对象所有者
(可能间接通过赋权选项)获取，超级用户可以废除所有权限，
但是这样就要求像上面说的那样使用<literal>CASCADE</literal>。
</para>

   <!--
<para>
    <command>REVOKE</> can also be done by a role
    that is not the owner of the affected object, but is a member of the role
    that owns the object, or is a member of a role that holds privileges
    <literal>WITH GRANT OPTION</literal> on the object.  In this case the
    command is performed as though it were issued by the containing role that
    actually owns the object or holds the privileges
    <literal>WITH GRANT OPTION</literal>.  For example, if table
    <literal>t1</> is owned by role <literal>g1</>, of which role
    <literal>u1</> is a member, then <literal>u1</> can revoke privileges
    on <literal>t1</> that are recorded as being granted by <literal>g1</>.
    This would include grants made by <literal>u1</> as well as by other
    members of role <literal>g1</>.
   </para>
-->
<para>
<command>REVOKE</>也可以由一个并非被影响对象的所有者来执行，
不过这个角色必须是拥有该对象的角色的成员，或者是一个在该对象上持有
<literal>WITH GRANT OPTION</literal>的角色的成员。在这种情况下，
该命令执行起来就好像是由实际拥有该对象的角色，或者是在该对象上持有
<literal>WITH GRANT OPTION</literal>权限的角色发出的一样。比如，如果表<literal>t1</>
被<literal>g1</>所有，而<literal>u1</>是<literal>g1</>的成员，那么<literal>u1</>
可以撤销<literal>t1</>上的权限，而纪录为<literal>g1</>发出的命令。这种现像包括
<literal>u1</>和其它<literal>g1</>角色成员发出的授权。
</para>

   <!--
<para>
    If the role executing <command>REVOKE</> holds privileges
    indirectly via more than one role membership path, it is unspecified
    which containing role will be used to perform the command.  In such cases
    it is best practice to use <command>SET ROLE</> to become the specific
    role you want to do the <command>REVOKE</> as.  Failure to do so might
    lead to revoking privileges other than the ones you intended, or not
    revoking anything at all.
   </para>
-->
<para>
如果执行<command>REVOKE</>的角色持有权限是通过多层成员关系获得的，
那么具体是哪个包含的角色执行的该命令就是未声明的。在这种场合下，
最好的方法是使用<command>SET ROLE</>成为你希望执行<command>REVOKE</>的角色。
不这么做的后果可能导致删除你不想删除的权限，或者是啥权限都没有删除。
</para>
 </refsect1>

 <refsect1 id="SQL-REVOKE-examples">
  <!--
<title>Examples</title>
-->
<title>例子</title>

  <!--
<para>
   Revoke insert privilege for the public on table
   <literal>films</literal>:

<programlisting>
REVOKE INSERT ON films FROM PUBLIC;
</programlisting>
  </para>
-->
<para>
撤销公众在表<literal>films</literal>上的插入权限：
<programlisting>
REVOKE INSERT ON films FROM PUBLIC;
</programlisting>
</para>

  <!--
<para>
   Revoke all privileges from user <literal>manuel</literal> on view
   <literal>kinds</literal>:

<programlisting>
REVOKE ALL PRIVILEGES ON kinds FROM manuel;
</programlisting>

   Note that this actually means <quote>revoke all privileges that I
   granted</>.
  </para>
-->
<para>
撤销用户<literal>manuel</literal>对视图<literal>kinds</literal>的所有权限：
<programlisting>
REVOKE ALL PRIVILEGES ON kinds FROM manuel;
</programlisting>
请注意这样实际上意味着<quote>撤销所有我赋予的权限</>。
</para>

  <!--
<para>
   Revoke membership in role <literal>admins</> from user <literal>joe</>:

<programlisting>
REVOKE admins FROM joe;
</programlisting></para>
-->
<para>
删除用户<literal>joe</>的<literal>admins</>成员关系：
<programlisting>
REVOKE admins FROM joe;
</programlisting>
</para>
 </refsect1>

 <refsect1 id="SQL-REVOKE-compatibility">
  <!--
<title>Compatibility</title>
-->
<title>兼容性</title>

   <!--
<para>
    The compatibility notes of the <xref linkend="sql-grant"> command
    apply analogously to <command>REVOKE</command>.
   The keyword <literal>RESTRICT</literal> or <literal>CASCADE</literal>
    is required according to the standard, but <productname>PostgreSQL</>
    assumes <literal>RESTRICT</literal> by default.
   </para>
-->
<para>
<xref linkend="sql-grant">命令的兼容性信息基本上也适用于<command>REVOKE</command>。
标准要求<literal>RESTRICT</literal>或<literal>CASCADE</literal>必须出现，
但是<productname>PostgreSQL</>假设缺省是<literal>RESTRICT</literal>。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>See Also</title>
-->
<title>又见</title>

  <simpara>
   <xref linkend="sql-grant">
  </simpara>
 </refsect1>

</refentry>
