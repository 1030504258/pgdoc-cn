<!--
doc/src/sgml/ref/create_language.sgml
PostgreSQL documentation
-->

<refentry id="SQL-CREATELANGUAGE">
 <refmeta>
  <refentrytitle>CREATE LANGUAGE</refentrytitle>
  <manvolnum>7</manvolnum>
  <!--
<refmiscinfo>SQL - Language Statements</refmiscinfo>
-->
<refmiscinfo>SQL - 语句</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE LANGUAGE</refname>
  <!--
  <refpurpose>define a new procedural language</refpurpose>
  -->
  <refpurpose>定义一种新过程语言</refpurpose>
 </refnamediv>

 <indexterm zone="sql-createlanguage">
  <primary>CREATE LANGUAGE</primary>
 </indexterm>

 <refsynopsisdiv>
<synopsis>
CREATE [ OR REPLACE ] [ PROCEDURAL ] LANGUAGE <replaceable class="parameter">name</replaceable>
CREATE [ OR REPLACE ] [ TRUSTED ] [ PROCEDURAL ] LANGUAGE <replaceable class="parameter">name</replaceable>
    HANDLER <replaceable class="parameter">call_handler</replaceable> [ INLINE <replaceable class="parameter">inline_handler</replaceable> ] [ VALIDATOR <replaceable>valfunction</replaceable> ]
</synopsis>
 </refsynopsisdiv>

 <refsect1 id="sql-createlanguage-description">
  <!--
<title>Description</title>
-->
<title>描述</title>

  <!--
<para>
   <command>CREATE LANGUAGE</command> registers a new
   procedural language with a <productname>PostgreSQL</productname>
   database.  Subsequently, functions and trigger procedures can be
   defined in this new language.
  </para>
-->
<para>
<command>CREATE LANGUAGE</command>可以在<productname>PostgreSQL</productname>
数据库里注册一个新的语言。从而可以用这种新语言定义函数和触发器程序。
</para>

  <note>
   <!--
<para>
    As of <productname>PostgreSQL</productname> 9.1, most procedural
    languages have been made into <quote>extensions</>, and should
    therefore be installed with <xref linkend="sql-createextension">
    not <command>CREATE LANGUAGE</command>.  Direct use of
    <command>CREATE LANGUAGE</command> should now be confined to
    extension installation scripts.  If you have a <quote>bare</>
    language in your database, perhaps as a result of an upgrade,
    you can convert it to an extension using
    <literal>CREATE EXTENSION <replaceable>langname</> FROM
    unpackaged</literal>.
   </para>
-->
<para>
自<productname>PostgreSQL</productname> 9.1起，大多数过程语言制作成了<quote>扩展</>，
并且因此应该使用<xref linkend="sql-createextension">安装而不是<command>CREATE LANGUAGE</command>。
现在直接使用<command>CREATE LANGUAGE</command>应该限制在扩展安装脚本。
如果在你的数据库中有一个<quote>空的</>语言，或许由于升级，
你可以使用<literal>CREATE EXTENSION <replaceable>langname</> FROM unpackaged</literal>
将其转换为一个扩展。
</para>
  </note>

  <!--
<para>
   <command>CREATE LANGUAGE</command> effectively associates the
   language name with handler function(s) that are responsible for executing
   functions written in the language.  Refer to <xref linkend="plhandler">
   for more information about language handlers.
  </para>
-->
<para>
<command>CREATE LANGUAGE</command>将该语言的名字和一个负责执行该语言所写函数的处理器函数有效的关联起来。
请参考<xref linkend="plhandler">获取有关语言处理器的更多信息。
</para>

  <!--
<para>
   There are two forms of the <command>CREATE LANGUAGE</command> command.
   In the first form, the user supplies just the name of the desired
   language, and the <productname>PostgreSQL</productname> server consults
   the <link linkend="catalog-pg-pltemplate"><structname>pg_pltemplate</structname></link>
   system catalog to determine the correct parameters.  In the second form,
   the user supplies the language parameters along with the language name.
   The second form can be used to create a language that is not defined in
   <structname>pg_pltemplate</>, but this approach is considered obsolescent.
  </para>
-->
<para>
有两种形式的<command>CREATE LANGUAGE</command>命令。第一种形式，
用户只提供需要的语言的名字，然后<productname>PostgreSQL</productname>服务器参考
<link linkend="catalog-pg-pltemplate"><structname>pg_pltemplate</structname></link>
系统表来判断正确的参数。第二种形式，用户把语言参数和语言名字一起提供。
第二种形式可以用于创建没有在<structname>pg_pltemplate</>里面定义的语言，
不过这种方法被认为已经过时了。
</para>

  <!--
<para>
   When the server finds an entry in the <structname>pg_pltemplate</> catalog
   for the given language name, it will use the catalog data even if the
   command includes language parameters.  This behavior simplifies loading of
   old dump files, which are likely to contain out-of-date information
   about language support functions.
  </para>
-->
<para>
如果服务器在<structname>pg_pltemplate</>系统表里面找到给出的语言名字的纪录，
那么它将使用系统表的数据，即使命令包含语言参数也如此。这个行为简化了加载旧的转储文件的过程，
因为这些转储文件很可能包含有关语言支持函数的过时信息。
</para>

  <!--
<para>
   Ordinarily, the user must have the
   <productname>PostgreSQL</productname> superuser privilege to
   register a new language.  However, the owner of a database can register
   a new language within that database if the language is listed in
   the <structname>pg_pltemplate</structname> catalog and is marked
   as allowed to be created by database owners (<structfield>tmpldbacreate</>
   is true).  The default is that trusted languages can be created
   by database owners, but this can be adjusted by superusers by modifying
   the contents of <structname>pg_pltemplate</structname>.
   The creator of a language becomes its owner and can later
   drop it, rename it, or assign it to a new owner.
  </para>
-->
<para>
通常，用户必须拥有<productname>PostgreSQL</productname>超级用户权限才能注册一个新的语言。
不过，如果语言在<structname>pg_pltemplate</structname>目录中列出，
并且标记为允许通过数据库所有者创建（<structfield>tmpldbacreate</>为真），
那么数据库的所有者也可以在该数据库中注册一个新的语言。缺省是受信任的语言可以通过数据库所有者创建，
但是这个可以通过超级用户修改<structname>pg_pltemplate</structname>的内容来调整。
语言的创建者成为它的所有者，并且稍后可以删除、重命名或将其赋予新的所有者。
</para>

  <!--
<para>
   <command>CREATE OR REPLACE LANGUAGE</command> will either create a
   new language, or replace an existing definition.  If the language
   already exists, its parameters are updated according to the values
   specified or taken from <structname>pg_pltemplate</structname>,
   but the language's ownership and permissions settings do not change,
   and any existing functions written in the language are assumed to still
   be valid.  In addition to the normal privilege requirements for creating
   a language, the user must be superuser or owner of the existing language.
   The <literal>REPLACE</> case is mainly meant to be used to
   ensure that the language exists.  If the language has a
   <structname>pg_pltemplate</structname> entry then <literal>REPLACE</>
   will not actually change anything about an existing definition, except in
   the unusual case where the <structname>pg_pltemplate</structname> entry
   has been modified since the language was created.
  </para>
-->
<para>
<command>CREATE OR REPLACE LANGUAGE</command>将创建一个新的语言或者替换一个现有的定义。
如果语言早已存在，那么它的参数根据指定的值或<structname>pg_pltemplate</structname>
中的值更新，但是语言的所有关系和权限设置并不改变，并且假设任何该语言写的现有函数都是有效的。
除了创建一个语言所需的普通权限外，用户还必须是超级用户或现有语言的所有者。
<literal>REPLACE</>的情况主要是为了用于确保该语言存在。如果该语言有一个
<structname>pg_pltemplate</structname>条目，那么<literal>REPLACE</>
实际上并不改变任何现有的定义，除了在<structname>pg_pltemplate</structname>
条目由于语言被创建而被修改了的特殊情况下。
</para>
 </refsect1>

 <refsect1 id="sql-createlanguage-parameters">
  <!--
<title>Parameters</title>
-->
<title>参数</title>

   <variablelist>
    <varlistentry>
     <term><literal>TRUSTED</literal></term>

     <listitem>
      <!--
<para><literal>TRUSTED</literal> specifies that the language does
       not grant access to data that the user would not otherwise
       have.  If this key word is omitted
       when registering the language, only users with the
       <productname>PostgreSQL</productname> superuser privilege can
       use this language to create new functions.
      </para>
-->
<para>
<literal>TRUSTED</literal>说明该语言并不授权没有权限的用户访问数据。
如果在注册该语言时忽略这个关键字，只有<productname>PostgreSQL</productname>
超级用户权限可以使用这个语言创建新函数。
</para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>PROCEDURAL</literal></term>

     <listitem>
      <!--
<para>
       This is a noise word.
      </para>
-->
<para>
这是个没有用的字。
</para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable class="parameter">name</replaceable></term>

     <listitem>
      <!--
<para>
       The name of the new procedural language.
       The name must be unique among the languages in the database.
      </para>
-->
<para>
新过程语言的名称。这个名字应该在数据库的所有语言中唯一。
</para>

      <!--
<para>
       For backward compatibility, the name can be enclosed by single
       quotes.
      </para>
-->
<para>
出于向下兼容的原因，这个名字可以用单引号包围。
</para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>HANDLER</literal> <replaceable class="parameter">call_handler</replaceable></term>

     <listitem>
      <!--
<para><replaceable class="parameter">call_handler</replaceable> is
       the name of a previously registered function that will be
       called to execute the procedural language's functions.  The call
       handler for a procedural language must be written in a compiled
       language such as C with version 1 call convention and
       registered with <productname>PostgreSQL</productname> as a
       function taking no arguments and returning the
       <type>language_handler</type> type, a placeholder type that is
       simply used to identify the function as a call handler.
      </para>
-->
<para>
<replaceable class="parameter">call_handler</replaceable>是一个以前注册过的函数名字，
该函数将被用来执行该过程语言的函数。过程语言的调用处理器必须用一种编译语言(比如 C)
书写，调用风格必须是版本1的调用风格，并且注册为不接受参数并且返回
<type>language_handler</type>类型的函数。<type>language_handler</type>
是用于将函数声明为调用处理器的占位符。
</para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>INLINE</literal> <replaceable class="parameter">inline_handler</replaceable></term>

     <listitem>
      <!--
<para><replaceable class="parameter">inline_handler</replaceable> is the
       name of a previously registered function that will be called
       to execute an anonymous code block
       (<xref linkend="sql-do"> command)
       in this language.
       If no <replaceable class="parameter">inline_handler</replaceable>
       function is specified, the language does not support anonymous code
       blocks.
       The handler function must take one argument of
       type <type>internal</type>, which will be the <command>DO</> command's
       internal representation, and it will typically return
       <type>void</>.  The return value of the handler is ignored.
      </para>
-->
<para>
<replaceable class="parameter">inline_handler</replaceable>是以前注册过的函数名字，
用来在该语言中执行一个匿名代码块(<xref linkend="sql-do"> 命令)。
如果没有指定<replaceable class="parameter">inline_handler</replaceable>函数，
那么该语言不支持匿名代码块。处理器函数必须接受一个<type>internal</type>
类型的参数，这将是<command>DO</>命令的内部表示，并且它通常返回<type>void</>。
忽略该处理器的返回值。
</para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>VALIDATOR</literal> <replaceable class="parameter">valfunction</replaceable></term>

     <listitem>
      <!--
<para><replaceable class="parameter">valfunction</replaceable> is the
       name of a previously registered function that will be called
       when a new function in the language is created, to validate the
       new function.
       If no
       validator function is specified, then a new function will not
       be checked when it is created.
       The validator function must take one argument of
       type <type>oid</type>, which will be the OID of the
       to-be-created function, and will typically return <type>void</>.
      </para>
-->
<para>
<replaceable class="parameter">valfunction</replaceable>是一个以前注册过的函数名字，
在用该语言创建新函数的时候将用它来校验新函数。如果没有声明校验函数，
那么建立新函数的时候就不会检查它。校验函数必须接受一个类型为<type>oid</type>的参数，
它是将要创建的函数的 OID ，并且通常会返回<type>void</>。
</para>

      <!--
<para>
       A validator function would typically inspect the function body
       for syntactical correctness, but it can also look at other
       properties of the function, for example if the language cannot
       handle certain argument types.  To signal an error, the
       validator function should use the <function>ereport()</function>
       function.  The return value of the function is ignored.
      </para>
-->
<para>
校验函数通常会检查函数体，看看有没有语法错误，但是它也可以查看函数的其它属性，
比如该语言是否不能处理某种参数类型。校验函数应该用<function>ereport()</function>
函数报告错误。该函数的返回值将被忽略。
</para>
     </listitem>
    </varlistentry>
   </variablelist>

  <!--
<para>
   The <literal>TRUSTED</> option and the support function name(s) are
   ignored if the server has an entry for the specified language
   name in <structname>pg_pltemplate</>.
  </para>
-->
<para>
如果服务器在<structname>pg_pltemplate</>系统表里有对应名称的语言纪录，
那么<literal>TRUSTED</>选项和支持函数的名字等参数将被忽略。
</para>
 </refsect1>

 <refsect1 id="sql-createlanguage-notes">
  <!--
<title>Notes</title>
-->
<title>注意</title>

  <!--
<para>
   The <xref linkend="app-createlang"> program is a simple wrapper around
   the <command>CREATE LANGUAGE</> command.  It eases
   installation of procedural languages from the shell command line.
  </para>
-->
<para>
<xref linkend="app-createlang">程序是对<command>CREATE LANGUAGE</>命令的一个简单封装。
降低了在 shell 命令行上安装过程语言的难度。
</para>

  <!--
<para>
   Use <xref linkend="sql-droplanguage">, or better yet the <xref
   linkend="app-droplang"> program, to drop procedural languages.
  </para>
-->
<para>
使用<xref linkend="sql-droplanguage">命令，或者更好是<xref
   linkend="app-droplang">程序来删除一个过程语言。
</para>

  <!--
<para>
   The system catalog <classname>pg_language</classname> (see <xref
   linkend="catalog-pg-language">) records information about the
   currently installed languages.  Also, <command>createlang</command>
   has an option to list the installed languages.
  </para>
-->
<para>
系统表<classname>pg_language</classname>(参阅<xref linkend="catalog-pg-language">)
记录了有关当前安装的语言的信息。<command>createlang</command>
也有一个选项列出已安装的语言。
</para>

  <!--
<para>
   To create functions in a procedural language, a user must have the
   <literal>USAGE</literal> privilege for the language.  By default,
   <literal>USAGE</> is granted to <literal>PUBLIC</> (i.e., everyone)
   for trusted languages.  This can be revoked if desired.
  </para>
-->
<para>
要使用一种过程语言创建函数，用户必须对该语言有<literal>USAGE</literal>权限。
缺省时，对于可信的语言，<literal>USAGE</>是赋与<literal>PUBLIC</>
(也就是每个人)的。需要时，这个权限可以撤销。
</para>

  <!--
<para>
   Procedural languages are local to individual databases.
   However, a language can be installed into the <literal>template1</literal>
   database, which will cause it to be available automatically in
   all subsequently-created databases.
  </para>
-->
<para>
过程语言是对每个独立数据库本地创建的。不过，语言可以安装到<literal>template1</literal>里面，
这样就会导致它自动在所有随后创建的数据库里可用。
</para>

  <!--
<para>
   The call handler function, the inline handler function (if any),
   and the validator function (if any)
   must already exist if the server does not have an entry for the language
   in <structname>pg_pltemplate</>.  But when there is an entry,
   the functions need not already exist;
   they will be automatically defined if not present in the database.
   (This might result in <command>CREATE LANGUAGE</> failing, if the
   shared library that implements the language is not available in
   the installation.)
  </para>
-->
<para>
如果服务器在<structname>pg_pltemplate</>系统表里还没有对应该语言的纪录，
那么调用处理器函数、内联处理器函数（如果有）和校验函数(如果有)必须已经存在。
但是如果存在这样的纪录，那么这些函数就不必已经存在；如果没有在数据库里出现，
它们将会被自动定义。如果实现语言的共享库在安装中不可获得，
那么可能会导致<command>CREATE LANGUAGE</>失效。
</para>

  <!--
<para>
   In <productname>PostgreSQL</productname> versions before 7.3, it was
   necessary to declare handler functions as returning the placeholder
   type <type>opaque</>, rather than <type>language_handler</>.
   To support loading
   of old dump files, <command>CREATE LANGUAGE</> will accept a function
   declared as returning <type>opaque</>, but it will issue a notice and
   change the function's declared return type to <type>language_handler</>.
  </para>
-->
<para>
在<productname>PostgreSQL</productname> 7.3之前，必须声明处理器函数返回占位类型
<type>opaque</>，而不是<type>language_handler</>。为了支持加载旧的转储文件，
<command>CREATE LANGUAGE</>还将接受声明为返回<type>opaque</>的函数，
但是它会发出一条通知并且把函数的返回类型改为<type>language_handler</>。
</para>
 </refsect1>

 <refsect1 id="sql-createlanguage-examples">
  <!--
<title>Examples</title>
-->
<title>例子</title>

  <!--
<para>
   The preferred way of creating any of the standard procedural languages
   is just:
<programlisting>
CREATE LANGUAGE plperl;
</programlisting>
  </para>
-->
<para>
创建标准的过程语言的比较好的方法：
<programlisting>
CREATE LANGUAGE plperl;
</programlisting>
</para>

  <!--
<para>
   For a language not known in the <structname>pg_pltemplate</> catalog, a
   sequence such as this is needed:
<programlisting>
CREATE FUNCTION plsample_call_handler() RETURNS language_handler
    AS '$libdir/plsample'
    LANGUAGE C;
CREATE LANGUAGE plsample
    HANDLER plsample_call_handler;
</programlisting></para>
-->
<para>
对于<structname>pg_pltemplate</>还不知道的语言，需要下面这样的序列：
<programlisting>
CREATE FUNCTION plsample_call_handler() RETURNS language_handler
    AS '$libdir/plsample'
    LANGUAGE C;
CREATE LANGUAGE plsample
    HANDLER plsample_call_handler;
</programlisting>
</para>
 </refsect1>

 <refsect1 id="sql-createlanguage-compat">
  <!--
<title>Compatibility</title>
-->
<title>兼容性</title>

  <!--
<para>
   <command>CREATE LANGUAGE</command> is a
   <productname>PostgreSQL</productname> extension.
  </para>
-->
<para>
<command>CREATE LANGUAGE</command>是<productname>PostgreSQL</productname>扩展。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>See Also</title>
-->
<title>又见</title>

  <simplelist type="inline">
   <member><xref linkend="sql-alterlanguage"></member>
   <member><xref linkend="sql-createfunction"></member>
   <member><xref linkend="sql-droplanguage"></member>
   <member><xref linkend="sql-grant"></member>
   <member><xref linkend="sql-revoke"></member>
   <member><xref linkend="app-createlang"></member>
   <member><xref linkend="app-droplang"></member>
  </simplelist>
 </refsect1>
</refentry>
