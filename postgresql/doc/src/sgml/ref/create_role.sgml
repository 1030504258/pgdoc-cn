<!--
doc/src/sgml/ref/create_role.sgml
PostgreSQL documentation
-->

<refentry id="SQL-CREATEROLE">
 <refmeta>
  <refentrytitle>CREATE ROLE</refentrytitle>
  <manvolnum>7</manvolnum>
  <!--
<refmiscinfo>SQL - Language Statements</refmiscinfo>
-->
<refmiscinfo>SQL - 语句</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE ROLE</refname>
  <!--
  <refpurpose>define a new database role</refpurpose>
  -->
  <refpurpose>定义一个新数据库角色</refpurpose>
 </refnamediv>

 <indexterm zone="sql-createrole">
  <primary>CREATE ROLE</primary>
 </indexterm>

 <refsynopsisdiv>
<synopsis>
CREATE ROLE <replaceable class="PARAMETER">name</replaceable> [ [ WITH ] <replaceable class="PARAMETER">option</replaceable> [ ... ] ]

<!--
 <phrase>where <replaceable class="PARAMETER">option</replaceable> can be:</phrase>
 -->
 <phrase>这里的<replaceable class="PARAMETER">option</replaceable>可以是：</phrase>

      SUPERUSER | NOSUPERUSER
    | CREATEDB | NOCREATEDB
    | CREATEROLE | NOCREATEROLE
    | CREATEUSER | NOCREATEUSER
    | INHERIT | NOINHERIT
    | LOGIN | NOLOGIN
    | REPLICATION | NOREPLICATION
    | CONNECTION LIMIT <replaceable class="PARAMETER">connlimit</replaceable>
    | [ ENCRYPTED | UNENCRYPTED ] PASSWORD '<replaceable class="PARAMETER">password</replaceable>'
    | VALID UNTIL '<replaceable class="PARAMETER">timestamp</replaceable>'
    | IN ROLE <replaceable class="PARAMETER">role_name</replaceable> [, ...]
    | IN GROUP <replaceable class="PARAMETER">role_name</replaceable> [, ...]
    | ROLE <replaceable class="PARAMETER">role_name</replaceable> [, ...]
    | ADMIN <replaceable class="PARAMETER">role_name</replaceable> [, ...]
    | USER <replaceable class="PARAMETER">role_name</replaceable> [, ...]
    | SYSID <replaceable class="PARAMETER">uid</replaceable>
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <!--
<title>Description</title>
-->
<title>描述</title>

  <!--
<para>
   <command>CREATE ROLE</command> adds a new role to a
   <productname>PostgreSQL</productname> database cluster.  A role is
   an entity that can own database objects and have database privileges;
   a role can be considered a <quote>user</>, a <quote>group</>, or both
   depending on how it is used.  Refer to
   <xref linkend="user-manag"> and <xref
   linkend="client-authentication"> for information about managing
   users and authentication.  You must have <literal>CREATEROLE</>
   privilege or be a database superuser to use this command.
  </para>
-->
<para>
<command>CREATE ROLE</command>向一个数据库集群添加一个新角色。
一个角色是一个可以拥有数据库对象并且拥有数据库权限的实体；
角色可以认为是一个<quote>用户</>、一个<quote>组</>、或者是两者兼有。
请参考<xref linkend="user-manag">和<xref linkend="client-authentication">
获得有关管理用户和认证的信息。要使用这条命令，你必须拥有<literal>CREATEROLE</>
权限或者是数据库超级用户。
</para>

  <!--
<para>
   Note that roles are defined at the database cluster
   level, and so are valid in all databases in the cluster.
  </para>
-->
<para>
请注意角色是在数据库集群的范畴里定义的，因此对数据库集群里的所有数据库都有效。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>Parameters</title>
-->
<title>参数</title>

    <variablelist>
     <varlistentry>
      <term><replaceable class="parameter">name</replaceable></term>
      <listitem>
       <!--
<para>
        The name of the new role.
       </para>
-->
<para>
新角色的名称。
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>SUPERUSER</literal></term>
      <term><literal>NOSUPERUSER</literal></term>
      <listitem>
       <!--
<para>
        These clauses determine whether the new role is a <quote>superuser</>,
        who can override all access restrictions within the database.
        Superuser status is dangerous and should be used only when really
        needed.  You must yourself be a superuser to create a new superuser.
        If not specified,
        <literal>NOSUPERUSER</literal> is the default.
       </para>
-->
<para>
这些子句决定一个新角色是否为<quote>超级用户</>，这种用户可以超越数据库中的所有访问权限。
超级用户状态是非常危险的，除非真正需要，否则不应该使用。
你自己必须是一个超级用户才能创建一个新的超级用户。如果没有指定，
<literal>NOSUPERUSER</literal>将是缺省。
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>CREATEDB</></term>
      <term><literal>NOCREATEDB</></term>
      <listitem>
       <!--
<para>
        These clauses define a role's ability to create databases.  If
        <literal>CREATEDB</literal> is specified, the role being
        defined will be allowed to create new databases. Specifying
        <literal>NOCREATEDB</literal> will deny a role the ability to
        create databases. If not specified,
        <literal>NOCREATEDB</literal> is the default.
       </para>
-->
<para>
这些子句定义一个角色是否能创建数据库。如果声明了<literal>CREATEDB</literal>，
那么正在创建的角色可以创建新数据库。声明<literal>NOCREATEDB</literal>
将不会赋与新角色创建数据库的能力。如果没有声明，那么缺省是<literal>NOCREATEDB</literal>。
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>CREATEROLE</literal></term>
      <term><literal>NOCREATEROLE</literal></term>
      <listitem>
       <!--
<para>
        These clauses determine whether a role will be permitted to
        create new roles (that is, execute <command>CREATE ROLE</command>).
        A role with <literal>CREATEROLE</literal> privilege can also alter
        and drop other roles.
        If not specified,
        <literal>NOCREATEROLE</literal> is the default.
       </para>
-->
<para>
这些子句决定一个角色是否可以创建新角色(也就是执行<command>CREATE ROLE</command>)。
一个拥有<literal>CREATEROLE</literal>权限的角色也可以修改和删除其它角色。
如果没有声明，缺省是<literal>NOCREATEROLE</literal>。
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>CREATEUSER</literal></term>
      <term><literal>NOCREATEUSER</literal></term>
      <listitem>
       <!--
<para>
        These clauses are an obsolete, but still accepted, spelling of
        <literal>SUPERUSER</literal> and <literal>NOSUPERUSER</literal>.
        Note that they are <emphasis>not</> equivalent to
        <literal>CREATEROLE</literal> as one might naively expect!
       </para>
-->
<para>
这些子句已经过时了，但是仍然接受，拼法为<literal>SUPERUSER</literal>和
<literal>NOSUPERUSER</literal>。请注意它们并<emphasis>不</>等于
<literal>CREATEROLE</literal>！人们很可能轻易地这么认为。
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>INHERIT</literal></term>
      <term><literal>NOINHERIT</literal></term>
      <listitem>
       <!--
<para>
        These clauses determine whether a role <quote>inherits</> the
        privileges of roles it is a member of.
        A role with the <literal>INHERIT</literal> attribute can automatically
        use whatever database privileges have been granted to all roles
        it is directly or indirectly a member of.
        Without <literal>INHERIT</literal>, membership in another role
        only grants the ability to <command>SET ROLE</> to that other role;
        the privileges of the other role are only available after having
        done so.
        If not specified,
        <literal>INHERIT</literal> is the default.
       </para>
-->
<para>
这些子句决定一个角色是否<quote>继承</>它所在组的角色的权限。
一个带有<literal>INHERIT</literal>属性的角色可以自动使用已经赋与它直接或间接所在组的任何权限。
没有<literal>INHERIT</literal>，其它角色的成员关系只赋与该角色<command>SET ROLE</>
成其它角色的能力；其它角色的权限只是在这么做了之后才能获得。如果没有声明，
缺省是<literal>INHERIT</literal>。
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>LOGIN</literal></term>
      <term><literal>NOLOGIN</literal></term>
      <listitem>
       <!--
<para>
        These clauses determine whether a role is allowed to log in;
        that is, whether the role can be given as the initial session
        authorization name during client connection.  A role having
        the <literal>LOGIN</literal> attribute can be thought of as a user.
        Roles without this attribute are useful for managing database
        privileges, but are not users in the usual sense of the word.
        If not specified,
        <literal>NOLOGIN</literal> is the default, except when
        <command>CREATE ROLE</> is invoked through its alternative spelling
        <xref linkend="sql-createuser">.
       </para>
-->
<para>
这些子句决定一个角色是否可以登录；也就是说，
该角色在客户端连接的时候是否可以被给予初始化会话的认证名字。
一个拥有<literal>LOGIN</literal>属性的角色可以认为是一个用户。
没有这个属性的角色可以用于管理数据库权限，但是并不是平常概念的用户。
如果没有声明，除非是调用<command>CREATE ROLE</>的别名<xref linkend="sql-createuser">，
否则缺省将是<literal>NOLOGIN</literal>。
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>REPLICATION</literal></term>
      <term><literal>NOREPLICATION</literal></term>
      <listitem>
       <!--
<para>
        These clauses determine whether a role is allowed to initiate
        streaming replication or put the system in and out of backup mode.
        A role having the <literal>REPLICATION</> attribute is a very
        highly privileged role, and should only be used on roles actually
        used for replication. If not specified,
        <literal>NOREPLICATION</literal> is the default.
       </para>
-->
<para>
这些子句决定一个角色是否可以初始化流复制或是否将系统放在备份模式。
一个拥有<literal>REPLICATION</>属性的角色是一个非常高特权的用户，
应该只用于实际用于复制的用户。如果没有声明，缺省是<literal>NOREPLICATION</literal>。
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>CONNECTION LIMIT</literal> <replaceable class="parameter">connlimit</replaceable></term>
      <listitem>
       <!--
<para>
        If role can log in, this specifies how many concurrent connections
        the role can make.  -1 (the default) means no limit.
       </para>
-->
<para>
如果角色可以登录，这个参数声明该角色可以使用的并发连接数量。-1(缺省)意味着没有限制。
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>PASSWORD</> <replaceable class="parameter">password</replaceable></term>
      <listitem>
       <!--
<para>
        Sets the role's password.  (A password is only of use for
        roles having the <literal>LOGIN</literal> attribute, but you
        can nonetheless define one for roles without it.)  If you do
        not plan to use password authentication you can omit this
        option.  If no password is specified, the password will be set
        to null and password authentication will always fail for that
        user.  A null password can optionally be written explicitly as
        <literal>PASSWORD NULL</literal>.
       </para>
-->
<para>
设置角色的口令。（口令只对那些拥有<literal>LOGIN</literal>属性的角色有意义，
不过你当然可以给没有这个属性的用户定义口令。）如果你不准备使用口令认证，
你可以忽略这个选项。如果没有指定口令，口令将被设为空并且该用户的密码认证将总是失败。
也可以明确的用<literal>PASSWORD NULL</literal>指定口令为空。
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>ENCRYPTED</></term>
      <term><literal>UNENCRYPTED</></term>
      <listitem>
       <!--
<para>
        These key words control whether the password is stored
        encrypted in the system catalogs.  (If neither is specified,
        the default behavior is determined by the configuration
        parameter <xref linkend="guc-password-encryption">.)  If the
        presented password string is already in MD5-encrypted format,
        then it is stored encrypted as-is, regardless of whether
        <literal>ENCRYPTED</> or <literal>UNENCRYPTED</> is specified
        (since the system cannot decrypt the specified encrypted
        password string).  This allows reloading of encrypted
        passwords during dump/restore.
       </para>
-->
<para>
这些关键字控制存储在系统表里面的口令是否加密。（如果没有指定，
那么缺省的行为由配置参数<xref linkend="guc-password-encryption">控制。）
因为系统无法对指定的加密口令字符串进行解密，所以如果目前的口令字符串已经是用 MD5 加密的格式，
那么那就会继续照此存放，而不管是否声明了<literal>ENCRYPTED</>或<literal>UNENCRYPTED</>。
这样就允许在转储/回复的时候重新加载加密的口令。
</para>

       <!--
<para>
        Note that older clients might lack support for the MD5
        authentication mechanism that is needed to work with passwords
        that are stored encrypted.
       </para>
-->
<para>
请注意老的客户端可能缺乏对 MD5 认证机制的支持，以密文形式存储的口令需要这个机制来运作。
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>VALID UNTIL</literal> '<replaceable class="parameter">timestamp</replaceable>'</term>
      <listitem>
       <!--
<para>
        The <literal>VALID UNTIL</literal> clause sets a date and
        time after which the role's password is no longer valid.  If
        this clause is omitted the password will be valid for all time.
       </para>
-->
<para>
<literal>VALID UNTIL</literal>子句设置角色的口令失效的时间戳。
如果忽略了这个子句，那么口令将永远有效。
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>IN ROLE</> <replaceable class="parameter">role_name</replaceable></term>
      <listitem>
       <!--
<para>
        The <literal>IN ROLE</literal> clause lists one or more existing
        roles to which the new role will be immediately added as a new
        member.  (Note that there is no option to add the new role as an
        administrator; use a separate <command>GRANT</> command to do that.)
       </para>
-->
<para>
<literal>IN ROLE</literal>子句列出一个或多个现有的角色，新角色将立即加入这些角色，
成为它们的成员。请注意没有任何选项可以把新角色添加为管理员；
必须使用独立的<command>GRANT</>命令来做这件事情。
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>IN GROUP</> <replaceable class="parameter">role_name</replaceable></term>
      <listitem>
       <!--
<para><literal>IN GROUP</literal> is an obsolete spelling of
        <literal>IN ROLE</>.
       </para>
-->
<para>
<literal>IN GROUP</literal>是<literal>IN ROLE</>的过时的拼法。
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>ROLE</> <replaceable class="parameter">role_name</replaceable></term>
      <listitem>
       <!--
<para>
        The <literal>ROLE</literal> clause lists one or more existing
        roles which are automatically added as members of the new role.
        (This in effect makes the new role a <quote>group</>.)
       </para>
-->
<para>
<literal>ROLE</literal>子句列出一个或多个现有的角色，它们将自动添加为这个新角色的成员。
这个动作实际上就是把新角色做成一个<quote>组</>。
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>ADMIN</> <replaceable class="parameter">role_name</replaceable></term>
      <listitem>
       <!--
<para>
        The <literal>ADMIN</literal> clause is like <literal>ROLE</literal>,
        but the named roles are added to the new role <literal>WITH ADMIN
        OPTION</>, giving them the right to grant membership in this role
        to others.
       </para>
-->
<para>
<literal>ADMIN</literal>子句类似<literal>ROLE</literal>，只是给出的角色被增加到新角色
<literal>WITH ADMIN OPTION</>，给他们以把这个角色的成员权限赋与其它角色的权力。
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>USER</> <replaceable class="parameter">role_name</replaceable></term>
      <listitem>
       <!--
<para>
        The <literal>USER</literal> clause is an obsolete spelling of
        the <literal>ROLE</> clause.
       </para>
-->
<para>
<literal>USER</literal>子句是<literal>ROLE</>子句的过时拼法。
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>SYSID</> <replaceable class="parameter">uid</replaceable></term>
      <listitem>
       <!--
<para>
        The <literal>SYSID</literal> clause is ignored, but is accepted
        for backwards compatibility.
       </para>
-->
<para>
<literal>SYSID</literal>子句将被忽略，但是仍然接受之，主要为了向下兼容。
</para>
      </listitem>
     </varlistentry>
    </variablelist>
 </refsect1>

 <refsect1>
  <!--
<title>Notes</title>
-->
<title>注意</title>

  <!--
<para>
   Use <xref linkend="SQL-ALTERROLE"> to
   change the attributes of a role, and <xref linkend="SQL-DROPROLE">
   to remove a role.  All the attributes
   specified by <command>CREATE ROLE</> can be modified by later
   <command>ALTER ROLE</> commands.
  </para>
-->
<para>
使用<xref linkend="SQL-ALTERROLE">改变一个角色的属性，
使用<xref linkend="SQL-DROPROLE">删除一个角色。所有在<command>CREATE ROLE</>
里声明的属性都可以在随后的<command>ALTER ROLE</>命令里修改。
</para>

  <!--
<para>
   The preferred way to add and remove members of roles that are being
   used as groups is to use
   <xref linkend="SQL-GRANT"> and
   <xref linkend="SQL-REVOKE">.
  </para>
-->
<para>
给一个当作组来使用的角色添加或删除成员的比较好的方法是使用
<xref linkend="SQL-GRANT">和<xref linkend="SQL-REVOKE">。
</para>

  <!--
<para>
   The <literal>VALID UNTIL</> clause defines an expiration time for a
   password only, not for the role <foreignphrase>per se</>.  In
   particular, the expiration time is not enforced when logging in using
   a non-password-based authentication method.
  </para>
-->
<para>
<literal>VALID UNTIL</>子句只是为口令定义一个失效时限，而不是角色自身的失效时限。
特别要注意的是，当以非口令为基础的认证方式登录的时候，这个失效时间将失去意义。
</para>

  <!--
<para>
   The <literal>INHERIT</> attribute governs inheritance of grantable
   privileges (that is, access privileges for database objects and role
   memberships).  It does not apply to the special role attributes set by
   <command>CREATE ROLE</> and <command>ALTER ROLE</>.  For example, being
   a member of a role with <literal>CREATEDB</> privilege does not immediately
   grant the ability to create databases, even if <literal>INHERIT</> is set;
   it would be necessary to become that role via
   <xref linkend="SQL-SET-ROLE"> before
   creating a database.
  </para>
-->
<para>
<literal>INHERIT</>属性管理那些可赋予的权限的继承关系，
也就是数据库对象的访问权限和角色成员的关系。它并不适用于<command>CREATE ROLE</>
和<command>ALTER ROLE</>设置的特殊角色属性。比如，做为一个带有<literal>CREATEDB</>
权限的角色成员，并不直接拥有创建数据库的能力，即使设置了<literal>INHERIT</>也如此；
该角色还是需要通过<xref linkend="SQL-SET-ROLE">成为该角色，然后才能创建数据库。
</para>

  <!--
<para>
   The <literal>INHERIT</> attribute is the default for reasons of backwards
   compatibility: in prior releases of <productname>PostgreSQL</productname>,
   users always had access to all privileges of groups they were members of.
   However, <literal>NOINHERIT</> provides a closer match to the semantics
   specified in the SQL standard.
  </para>
-->
<para>
<literal>INHERIT</>属性是缺省的，原因是为了向下兼容：在以前的
<productname>PostgreSQL</productname>版本里，用户总是拥有他们所在组的所有权限。
不过，<literal>NOINHERIT</>提供了与 SQL 标准所定义的最接近的语意。
</para>

  <!--
<para>
   Be careful with the <literal>CREATEROLE</> privilege. There is no concept of
   inheritance for the privileges of a <literal>CREATEROLE</>-role. That
   means that even if a role does not have a certain privilege but is allowed
   to create other roles, it can easily create another role with different
   privileges than its own (except for creating roles with superuser
   privileges). For example, if the role <quote>user</> has the
   <literal>CREATEROLE</> privilege but not the <literal>CREATEDB</> privilege,
   nonetheless it can create a new role with the <literal>CREATEDB</>
   privilege. Therefore, regard roles that have the <literal>CREATEROLE</>
   privilege as almost-superuser-roles.
  </para>
-->
<para>
要注意<literal>CREATEROLE</>权限，因为对于<literal>CREATEROLE</>权限不存在继承的概念。
拥有这个权限的角色可以很容易的创建一个与自身权限不同的非超级用户角色。例如，
如果<quote>user</>角色拥有<literal>CREATEROLE</>权限而无<literal>CREATEDB</>权限，
那么他可以创建带有<literal>CREATEDB</>权限的新角色。因此具有<literal>CREATEROLE</>
权限的角色几乎相当于一个超级用户。
</para>

  <!--
<para>
   <productname>PostgreSQL</productname> includes a program <xref
   linkend="APP-CREATEUSER"> that has
   the same functionality as <command>CREATE ROLE</command> (in fact,
   it calls this command) but can be run from the command shell.
  </para>
-->
<para>
<productname>PostgreSQL</productname>包括一个和<command>CREATE ROLE</command>
有一样功能的<xref linkend="APP-CREATEUSER">程序(实际上就是调用这个命令)，
可以从命令行 shell 上运行。
</para>

  <!--
<para>
   The <literal>CONNECTION LIMIT</> option is only enforced approximately;
   if two new sessions start at about the same time when just one
   connection <quote>slot</> remains for the role, it is possible that
   both will fail.  Also, the limit is never enforced for superusers.
  </para>
-->
<para>
<literal>CONNECTION LIMIT</>选项只是近似地强制；如果两个新的会话几乎同时启动，
而该角色只剩下一个<quote>连接槽</>，那么很可能两个连接都会失败。同样，
这个限制从来不会对超级用户强制。
</para>

  <!--
<para>
   Caution must be exercised when specifying an unencrypted password
   with this command.  The password will be transmitted to the server
   in cleartext, and it might also be logged in the client's command
   history or the server log.  The command <xref
   linkend="APP-CREATEUSER">, however, transmits
   the password encrypted.  Also, <xref linkend="app-psql">
   contains a command
   <command>\password</command> that can be used to safely change the
   password later.
  </para>
-->
<para>
在这个指令中指定未加密的口令时必须小心。口令将被以明文方式传递给服务器，
同时还可能在客户端的命令历史或服务端日志中被记录。
而<xref linkend="APP-CREATEUSER">会将命令加密后传递给服务器。同样，
<xref linkend="app-psql">包含一个<command>\password</command>可以用来安全的修改口令。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>Examples</title>
-->
<title>例子</title>

  <!--
<para>
   Create a role that can log in, but don't give it a password:
<programlisting>
CREATE ROLE jonathan LOGIN;
</programlisting>
  </para>
-->
<para>
创建一个可以登录的角色，但是不给他设置口令：
<programlisting>
CREATE ROLE jonathan LOGIN;
</programlisting>
</para>

  <!--
<para>
   Create a role with a password:
<programlisting>
CREATE USER davide WITH PASSWORD 'jw8s0F4';
</programlisting>
   (<command>CREATE USER</> is the same as <command>CREATE ROLE</> except
   that it implies <literal>LOGIN</>.)
  </para>
-->
<para>
创建一个带口令的角色：
<programlisting>
CREATE USER davide WITH PASSWORD 'jw8s0F4';
</programlisting>
(<command>CREATE USER</>和<command>CREATE ROLE</>一样，只不过它隐含<literal>LOGIN</>。)
</para>

  <!--
<para>
   Create a role with a password that is valid until the end of 2004.
   After one second has ticked in 2005, the password is no longer
   valid.

<programlisting>
CREATE ROLE miriam WITH LOGIN PASSWORD 'jw8s0F4' VALID UNTIL '2005-01-01';
</programlisting>
  </para>
-->
<para>
创建一个带口令的角色，口令有效期到 2004 年底。在 2005 年跑了一秒之后，
口令就不再有效。
<programlisting>
CREATE ROLE miriam WITH LOGIN PASSWORD 'jw8s0F4' VALID UNTIL '2005-01-01';
</programlisting>
</para>

  <!--
<para>
   Create a role that can create databases and manage roles:
<programlisting>
CREATE ROLE admin WITH CREATEDB CREATEROLE;
</programlisting></para>
-->
<para>
创建一个可以创建数据库和管理角色的角色：
<programlisting>
CREATE ROLE admin WITH CREATEDB CREATEROLE;
</programlisting>
</para>
 </refsect1>

 <refsect1>
  <!--
<title>Compatibility</title>
-->
<title>兼容性</title>

  <!--
<para>
   The <command>CREATE ROLE</command> statement is in the SQL standard,
   but the standard only requires the syntax
<synopsis>
CREATE ROLE <replaceable class="PARAMETER">name</> [ WITH ADMIN <replaceable class="PARAMETER">role_name</> ]
</synopsis>
   Multiple initial administrators, and all the other options of
   <command>CREATE ROLE</command>, are
   <productname>PostgreSQL</productname> extensions.
  </para>
-->
<para>
<command>CREATE ROLE</command>语句在 SQL 标准里存在，但是标准只要求下面的语法
<synopsis>
CREATE ROLE <replaceable class="PARAMETER">name</> [ WITH ADMIN <replaceable class="PARAMETER">role_name</> ]
</synopsis>
多个初始化管理员，以及所有其它<command>CREATE ROLE</command>的选项，
都是<productname>PostgreSQL</productname>扩展。
</para>

  <!--
<para>
   The SQL standard defines the concepts of users and roles, but it
   regards them as distinct concepts and leaves all commands defining
   users to be specified by each database implementation.  In
   <productname>PostgreSQL</productname> we have chosen to unify
   users and roles into a single kind of entity.  Roles therefore
   have many more optional attributes than they do in the standard.
  </para>
-->
<para>
SQL 标准定义了用户和角色的概念，但是它认为这两个概念是完全独立的概念，
并且要求定义用户的所有命令都针对每个数据库实现。在<productname>PostgreSQL</productname>
里选择了把用户和角色统一成一类对象。因此角色比标准里的有更多的属性。
</para>

  <!--
<para>
   The behavior specified by the SQL standard is most closely approximated
   by giving users the <literal>NOINHERIT</> attribute, while roles are
   given the <literal>INHERIT</> attribute.
  </para>
-->
<para>
SQL 标准里声明的行为非常接近于给予用户<literal>NOINHERIT</>属性，
而给予角色<literal>INHERIT</>属性。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>See Also</title>
-->
<title>又见</title>

  <simplelist type="inline">
   <member><xref linkend="sql-set-role"></member>
   <member><xref linkend="sql-alterrole"></member>
   <member><xref linkend="sql-droprole"></member>
   <member><xref linkend="sql-grant"></member>
   <member><xref linkend="sql-revoke"></member>
   <member><xref linkend="app-createuser"></member>
  </simplelist>
 </refsect1>
</refentry>
