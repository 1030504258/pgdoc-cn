<!--
doc/src/sgml/ref/insert.sgml
PostgreSQL documentation
-->

<refentry id="SQL-INSERT">
 <refmeta>
  <refentrytitle>INSERT</refentrytitle>
  <manvolnum>7</manvolnum>
  <!--
<refmiscinfo>SQL - Language Statements</refmiscinfo>
-->
<refmiscinfo>SQL - 语句</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>INSERT</refname>
  <!-- 
  <refpurpose>create new rows in a table</refpurpose> 
  -->
  <refpurpose>在表中创建新行</refpurpose>
 </refnamediv>

 <indexterm zone="sql-insert">
  <primary>INSERT</primary>
 </indexterm>

 <refsynopsisdiv>
<synopsis>
[ WITH [ RECURSIVE ] <replaceable class="parameter">with_query</replaceable> [, ...] ]
INSERT INTO <replaceable class="PARAMETER">table_name</replaceable> [ ( <replaceable class="PARAMETER">column_name</replaceable> [, ...] ) ]
    { DEFAULT VALUES | VALUES ( { <replaceable class="PARAMETER">expression</replaceable> | DEFAULT } [, ...] ) [, ...] | <replaceable class="PARAMETER">query</replaceable> }
    [ RETURNING * | <replaceable class="parameter">output_expression</replaceable> [ [ AS ] <replaceable class="parameter">output_name</replaceable> ] [, ...] ]
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <!--
<title>Description</title>
-->
<title>描述</title>

  <!--
<para>
   <command>INSERT</command> inserts new rows into a table.
   One can insert one or more rows specified by value expressions,
   or zero or more rows resulting from a query.
  </para>
-->
<para>
<command>INSERT</command>向表中插入新行。可以一次插入用值表达式声明的一行或多行，
或者一个查询结果表现出来的零行或多个行。
</para>

  <!--
<para>
   The target column names can be listed in any order.  If no list of
   column names is given at all, the default is all the columns of the
   table in their declared order; or the first <replaceable>N</> column
   names, if there are only <replaceable>N</> columns supplied by the
   <literal>VALUES</> clause or <replaceable>query</>.  The values
   supplied by the <literal>VALUES</> clause or <replaceable>query</> are
   associated with the explicit or implicit column list left-to-right.
  </para>
-->
<para>
目标列表中的列/字段可以按任何顺序排列。如果完全没有列出任何字段名，那么缺省是全部字段，
顺序是按照表声明的时候的顺序；如果<literal>VALUES</>子句或者<replaceable>query</>
里面只提供了<replaceable>N</>个字段，那么就是头<replaceable>N</>个字段。<literal>VALUES</>
子句或者<replaceable>query</>提供的数值是以从左到右的方式与明确或者隐含的字段列表关联的。
</para>

  <!--
<para>
   Each column not present in the explicit or implicit column list will be
   filled with a default value, either its declared default value
   or null if there is none.
  </para>
-->
<para>
每个没有在明确或者隐含的字段列表中出现的字段都将填充缺省值，
如果有声明的缺省值则用声明的那个，如果没有则用 NULL 。
</para>

  <!--
<para>
   If the expression for any column is not of the correct data type,
   automatic type conversion will be attempted.
  </para>
-->
<para>
如果每个字段的表达式不是正确的数据类型，系统将试图进行自动的类型转换。
</para>

  <!--
<para>
   The optional <literal>RETURNING</> clause causes <command>INSERT</>
   to compute and return value(s) based on each row actually inserted.
   This is primarily useful for obtaining values that were supplied by
   defaults, such as a serial sequence number.  However, any expression
   using the table's columns is allowed.  The syntax of the
   <literal>RETURNING</> list is identical to that of the output list
   of <command>SELECT</>.
  </para>
-->
<para>
可选的<literal>RETURNING</>子句将导致<command>INSERT</>计算和返回实际插入的行，
它主要用于获取缺省的计算值(比如序列值)，不过，任何使用该表字段的表达式都是允许的。
<literal>RETURNING</>列表的语法都与<command>SELECT</>的输出列表相同。
</para>

  <!--
<para>
   You must have <literal>INSERT</literal> privilege on a table in
   order to insert into it.  If a column list is specified, you only
   need <literal>INSERT</literal> privilege on the listed columns.
   Use of the <literal>RETURNING</> clause requires <literal>SELECT</>
   privilege on all columns mentioned in <literal>RETURNING</>.
   If you use the <replaceable
   class="PARAMETER">query</replaceable> clause to insert rows from a
   query, you of course need to have <literal>SELECT</literal> privilege on
   any table or column used in the query.
  </para>
-->
<para>
要想向表中插入数据，你必须有<literal>INSERT</literal>权限。如果指定了一个字段列表，
那么只需要在列表字段上的<literal>INSERT</literal>权限。使用<literal>RETURNING</>
子句需要要在<literal>RETURNING</>中提到的所有字段上的<literal>SELECT</>权限。
如果你使用了<replaceable class="PARAMETER">query</replaceable>子句插入来自查询里的数据行，
你还需要拥有在查询里使用的表或字段的<literal>SELECT</literal>权限。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>Parameters</title>
-->
<title>参数</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="parameter">with_query</replaceable></term>
    <listitem>
     <!--
<para>
      The <literal>WITH</literal> clause allows you to specify one or more
      subqueries that can be referenced by name in the <command>INSERT</>
      query. See <xref linkend="queries-with"> and <xref linkend="sql-select">
      for details.
     </para>
-->
<para>
<literal>WITH</literal>子句允许声明一个或多个可以在<command>INSERT</>
查询中通过名字引用的子查询。参阅<xref linkend="queries-with">和
<xref linkend="sql-select">获取详细信息。
</para>
     <!--
<para>
      It is possible for the <replaceable class="parameter">query</replaceable>
      (<command>SELECT</command> statement)
      to also contain a <literal>WITH</literal> clause.  In such a case both
      sets of <replaceable>with_query</replaceable> can be referenced within
      the <replaceable class="parameter">query</replaceable>, but the
      second one takes precedence since it is more closely nested.
     </para>
-->
<para>
<replaceable class="parameter">query</replaceable>(<command>SELECT</command> 语句)
也包含一个<literal>WITH</literal>子句是可能的。在这种情况下，两套
<replaceable>with_query</replaceable>都可以在<replaceable class="parameter">query</replaceable>
中引用，但是第二个优先，因为它嵌套更紧密。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">table_name</replaceable></term>
    <listitem>
     <!--
<para>
      The name (optionally schema-qualified) of an existing table.
     </para>
-->
<para>
现存表的名称(可以有模式修饰)。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">column_name</replaceable></term>
    <listitem>
     <!--
<para>
      The name of a column in the table named by <replaceable class="PARAMETER">table_name</replaceable>.
      The column name can be qualified with a subfield name or array
      subscript, if needed.  (Inserting into only some fields of a
      composite column leaves the other fields null.)
     </para>
-->
<para>
通过<replaceable class="PARAMETER">table_name</replaceable>命名的表中的字段名。必要时，
字段名可以有子字段名或者数组下标修饰。向一个复合类型中的某些字段插入数据的话，
其它字段将是 NULL 。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>DEFAULT VALUES</literal></term>
    <listitem>
     <!--
<para>
      All columns will be filled with their default values.
     </para>
-->
<para>
所有字段都会用它们的缺省值填充。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">expression</replaceable></term>
    <listitem>
     <!--
<para>
      An expression or value to assign to the corresponding column.
     </para>
-->
<para>
赋予对应的 column 的一个有效表达式或值。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>DEFAULT</literal></term>
    <listitem>
     <!--
<para>
      The corresponding column will be filled with
      its default value.
     </para>
-->
<para>
对应的 column 将被它的缺省值填充。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">query</replaceable></term>
    <listitem>
     <!--
<para>
      A query (<command>SELECT</command> statement) that supplies the
      rows to be inserted.  Refer to the
      <xref linkend="sql-select">
      statement for a description of the syntax.
     </para>
-->
<para>
一个查询(<command>SELECT</command>语句)，它提供插入的数据行。请参考<xref linkend="sql-select">
语句获取语法描述。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">output_expression</replaceable></term>
    <listitem>
     <!--
<para>
      An expression to be computed and returned by the <command>INSERT</>
      command after each row is inserted.  The expression can use any
      column names of the table named by <replaceable class="PARAMETER">table_name</replaceable>.
      Write <literal>*</> to return all columns of the inserted row(s).
     </para>
-->
<para>
<command>INSERT</>命令在每一行都被插入之后用于计算输出结果的表达式。该表达式可以使用
通过<replaceable class="PARAMETER">table_name</replaceable>命名的表的的任意字段。
可以使用<literal>*</>返回被插入行的所有字段。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">output_name</replaceable></term>
    <listitem>
     <!--
<para>
      A name to use for a returned column.
     </para>
-->
<para>
一个字段的输出名称。
</para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
  <!-- 
  <title>Outputs</title> 
  -->
  <title>输出</title>

  <!--
<para>
   On successful completion, an <command>INSERT</> command returns a command
   tag of the form
<screen>
INSERT <replaceable>oid</replaceable> <replaceable class="parameter">count</replaceable>
</screen>
   The <replaceable class="parameter">count</replaceable> is the number
   of rows inserted.  If <replaceable class="parameter">count</replaceable>
   is exactly one, and the target table has OIDs, then
   <replaceable class="parameter">oid</replaceable> is the
   <acronym>OID</acronym> assigned to the inserted row.  Otherwise
   <replaceable class="parameter">oid</replaceable> is zero.
  </para>
-->
<para>
成功完成后，一条 <command>INSERT</>命令返回一个下面形式的命令标签
<screen>
INSERT <replaceable>oid</replaceable> <replaceable class="parameter">count</replaceable>
</screen>
<replaceable class="parameter">count</replaceable>是插入的行数。如果
<replaceable class="parameter">count</replaceable>正好是一，并且目标表有 OID ，
那么<replaceable class="parameter">oid</replaceable>是赋予插入行的<acronym>OID</acronym>。
否则<replaceable class="parameter">oid</replaceable>是零。
</para>

  <!--
<para>
   If the <command>INSERT</> command contains a <literal>RETURNING</>
   clause, the result will be similar to that of a <command>SELECT</>
   statement containing the columns and values defined in the
   <literal>RETURNING</> list, computed over the row(s) inserted by the
   command.
  </para>
-->
<para>
如果<command>INSERT</>命令包含<literal>RETURNING</>子句，其结果将和一个<command>SELECT</>
语句相同，包含那些基于该命令实际插入的行计算的、定义在<literal>RETURNING</>列表中的字段的值。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>Examples</title>
-->
<title>例子</title>

  <!--
<para>
   Insert a single row into table <literal>films</literal>:

<programlisting>
INSERT INTO films VALUES
    ('UA502', 'Bananas', 105, '1971-07-13', 'Comedy', '82 minutes');
</programlisting>
  </para>
-->
<para>
向表<literal>films</literal>里插入单独一行：
<programlisting>
INSERT INTO films VALUES
    ('UA502', 'Bananas', 105, '1971-07-13', 'Comedy', '82 minutes');
</programlisting>
</para>

  <!--
<para>
   In this example, the <literal>len</literal> column is
   omitted and therefore it will have the default value:

<programlisting>
INSERT INTO films (code, title, did, date_prod, kind)
    VALUES ('T_601', 'Yojimbo', 106, '1961-06-16', 'Drama');
</programlisting>
  </para>
-->
<para>
在这个例子里面省略了字段<literal>len</literal>，因此在它里面将存储缺省值：
<programlisting>
INSERT INTO films (code, title, did, date_prod, kind)
    VALUES ('T_601', 'Yojimbo', 106, '1961-06-16', 'Drama');
</programlisting>
</para>

  <!--
<para>
   This example uses the <literal>DEFAULT</literal> clause for
   the date columns rather than specifying a value:

<programlisting>
INSERT INTO films VALUES
    ('UA502', 'Bananas', 105, DEFAULT, 'Comedy', '82 minutes');
INSERT INTO films (code, title, did, date_prod, kind)
    VALUES ('T_601', 'Yojimbo', 106, DEFAULT, 'Drama');
</programlisting>
  </para>
-->
<para>
在这个例子里，用<literal>DEFAULT</literal>子句作为日期字段，而不是声明一个数值：
<programlisting>
INSERT INTO films VALUES
    ('UA502', 'Bananas', 105, DEFAULT, 'Comedy', '82 minutes');
INSERT INTO films (code, title, did, date_prod, kind)
    VALUES ('T_601', 'Yojimbo', 106, DEFAULT, 'Drama');
</programlisting>
</para>

  <!--
<para>
   To insert a row consisting entirely of default values:

<programlisting>
INSERT INTO films DEFAULT VALUES;
</programlisting>
  </para>
-->
<para>
插入一行完全由缺省值组成的数据行：
<programlisting>
INSERT INTO films DEFAULT VALUES;
</programlisting>
</para>

  <!--
<para>
   To insert multiple rows using the multirow <command>VALUES</> syntax:

<programlisting>
INSERT INTO films (code, title, did, date_prod, kind) VALUES
    ('B6717', 'Tampopo', 110, '1985-02-10', 'Comedy'),
    ('HG120', 'The Dinner Game', 140, DEFAULT, 'Comedy');
</programlisting>
  </para>
-->
<para>
使用多行<command>VALUES</>语法插入多行：
<programlisting>
INSERT INTO films (code, title, did, date_prod, kind) VALUES
    ('B6717', 'Tampopo', 110, '1985-02-10', 'Comedy'),
    ('HG120', 'The Dinner Game', 140, DEFAULT, 'Comedy');
</programlisting>
</para>

  <!--
<para>
   This example inserts some rows into table
   <literal>films</literal> from a table <literal>tmp_films</literal>
   with the same column layout as <literal>films</literal>:

<programlisting>
INSERT INTO films SELECT * FROM tmp_films WHERE date_prod &lt; '2004-05-07';
</programlisting>
  </para>
-->
<para>
从表<literal>tmp_films</literal>中插入几行到表 <literal>films</literal>中，
字段布局与<literal>films</literal>相同：
<programlisting>
INSERT INTO films SELECT * FROM tmp_films WHERE date_prod &lt; '2004-05-07';
</programlisting>
</para>

  <!--
<para>
   This example inserts into array columns:

<programlisting>
&#045;- Create an empty 3x3 gameboard for noughts-and-crosses
INSERT INTO tictactoe (game, board[1:3][1:3])
    VALUES (1, '{{" "," "," "},{" "," "," "},{" "," "," "}}');
&#045;- The subscripts in the above example aren't really needed
INSERT INTO tictactoe (game, board)
    VALUES (2, '{{X," "," "},{" ",O," "},{" ",X," "}}');
</programlisting>
  </para>
-->
<para>
插入数组：
<programlisting>
-- 创建一个空的3x3游戏板来玩圈-和-叉游戏(这些查询创建相同的板属性)
INSERT INTO tictactoe (game, board[1:3][1:3])
    VALUES (1, '{{" "," "," "},{" "," "," "},{" "," "," "}}');
-- 上述例子中的下标并非真正必须
INSERT INTO tictactoe (game, board)
    VALUES (2, '{{X," "," "},{" ",O," "},{" ",X," "}}');
</programlisting>
</para>

  <!--
<para>
   Insert a single row into table <literal>distributors</literal>, returning
   the sequence number generated by the <literal>DEFAULT</literal> clause:

<programlisting>
INSERT INTO distributors (did, dname) VALUES (DEFAULT, 'XYZ Widgets')
   RETURNING did;
</programlisting>
  </para>
-->
<para>
向<literal>distributors</literal>表插入一个单独的行，并返回由<literal>DEFAULT</literal>
子句生成的序列值：
<programlisting>
INSERT INTO distributors (did, dname) VALUES (DEFAULT, 'XYZ Widgets')
   RETURNING did;
</programlisting>
</para>

  <!--
<para>
   Increment the sales count of the salesperson who manages the
   account for Acme Corporation, and record the whole updated row
   along with current time in a log table:
<programlisting>
WITH upd AS (
  UPDATE employees SET sales_count = sales_count + 1 WHERE id =
    (SELECT sales_person FROM accounts WHERE name = 'Acme Corporation')
    RETURNING *
)
INSERT INTO employees_log SELECT *, current_timestamp FROM upd;
</programlisting></para>
-->
<para>
增加销售人员为Acme Corporation的打折力度，并且在日志表中记录真个更新了的行和当前时间：
<programlisting>
WITH upd AS (
  UPDATE employees SET sales_count = sales_count + 1 WHERE id =
    (SELECT sales_person FROM accounts WHERE name = 'Acme Corporation')
    RETURNING *
)
INSERT INTO employees_log SELECT *, current_timestamp FROM upd;
</programlisting>
</para>
 </refsect1>

 <refsect1>
  <!--
<title>Compatibility</title>
-->
<title>兼容性</title>

  <!--
<para>
   <command>INSERT</command> conforms to the SQL standard, except that
   the <literal>RETURNING</> clause is a
   <productname>PostgreSQL</productname> extension, as is the ability
   to use <literal>WITH</> with <command>INSERT</>.
   Also, the case in
   which a column name list is omitted, but not all the columns are
   filled from the <literal>VALUES</> clause or <replaceable>query</>,
   is disallowed by the standard.
  </para>
-->
<para>
<command>INSERT</command>语句与 SQL 标准兼容。但<literal>RETURNING</>子句是
<productname>PostgreSQL</productname>扩展，就像在<command>INSERT</>中使用<literal>WITH</>。
同样，省略字段名列表，但是并非所有字段都从<literal>VALUES</>子句或者<replaceable>query</>
填充的这种用法是标准不允许的。
</para>

  <!--
<para>
   Possible limitations of the <replaceable
   class="PARAMETER">query</replaceable> clause are documented under
   <xref linkend="sql-select">.
  </para>
-->
<para>
可能碰到的关于<replaceable class="PARAMETER">query</replaceable>子句特性的限制在
<xref linkend="sql-select">语句中有相关文档。
</para>
 </refsect1>
</refentry>
