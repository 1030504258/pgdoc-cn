<!-- doc/src/sgml/ref/pgarchivecleanup.sgml -->

<refentry id="pgarchivecleanup">
 <indexterm zone="pgarchivecleanup">
  <primary>pg_archivecleanup</primary>
 </indexterm>
 
 <refmeta>
  <refentrytitle><application>pg_archivecleanup</application></refentrytitle>
  <manvolnum>1</manvolnum>
  <refmiscinfo>Application</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>pg_archivecleanup</refname>
  <!-- 
  <refpurpose>clean up <productname>PostgreSQL</productname> WAL archive files</refpurpose>
  -->
  <refpurpose>清理<productname>PostgreSQL</productname> WAL 归档文件</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
  <cmdsynopsis>
   <command>pg_archivecleanup</command>
   <arg rep="repeat"><replaceable>option</replaceable></arg>
   <arg choice="plain"><replaceable>archivelocation</replaceable></arg>
   <arg choice="plain"><replaceable>oldestkeptwalfile</replaceable></arg>
  </cmdsynopsis>
 </refsynopsisdiv>

 <refsect1>
  <!-- 
  <title>Description</title>
  -->
  <title>描述</title>

 <!-- 
 <para>
  <application>pg_archivecleanup</> is designed to be used as an
  <literal>archive_cleanup_command</literal> to clean up WAL file archives when
  running as a standby server (see <xref linkend="warm-standby">).
  <application>pg_archivecleanup</> can also be used as a standalone program to
  clean WAL file archives.
 </para>
 -->
 <para>
  <application>pg_archivecleanup</>被设计为后备服务器（见<xref linkend="warm-standby">）
  运行时用来清理 WAL 文件归档的 <literal>archive_cleanup_command</literal>。
  <application>pg_archivecleanup</>也可以被用作一个独立程序来清理 WAL 文件归档。
 </para>

  <para>
   <!-- 
   To configure a standby
   server to use <application>pg_archivecleanup</>, put this into its
   <filename>recovery.conf</filename> configuration file:
   -->
   要配置一个后备服务器使用<application>pg_archivecleanup</>，
   把下面的配置放在<filename>recovery.conf</filename>配置文件中：
<programlisting>
archive_cleanup_command = 'pg_archivecleanup <replaceable>archivelocation</> %r'
</programlisting>
   <!-- 
   where <replaceable>archivelocation</> is the directory from which WAL segment
   files should be removed.
   -->
   其中<replaceable>archivelocation</>是应该被移除的 WAL 段文件的目录。
  </para>
  <!-- 
  <para>
   When used within <xref linkend="archive-cleanup-command">, all WAL files
   logically preceding the value of the <literal>%r</> argument will be removed
   from <replaceable>archivelocation</>. This minimizes the number of files
   that need to be retained, while preserving crash-restart capability.  Use of
   this parameter is appropriate if the <replaceable>archivelocation</> is a
   transient staging area for this particular standby server, but
   <emphasis>not</> when the <replaceable>archivelocation</> is intended as a
   long-term WAL archive area, or when multiple standby servers are recovering
   from the same archive location.
  </para>
  -->
  <para>
   当用于<xref linkend="archive-cleanup-command">时，所有逻辑上在<literal>%r</>
   参数的值之前的 WAL 文件将被从<replaceable>archivelocation</>移除。
   这将使需要被保留的文件数最小化，并且还能保留崩溃重启的能力。如果
   <replaceable>archivelocation</>是这个特殊的备用服务器的瞬态暂存区域，使用这个参数是合适的。
   但是当<replaceable>archivelocation</>是作为一个长期的 WAL 归档区域时，
   或者多个后备服务器都从同一个归档位置恢复时，使用这个参数就<emphasis>不</>合适了。
  </para>
  <para>
   <!-- 
   When used as a standalone program all WAL files logically preceding the
   <replaceable>oldestkeptwalfile</> will be removed from <replaceable>archivelocation</>.
   In this mode, if you specify a <filename>.partial</> or <filename>.backup</>
   file name, then only the file prefix will be used as the
   <replaceable>oldestkeptwalfile</>. This treatment of <filename>.backup</>
   file name allows you to remove
   all WAL files archived prior to a specific base backup without error.
   For example, the following example will remove all files older than
   WAL file name <filename>000000010000003700000010</>:
   -->
   当用作一个独立程序时，所有逻辑上在<replaceable>oldestkeptwalfile</>
   之前的 WAL 文件都将从<replaceable>archivelocation</>中移除。在这种模式中，
   如果你指定了一个<filename>.partial</>或<filename>.backup</>文件名，
   那么只有文件前缀被用作<replaceable>oldestkeptwalfile</>。
   这样处理<filename>.backup</>文件名允许你移除先于一个特定基础备份被归档的所有
   WAL 文件而不出错。例如，下面的例子将移除所有比名为
   <filename>000000010000003700000010</>的 WAL 文件老的文件：
<programlisting>
pg_archivecleanup -d archive 000000010000003700000010.00000020.backup

pg_archivecleanup:  keep WAL file "archive/000000010000003700000010" and later
pg_archivecleanup:  removing file "archive/00000001000000370000000F"
pg_archivecleanup:  removing file "archive/00000001000000370000000E"
</programlisting>
  </para>
  <!-- 
  <para>
   <application>pg_archivecleanup</application> assumes that
   <replaceable>archivelocation</> is a directory readable and writable by the
   server-owning user.
  </para>
  -->
  <para>
   <application>pg_archivecleanup</application>假定<replaceable>archivelocation</>
   是一个可读的目录并且对拥有服务器的用户可写。
  </para>
 </refsect1>

 <refsect1>
  <!-- 
  <title>Options</title>
  -->
  <title>选项</title>

   <para>
    <!-- 
    <application>pg_archivecleanup</application> accepts the following command-line arguments:
    -->
    <application>pg_archivecleanup</application>接受下列命令行参数：

    <variablelist>

     <varlistentry>
      <term><option>-d</option></term>
      <listitem>
       <!-- 
       <para>
        Print lots of debug logging output on <filename>stderr</>.
       </para>
       -->
       <para>
        在<filename>stderr</>上打印大量调试日志输出。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-n</option></term>
      <listitem>
       <!-- 
       <para>
        Print the names of the files that would have been removed on <filename>stdout</> (performs a dry run).
       </para>
       -->
       <para>
        在<filename>stdout</>上打印可能会被移除的文件的名称（执行一次空运行）。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-V</></term>
      <term><option>--version</></term>
      <listitem>
       <!-- 
       <para>
        Print the <application>pg_archivecleanup</application> version and exit.
       </para>
       -->
       <para>
        打印<application>pg_archivecleanup</application>版本并退出。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-x</option> <replaceable>extension</></term>
      <listitem>
       <!-- 
       <para>
        When using the program as a standalone utility, provide an extension
        that will be stripped from all file names before deciding if they
        should be deleted.  This is typically useful for cleaning up archives
        that have been compressed during storage, and therefore have had an
        extension added by the compression program.  For example: <literal>-x
        .gz</literal>.
       </para>
       -->
       <para>
        当把这个程序用作一个独立工具时，
        提供一个在判断文件是否应被删除前要从所有文件名中剥离的扩展。
        这通常对清理在存储期间被压缩过的归档（并且因此会被压缩程序加上一个扩展）
        有用。例如：<literal>-x.gz</literal>。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-?</></term>
      <term><option>--help</></term>
      <listitem>
       <!-- 
       <para>
        Show help about <application>pg_archivecleanup</application> command line
        arguments, and exit.
       </para>
       -->
       <para>
        显示有关<application>pg_archivecleanup</application>命令行参数的帮助信息并且退出。
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>
 </refsect1>

 <refsect1>
  <!-- 
  <title>Notes</title>
  -->
  <title>注意</title>

  <!-- 
  <para>
   <application>pg_archivecleanup</application> is designed to work with
   <productname>PostgreSQL</> 8.0 and later when used as a standalone utility,
   or with <productname>PostgreSQL</> 9.0 and later when used as an
   archive cleanup command.
  </para>
  -->
  <para>
   当作为一个独立工具使用时，<application>pg_archivecleanup</application>
   被设计为可以与<productname>PostgreSQL</> 8.0 及以后的版本一起工作。
   但是当被用作一个归档清理命令时，它只能和<productname>PostgreSQL</> 9.0 及以后的版本一起工作。
  </para>

  <!-- 
  <para>
   <application>pg_archivecleanup</application> is written in C and has an
   easy-to-modify source code, with specifically designated sections to modify
   for your own needs
  </para>
  -->
  <para>
   <application>pg_archivecleanup</application>是用 C 编写而成并且有一份很容易修改的源代码，
   你可以根据自己的需要修改其中特别设计的小节。
  </para>
 </refsect1>

 <refsect1>
  <!-- 
  <title>Examples</title>
  -->
  <title>例子</title>

  <para>
  <!-- 
  On Linux or Unix systems, you might use:
  -->
  在 Linux 或 Unix 系统上，你可能使用：
<programlisting>
archive_cleanup_command = 'pg_archivecleanup -d /mnt/standby/archive %r 2>>cleanup.log'
</programlisting>
   <!-- 
   where the archive directory is physically located on the standby server,
   so that the <varname>archive_command</> is accessing it across NFS,
   but the files are local to the standby.
   This will:
   -->
   其中归档目录在物理上位于后备服务器上，因而<varname>archive_command</>
   通过 NFS 访问它，但是文件是后备服务器本地的。这将：
  </para>
  <itemizedlist>
   <listitem>
    <!-- 
    <para>
     produce debugging output in <filename>cleanup.log</>
    </para>
    -->
    <para>
     在<filename>cleanup.log</>中产生调试输出
    </para>
   </listitem>
   <listitem>
    <!-- 
    <para>
     remove no-longer-needed files from the archive directory
    </para>
    -->
    <para>
     从该归档目录中移除不再需要的文件
    </para>
   </listitem>
  </itemizedlist>
 </refsect1>

 <refsect1>
  <!-- 
  <title>See Also</title>
  -->
  <title>又见</title>

  <simplelist type="inline">
   <member><xref linkend="pgstandby"></member>
  </simplelist>
 </refsect1>
</refentry>
