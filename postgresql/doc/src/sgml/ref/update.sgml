<!--
doc/src/sgml/ref/update.sgml
PostgreSQL documentation
-->

<refentry id="SQL-UPDATE">
 <indexterm zone="sql-update">
  <primary>UPDATE</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>UPDATE</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>UPDATE</refname>
  <refpurpose>更新一个表的行</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
[ WITH [ RECURSIVE ] <replaceable class="parameter">with_query</replaceable> [, ...] ]
UPDATE [ ONLY ] <replaceable class="PARAMETER">table_name</replaceable> [ * ] [ [ AS ] <replaceable class="parameter">alias</replaceable> ]
    SET { <replaceable class="PARAMETER">column_name</replaceable> = { <replaceable class="PARAMETER">expression</replaceable> | DEFAULT } |
          ( <replaceable class="PARAMETER">column_name</replaceable> [, ...] ) = ( { <replaceable class="PARAMETER">expression</replaceable> | DEFAULT } [, ...] ) |
          ( <replaceable class="PARAMETER">column_name</replaceable> [, ...] ) = ( <replaceable class="PARAMETER">sub-SELECT</replaceable> )
        } [, ...]
    [ FROM <replaceable class="PARAMETER">from_list</replaceable> ]
    [ WHERE <replaceable class="PARAMETER">condition</replaceable> | WHERE CURRENT OF <replaceable class="PARAMETER">cursor_name</replaceable> ]
    [ RETURNING * | <replaceable class="parameter">output_expression</replaceable> [ [ AS ] <replaceable class="parameter">output_name</replaceable> ] [, ...] ]
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>描述</title>

  <para>
   <command>UPDATE</command>更改满足条件的所有行中指定列
   的值。只有要被修改的列需要在<literal>SET</literal>子句中提及，
   没有被显式修改的列保持它们之前的值。
  </para>

  <para>
   有两种方法使用包含在数据库其他表中的信息来修改一个表：使用子选择
   或者在<literal>FROM</literal>子句中指定额外的表。这种技术只适合
   特定的环境。
  </para>

  <para>
   可选的<literal>RETURNING</>子句导致<command>UPDATE</>
   基于实际被更新的每一行计算并且返回值。任何使用该表的列以及
   <literal>FROM</literal>中提到的其他表的列的表达式都能被计算。
   计算时会使用该表的列的新（更新后）值。<literal>RETURNING</>
   列表的语法和<command>SELECT</>的输出列表相同。
  </para>

  <para>
   你必须拥有该表上的<literal>UPDATE</literal>特权，或者至少拥有
   要被更新的列上的该特权。如果任何一列的值需要被
   <replaceable class="parameter">expressions</replaceable>或者
   <replaceable class="parameter">condition</replaceable>读取，
   你还必须拥有该列上的<literal>SELECT</literal>特权。
  </para>
 </refsect1>

 <refsect1>
  <title>参数</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="parameter">with_query</replaceable></term>
    <listitem>
     <para>
      <literal>WITH</literal>子句允许你指定一个或者更多个在
      <command>UPDATE</>中可用其名称引用的子查询。详见
      <xref linkend="queries-with">和<xref linkend="sql-select">。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">table_name</replaceable></term>
    <listitem>
     <para>
      要更新的表的名称（可以是模式限定的）。如果在表名前指定了
      <literal>ONLY</>，只会更新所提及表中的匹配行。如果没有指定
      <literal>ONLY</>，任何从所提及表继承得到的表中的匹配行也会
      被更新。可选地，在表名之后指定<literal>*</>可以显式地指示要
      把后代表也包括在内。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">alias</replaceable></term>
    <listitem>
     <para>
      目标表的一个替代名称。在提供了一个别名时，它会完全隐藏表的真实
      名称。例如，给定<literal>UPDATE foo AS f</>，
      <command>UPDATE</command>语句的剩余部分必须用
      <literal>f</>而不是<literal>foo</>来引用该表。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">column_name</replaceable></term>
    <listitem>
     <para>
      <replaceable class="PARAMETER">table_name</replaceable>
      所指定的表的一列的名称。如果需要，该列名可以用一个子域名称或者
      数组下标限定。不要在目标列的说明中包括表的名称 &mdash; 例如
      <literal>UPDATE tab SET tab.col = 1</>是非法的。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">expression</replaceable></term>
    <listitem>
     <para>
      要被赋值给该列的一个表达式。该表达式可以使用该表中这一列或者
      其他列的旧值。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>DEFAULT</literal></term>
    <listitem>
     <para>
      将该列设置为它的默认值（如果没有为它指定默认值表达式，默认值
      将会为 NULL）。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">sub-SELECT</replaceable></term>
    <listitem>
     <!-- 
     <para>
      A <literal>SELECT</> sub-query that produces as many output columns
      as are listed in the parenthesized column list preceding it.  The
      sub-query must yield no more than one row when executed.  If it
      yields one row, its column values are assigned to the target columns;
      if it yields no rows, NULL values are assigned to the target columns.
      The sub-query can refer to old values of the current row of the table
      being updated.
     </para>
     -->
     <para>
      一个<literal>SELECT</>子查询，它产生和在它之前的圆括号中列列表中一样多的输出列。
      被执行时，该子查询必须得到不超过一行。如果它得到一行，其列值会被赋予给目标列。
      如果它得不到行，NULL 值将被赋予给目标列。该子查询可以引用被更新表中当前行的旧值。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">from_list</replaceable></term>
    <listitem>
     <para>
      表表达式的列表，允许来自其他表的列出现在<literal>WHERE</>
      条件和更新表达式中。这类似于可以在
      <command>SELECT</command>语句的<xref linkend="sql-from"
      endterm="sql-from-title">中指定的表列表。注意目标表不能出现在
      <replaceable>from_list</>中，除非你想做自连接（这种情况下它必须
      以别名出现在<replaceable>from_list</>中）。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">condition</replaceable></term>
    <listitem>
     <para>
      一个返回<type>boolean</type>类型值的表达式。让这个
      表达式返回<literal>true</>的行将会被更新。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">cursor_name</replaceable></term>
    <listitem>
     <para>
      要在<literal>WHERE CURRENT OF</>条件中使用的游标名。
      要被更新的是从这个游标中最近取出的行。该游标必须是一个
      在<command>UPDATE</>目标表上的非分组查询。注意
      <literal>WHERE CURRENT OF</>不能和一个布尔条件一起
      指定。有关对游标使用<literal>WHERE CURRENT OF</>的
      更多信息请见<xref linkend="sql-declare">。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">output_expression</replaceable></term>
    <listitem>
     <para>
      在每一行被更新后，要被<command>UPDATE</>命令计算并且返回
      的表达式。该表达式可以使用
      <replaceable class="PARAMETER">table_name</replaceable>指定
      的表或者<literal>FROM</>列出的表中的任何列名。写<literal>*</>
      可以返回所有列。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">output_name</replaceable></term>
    <listitem>
     <para>
      用于一个被返回列的名称。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
  <title>输出</title>

  <para>
   成功完成时，一个<command>UPDATE</>命令返回形如
<screen>
UPDATE <replaceable class="parameter">count</replaceable>
</screen>
   的命令标签。
   <replaceable class="parameter">count</replaceable>是被更新的行数，
   包括值没有更改的匹配行。注意，当更新被一个<literal>BEFORE UPDATE</>
   触发器抑制时，这个数量可能比匹配
   <replaceable class="parameter">condition</replaceable>的行数少。如果
   <replaceable class="parameter">count</replaceable>为零，没有行被该查
   询更新（这不是一个错误）。
  </para>

  <para>
   如果<command>UPDATE</>命令包含一个<literal>RETURNING</>
   子句，其结果将类似于一个包含<literal>RETURNING</>列表中定义的
   列和值的<command>SELECT</>语句（在被该命令更新的行上计算）
   的结果。
  </para>
 </refsect1>

 <refsect1>
  <title>注解</title>

  <para>
   当存在<literal>FROM</>子句时，实际发生的是：目标表被连接到
   <replaceable>from_list</replaceable>中的表，并且该连接的每一
   个输出行表示对目标表的一个更新操作。在使用<literal>FROM</>
   时，你应该确保该连接对每一个要修改的行产生至多一个输出行。换
   句话说，一个目标行不应该连接到来自其他表的多于一行上。如果发
   生这种情况，则只有一个连接行将被用于更新目标行，但是将使用哪
   一行是很难预测的。
  </para>

  <para>
   由于这种不确定性，只在一个子选择中引用其他表更安全，不过这种
   语句通常很难写并且也比使用连接慢。
  </para>
 </refsect1>

 <refsect1>
  <title>示例</title>

  <para>
   把表<structname>films</structname>的列<structfield>kind</>
   中的单词<literal>Drama</>改成<literal>Dramatic</>：

<programlisting>
UPDATE films SET kind = 'Dramatic' WHERE kind = 'Drama';
</programlisting>
  </para>

  <para>
   在表<structname>weather</structname>的一行中调整温度项并且
   把沉淀物重置为它的默认值：

<programlisting>
UPDATE weather SET temp_lo = temp_lo+1, temp_hi = temp_lo+15, prcp = DEFAULT
  WHERE city = 'San Francisco' AND date = '2003-07-03';
</programlisting>
  </para>

  <para>
   执行相同的操作并且返回更新后的项：

<programlisting>
UPDATE weather SET temp_lo = temp_lo+1, temp_hi = temp_lo+15, prcp = DEFAULT
  WHERE city = 'San Francisco' AND date = '2003-07-03'
  RETURNING temp_lo, temp_hi, prcp;
</programlisting>
  </para>

  <para>
   使用另一种列列表语法来做同样的更新：
<programlisting>
UPDATE weather SET (temp_lo, temp_hi, prcp) = (temp_lo+1, temp_lo+15, DEFAULT)
  WHERE city = 'San Francisco' AND date = '2003-07-03';
</programlisting>
  </para>

  <para>
   为管理Acme Corporation账户的销售人员增加销售量，使用
   <literal>FROM</literal>子句语法：
<programlisting>
UPDATE employees SET sales_count = sales_count + 1 FROM accounts
  WHERE accounts.name = 'Acme Corporation'
  AND employees.id = accounts.sales_person;
</programlisting>
  </para>

  <para>
   执行相同的操作，在
   <literal>WHERE</literal>子句中使用子选择：
<programlisting>
UPDATE employees SET sales_count = sales_count + 1 WHERE id =
  (SELECT sales_person FROM accounts WHERE name = 'Acme Corporation');
</programlisting>
  </para>

  <para>
   <!-- 
   Update contact names in an accounts table to match the currently assigned
   salesmen:
   -->
   更新 accounts 表中的联系人姓名以匹配当前被分配的销售员：
<programlisting>
UPDATE accounts SET (contact_first_name, contact_last_name) =
    (SELECT first_name, last_name FROM salesmen
     WHERE salesmen.id = accounts.sales_id);
</programlisting>
   <!-- 
   A similar result could be accomplished with a join:
   -->
   可以用连接完成类似的结果：
<programlisting>
UPDATE accounts SET contact_first_name = first_name,
                    contact_last_name = last_name
  FROM salesmen WHERE salesmen.id = accounts.sales_id;
</programlisting>
   <!-- 
   However, the second query may give unexpected results
   if <structname>salesmen</>.<structfield>id</> is not a unique key, whereas
   the first query is guaranteed to raise an error if there are multiple
   <structfield>id</> matches.  Also, if there is no match for a particular
   <structname>accounts</>.<structfield>sales_id</> entry, the first query
   will set the corresponding name fields to NULL, whereas the second query
   will not update that row at all.
   -->
   不过，如果<structname>salesmen</>.<structfield>id</>不是一个唯一键，
   第二个查询可能会给出令人意外的结果，然而如果有多个<structfield>id</>匹配，
   第一个查询保证会发生错误。还有，如果对于一个特定的<structname>accounts</>.<structfield>sales_id</>
   项没有匹配，第一个查询将把相应的姓名域设置为 NULL，
   而第二个查询根本不会更新该行。

  </para>

  <para>
   <!-- 
   Update statistics in a summary table to match the current data:
   -->
   更新一个统计表中的统计数据以匹配当前数据：
<programlisting>
UPDATE summary s SET (sum_x, sum_y, avg_x, avg_y) =
    (SELECT sum(x), sum(y), avg(x), avg(y) FROM data d
     WHERE d.group_id = s.group_id);
</programlisting>
  </para>

  <para>
   尝试插入一个新库存项及其库存量。如果该项已经存在，则转而更新
   已有项的库存量。要这样做并且不让整个事务失败，可以使用保存点：
<programlisting>
BEGIN;
-- 其他操作
SAVEPOINT sp1;
INSERT INTO wines VALUES('Chateau Lafite 2003', '24');
-- 假定上述语句由于未被唯一键失败，
-- 那么现在我们发出这些命令：
ROLLBACK TO sp1;
UPDATE wines SET stock = stock + 24 WHERE winename = 'Chateau Lafite 2003';
-- 继续其他操作，并且最终
COMMIT;
</programlisting>
  </para>

  <para>
   更改表<structname>films</structname>中由游标<literal>c_films</>
   定位的行的<structfield>kind</>列：
<programlisting>
UPDATE films SET kind = 'Dramatic' WHERE CURRENT OF c_films;
</programlisting></para>
 </refsect1>

 <refsect1>
  <title>兼容性</title>

  <para>
   这个命令符合<acronym>SQL</acronym>标准，不过
   <literal>FROM</literal>和<literal>RETURNING</>子句是
   <productname>PostgreSQL</productname>扩展，把
   <literal>WITH</>用于<command>UPDATE</>也是扩展。
  </para>

  <para>
   有些其他数据库系统提供了一个<literal>FROM</>选项，在其中在其中目标表
   可以在<literal>FROM</>中被再次列出。但
   <productname>PostgreSQL</productname>不是这样解释
   <literal>FROM</>的。在移植使用这种扩展的应用时要小心。
  </para>
  
  <!-- 
  <para>
   According to the standard, the source value for a parenthesized sub-list of
   column names can be any row-valued expression yielding the correct number
   of columns.  <productname>PostgreSQL</productname> only allows the source
   value to be a parenthesized list of expressions (a row constructor) or a
   sub-<literal>SELECT</>.  An individual column's updated value can be
   specified as <literal>DEFAULT</> in the row-constructor case, but not
   inside a sub-<literal>SELECT</>.
  </para>
  -->
  <para>
   根据标准，一个列名的圆括号子列表的来源值可以是任意得到正确列数的行值表达式。
   <productname>PostgreSQL</productname>只允许来源值是一个表达式（行构造器）
   的圆括号列表或者一个子-<literal>SELECT</>。
   一个列的被更新值可以在行构造器的情况中被指定为<literal>DEFAULT</>，
   但在子-<literal>SELECT</>的情况中不能这样做。
  </para>
 </refsect1>
</refentry>
