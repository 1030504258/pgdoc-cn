<!--
doc/src/sgml/ref/alter_extension.sgml
PostgreSQL documentation
-->

<refentry id="SQL-ALTEREXTENSION">
 <refmeta>
  <refentrytitle>ALTER EXTENSION</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>ALTER EXTENSION</refname>
  <refpurpose>
   修改扩展定义
  </refpurpose>
 </refnamediv>

 <indexterm zone="sql-alterextension">
  <primary>ALTER EXTENSION</primary>
 </indexterm>

 <refsynopsisdiv>
<synopsis>
ALTER EXTENSION <replaceable class="PARAMETER">name</replaceable> UPDATE [ TO <replaceable class="PARAMETER">new_version</replaceable> ]
ALTER EXTENSION <replaceable class="PARAMETER">name</replaceable> SET SCHEMA <replaceable class="PARAMETER">new_schema</replaceable>
ALTER EXTENSION <replaceable class="PARAMETER">name</replaceable> ADD <replaceable class="PARAMETER">member_object</replaceable>
ALTER EXTENSION <replaceable class="PARAMETER">name</replaceable> DROP <replaceable class="PARAMETER">member_object</replaceable>

<phrase>where <replaceable class="PARAMETER">member_object</replaceable> is:</phrase>

  AGGREGATE <replaceable class="PARAMETER">agg_name</replaceable> (<replaceable class="PARAMETER">agg_type</replaceable> [, ...] ) |
  CAST (<replaceable>source_type</replaceable> AS <replaceable>target_type</replaceable>) |
  COLLATION <replaceable class="PARAMETER">object_name</replaceable> |
  CONVERSION <replaceable class="PARAMETER">object_name</replaceable> |
  DOMAIN <replaceable class="PARAMETER">object_name</replaceable> |
  EVENT TRIGGER <replaceable class="PARAMETER">object_name</replaceable> |
  FOREIGN DATA WRAPPER <replaceable class="PARAMETER">object_name</replaceable> |
  FOREIGN TABLE <replaceable class="PARAMETER">object_name</replaceable> |
  FUNCTION <replaceable class="PARAMETER">function_name</replaceable> ( [ [ <replaceable class="parameter">argmode</replaceable> ] [ <replaceable class="parameter">argname</replaceable> ] <replaceable class="parameter">argtype</replaceable> [, ...] ] ) |
  MATERIALIZED VIEW <replaceable class="PARAMETER">object_name</replaceable> |
  OPERATOR <replaceable class="PARAMETER">operator_name</replaceable> (<replaceable class="PARAMETER">left_type</replaceable>, <replaceable class="PARAMETER">right_type</replaceable>) |
  OPERATOR CLASS <replaceable class="PARAMETER">object_name</replaceable> USING <replaceable class="parameter">index_method</replaceable> |
  OPERATOR FAMILY <replaceable class="PARAMETER">object_name</replaceable> USING <replaceable class="parameter">index_method</replaceable> |
  [ PROCEDURAL ] LANGUAGE <replaceable class="PARAMETER">object_name</replaceable> |
  SCHEMA <replaceable class="PARAMETER">object_name</replaceable> |
  SEQUENCE <replaceable class="PARAMETER">object_name</replaceable> |
  SERVER <replaceable class="PARAMETER">object_name</replaceable> |
  TABLE <replaceable class="PARAMETER">object_name</replaceable> |
  TEXT SEARCH CONFIGURATION <replaceable class="PARAMETER">object_name</replaceable> |
  TEXT SEARCH DICTIONARY <replaceable class="PARAMETER">object_name</replaceable> |
  TEXT SEARCH PARSER <replaceable class="PARAMETER">object_name</replaceable> |
  TEXT SEARCH TEMPLATE <replaceable class="PARAMETER">object_name</replaceable> |
  TYPE <replaceable class="PARAMETER">object_name</replaceable> |
  VIEW <replaceable class="PARAMETER">object_name</replaceable>
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>描述</title>

  <para>
   <command>ALTER EXTENSION</command> 修改一个已安装的扩展的定义. 这里有几种方式:

   <variablelist>
   <varlistentry>
    <term><literal>UPDATE</literal></term>
    <listitem>
     <para>
      这种方式更新这个扩展到一个新的版本. 这个扩展必须满足一个适用的更新脚本(或者一系列脚本)
      这样就能修改当前安装版本到一个要求的版本.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>SET SCHEMA</literal></term>
    <listitem>
     <para>
      这种方式移动扩展对象到另一个模式. 这个扩展必须<firstterm>relocatable</>才能使命令成功.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>ADD <replaceable class="PARAMETER">member_object</replaceable></literal></term>
    <listitem>
     <para>
      这种方式添加一个已存在对象到扩展. 这主要在扩展更新脚本上有用. 
     这个对象接着会被视为扩展的成员; 显而易见,该对象只能通过取消扩展来取消 .
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>DROP <replaceable class="PARAMETER">member_object</replaceable></literal></term>
    <listitem>
     <para>
      这个方式从扩展上移除一个成员对象. 主要在扩展更新脚本上有用 .这个对象没有被取消, 只是从扩展里分开了.
     </para>
    </listitem>
   </varlistentry>
   </variablelist>
   参考<xref linkend="extend-extensions"> 来获取更多有关这些操作的信息.
  </para>

  <para>
       你必须拥有扩展来使用 <command>ALTER EXTENSION</command>.
   这个 <literal>ADD</>/<literal>DROP</> 方式要求 
  添加/删除对象的所有权.
  </para>
 </refsect1>

 <refsect1>
  <title>参数</title>

  <para>
   <variablelist>
    <varlistentry>
     <term><replaceable class="PARAMETER">name</replaceable></term>
     <listitem>
      <para>
       已安装扩展的名称.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable class="PARAMETER">new_version</replaceable></term>
     <listitem>
      <para>
       希望的扩展新版本.  这个能被标识符和字面字符重写.如果不是指定的,
       <command>ALTER EXTENSION UPDATE</> 尝试去更新到不管是什么在扩展的控制文件中显示的默认版本.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable class="PARAMETER">new_schema</replaceable></term>
     <listitem>
      <para>
        给扩展的新模式.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable class="parameter">object_name</replaceable></term>
     <term><replaceable class="parameter">agg_name</replaceable></term>
     <term><replaceable class="parameter">function_name</replaceable></term>
     <term><replaceable class="parameter">operator_name</replaceable></term>
     <listitem>
      <para>
        从扩展里被被添加或移除的对象的名称.表, 聚集 , 域, 外链表,函数,操作符,
       操作符类, 操作符族,序列, 文本搜索对象,类型, 和能被模式合格的视图的名称.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable class="parameter">agg_type</replaceable></term>
     <listitem>
      <para>
        在聚集函数操作上的一个输入数据类型.
        去引用一个零参数聚集函数,写 <literal>*</>
       代替这些输入数据类型列表.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable>source_type</replaceable></term>
     <listitem>
      <para>       
      强制转换的源数据类型的名称.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable>target_type</replaceable></term>
     <listitem>
      <para>
      强制转换的目标数据类型的名称.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable class="parameter">argmode</replaceable></term>

     <listitem>
      <para>
        这个函数参数的模型: <literal>IN</>, <literal>OUT</>,
       <literal>INOUT</>, 或者 <literal>VARIADIC</>.
       如果省略的话, 默认的是 <literal>IN</>.
       注意 <command>ALTER EXTENSION</command> 不关心<literal>OUT</>参数 , 因为确认函数的一致性只需要输入参数.因此列出 <literal>IN</>, <literal>INOUT</>, 和 <literal>VARIADIC</> 参数就足够了.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable class="parameter">argname</replaceable></term>

     <listitem>
      <para>
        函数参数的名称.
       注意<command>ALTER EXTENSION</command>不关心参数名称, 因为确认函数的一致性只需要参数数据类型.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable class="parameter">argtype</replaceable></term>

     <listitem>
      <para>
       函数参数的数据类型(可以有模式修饰), 如果任何.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable class="parameter">left_type</replaceable></term>
     <term><replaceable class="parameter">right_type</replaceable></term>
     <listitem>
      <para>
        操作符的参数的数据类型(可以有模式修饰). 为前缀或后缀运算符的丢失参数写<literal>NONE</> .
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>PROCEDURAL</literal></term>

     <listitem>
      <para>
       这是一个干扰词.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1>
  <title>示例</title>

  <para>
   更新 <literal>hstore</literal> 扩展到版本 2.0:
<programlisting>
ALTER EXTENSION hstore UPDATE TO '2.0';
</programlisting>
  </para>

  <para>
   更新 <literal>hstore</literal>扩展的模式为<literal>utils</literal>:
<programlisting>
ALTER EXTENSION hstore SET SCHEMA utils;
</programlisting>
  </para>

  <para>
   添加一个已存在的函数给 <literal>hstore</literal> 扩展:
<programlisting>
ALTER EXTENSION hstore ADD FUNCTION populate_record(anyelement, hstore);
</programlisting></para>
 </refsect1>

 <refsect1>
  <title>兼容性</title>

  <para>
   <command>ALTER EXTENSION</command> 是一个 <productname>PostgreSQL</>扩展.
  </para>
 </refsect1>

 <refsect1 id="SQL-ALTEREXTENSION-see-also">
  <title>参阅</title>

  <simplelist type="inline">
   <member><xref linkend="sql-createextension"></member>
   <member><xref linkend="sql-dropextension"></member>
  </simplelist>
 </refsect1>
</refentry>