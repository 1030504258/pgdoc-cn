<!-- doc/src/sgml/ref/set_transaction.sgml -->
<refentry id="SQL-SET-TRANSACTION">
 <refmeta>
  <refentrytitle>SET TRANSACTION</refentrytitle>
  <manvolnum>7</manvolnum>
  <!--
<refmiscinfo>SQL - Language Statements</refmiscinfo>
-->
<refmiscinfo>SQL - 语句</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>SET TRANSACTION</refname>
  <!-- 
  <refpurpose>set the characteristics of the current transaction</refpurpose> 
  -->
  <refpurpose>设置当前事务的特性</refpurpose>
 </refnamediv>

 <indexterm zone="sql-set-transaction">
  <primary>SET TRANSACTION</primary>
 </indexterm>

 <indexterm>
  <!-- 
  <primary>transaction isolation level</primary>
  <secondary>setting</secondary> 
  -->
  <primary>事务隔离级别</primary>
  <secondary>设置</secondary>
 </indexterm>

 <indexterm>
  <!-- 
  <primary>read-only transaction</primary>
  <secondary>setting</secondary> 
  -->
  <primary>只读事务</primary>
  <secondary>设置</secondary>
 </indexterm>

 <indexterm>
  <!-- 
  <primary>deferrable transaction</primary>
  <secondary>setting</secondary> 
  -->
  <primary>可推迟的事务</primary>
  <secondary>设置</secondary>
 </indexterm>

 <refsynopsisdiv>
<synopsis>
SET TRANSACTION <replaceable class="parameter">transaction_mode</replaceable> [, ...]
SET TRANSACTION SNAPSHOT <replaceable class="parameter">snapshot_id</replaceable>
SET SESSION CHARACTERISTICS AS TRANSACTION <replaceable class="parameter">transaction_mode</replaceable> [, ...]

<!--
 <phrase>where <replaceable class="parameter">transaction_mode</replaceable> is one of:</phrase>
 -->
 <phrase>这里的 <replaceable class="parameter">transaction_mode</replaceable>是下列之一:</phrase>

    ISOLATION LEVEL { SERIALIZABLE | REPEATABLE READ | READ COMMITTED | READ UNCOMMITTED }
    READ WRITE | READ ONLY
    [ NOT ] DEFERRABLE
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <!--
<title>Description</title>
-->
<title>描述</title>

  <!--
<para>
   The <command>SET TRANSACTION</command> command sets the
   characteristics of the current transaction. It has no effect on any
   subsequent transactions.  <command>SET SESSION
   CHARACTERISTICS</command> sets the default transaction
   characteristics for subsequent transactions of a session.  These
   defaults can be overridden by <command>SET TRANSACTION</command>
   for an individual transaction.
  </para>
-->
<para>
<command>SET TRANSACTION</command>命令为当前事务设置特性。它对后面的事务没有影响。
<command>SET SESSION CHARACTERISTICS</command>为一个会话中随后的每个事务设置缺省的事务特性。
在单独的事务中，可以用<command>SET TRANSACTION</command>覆盖这些默认事务特性。
</para>

  <!--
<para>
   The available transaction characteristics are the transaction
   isolation level, the transaction access mode (read/write or
   read-only), and the deferrable mode.
   In addition, a snapshot can be selected, though only for the current
   transaction, not as a session default.
  </para>
-->
<para>
可用的事务特性是事务隔离级别、事务访问模式(读/写或者只读)和可推迟的模式。
另外，可以选择一个快照，只为当前事务而不是作为会话缺省。
</para>

  
<para>
<!-- 
   The isolation level of a transaction determines what data the
   transaction can see when other transactions are running concurrently:
-->
事务的隔离级别决定一个事务在有其它事务并发运行时它能够看到什么数据
   <variablelist>
    <varlistentry>
     <term><literal>READ COMMITTED</literal></term>
     <listitem>
<!--
      <para>
       A statement can only see rows committed before it began. This
       is the default.
      </para>
-->
<para>
一条语句只能看到在它开始之前的数据。这是缺省。
</para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>REPEATABLE READ</literal></term>
     <listitem>
      <!--
<para>
       All statements of the current transaction can only see rows committed
       before the first query or data-modification statement was executed in
       this transaction.
      </para>
-->
<para>
当前事务中的所有语句只能看到在这次事务第一条查询或者修改数据的语句执行之前已经提交的数据。
</para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>SERIALIZABLE</literal></term>
     <listitem>
      <!--
<para>
       All statements of the current transaction can only see rows committed
       before the first query or data-modification statement was executed in
       this transaction.  If a pattern of reads and writes among concurrent
       serializable transactions would create a situation which could not
       have occurred for any serial (one-at-a-time) execution of those
       transactions, one of them will be rolled back with a
       <literal>serialization_failure</literal> error.
      </para>
-->
<para>
当前事务中的所有语句只能看到在这次事务第一条查询或者修改数据的语句执行之前已经提交的数据。
如果当前并发的可串行化事务的读或写模式中任意一个事务（一次一个）执行创建不可能发生的情况，
那么其中的一个事务将会带有<literal>serialization_failure</literal>错误退出。
</para>
     </listitem>
    </varlistentry>
   </variablelist>

<!-- 
   The SQL standard defines one additional level, <literal>READ
   UNCOMMITTED</literal>.
   In <productname>PostgreSQL</productname> <literal>READ
   UNCOMMITTED</literal> is treated as <literal>READ COMMITTED</literal>.
-->
SQL 标准还定义了另外一个级别，<literal>READ UNCOMMITTED</literal>。
在<productname>PostgreSQL</productname>里<literal>READ UNCOMMITTED</literal>
被当作<literal>READ COMMITTED</literal>。
  </para>

  <!--
<para>
   The transaction isolation level cannot be changed after the first query or
   data-modification statement (<command>SELECT</command>,
   <command>INSERT</command>, <command>DELETE</command>,
   <command>UPDATE</command>, <command>FETCH</command>, or
   <command>COPY</command>) of a transaction has been executed.  See
   <xref linkend="mvcc"> for more information about transaction
   isolation and concurrency control.
  </para>
-->
<para>
事务隔离级别在事务中第一个查询或数据修改语句(<command>SELECT</command>,
   <command>INSERT</command>, <command>DELETE</command>,
   <command>UPDATE</command>, <command>FETCH</command>, 或
   <command>COPY</command>)执行之后就不能再次设置。
参阅<xref linkend="mvcc"> 获取有关事务隔离级别和并发性控制的更多信息。
</para>

  <!--
<para>
   The transaction access mode determines whether the transaction is
   read/write or read-only.  Read/write is the default.  When a
   transaction is read-only, the following SQL commands are
   disallowed: <literal>INSERT</literal>, <literal>UPDATE</literal>,
   <literal>DELETE</literal>, and <literal>COPY FROM</literal> if the
   table they would write to is not a temporary table; all
   <literal>CREATE</literal>, <literal>ALTER</literal>, and
   <literal>DROP</literal> commands; <literal>COMMENT</literal>,
   <literal>GRANT</literal>, <literal>REVOKE</literal>,
   <literal>TRUNCATE</literal>; and <literal>EXPLAIN ANALYZE</literal>
   and <literal>EXECUTE</literal> if the command they would execute is
   among those listed.  This is a high-level notion of read-only that
   does not prevent all writes to disk.
  </para>
-->
<para>
事务访问模式决定事务是读/写还是只读。读/写是缺省。如果一个事务是只读，
而且写入的表不是临时表，那么下面的 SQL 命令是不允许的：<literal>INSERT</literal>,
 <literal>UPDATE</literal>, <literal>DELETE</literal>,  <literal>COPY FROM</literal>；
而所有的<literal>CREATE</literal>, <literal>ALTER</literal>, 
   <literal>DROP</literal> ; <literal>COMMENT</literal>,
   <literal>GRANT</literal>, <literal>REVOKE</literal>,
   <literal>TRUNCATE</literal>;  <literal>EXPLAIN ANALYZE</literal>,
   <literal>EXECUTE</literal>都不允许。这是一个高层次的只读概念，
   它并不阻止所有对磁盘的写入。
</para>

  <!--
<para>
   The <literal>DEFERRABLE</literal> transaction property has no effect
   unless the transaction is also <literal>SERIALIZABLE</literal> and
   <literal>READ ONLY</literal>.  When all three of these properties are
   selected for a
   transaction, the transaction may block when first acquiring its snapshot,
   after which it is able to run without the normal overhead of a
   <literal>SERIALIZABLE</literal> transaction and without any risk of
   contributing to or being canceled by a serialization failure.  This mode
   is well suited for long-running reports or backups.
  </para>
-->
<para>
<literal>DEFERRABLE</literal>事务属性没什么影响，除非事务也是<literal>SERIALIZABLE</literal>
和<literal>READ ONLY</literal>。当为一个事务选择所有这三个属性时，
事务可能会在第一次请求它的快照时堵塞，之后运行时可以不需要正常的<literal>SERIALIZABLE</literal>
事务的开销并且不会有任何导致序列化失败或被取消的风险。
这个模式很适合于长时间运行的报告或备份。
</para>

  <!--
<para>
   The <literal>SET TRANSACTION SNAPSHOT</literal> command allows a new
   transaction to run with the same <firstterm>snapshot</> as an existing
   transaction.  The pre-existing transaction must have exported its snapshot
   with the <literal>pg_export_snapshot</literal> function (see <xref
   linkend="functions-snapshot-synchronization">).  That function returns a
   snapshot identifier, which must be given to <literal>SET TRANSACTION
   SNAPSHOT</literal> to specify which snapshot is to be imported.  The
   identifier must be written as a string literal in this command, for example
   <literal>'000003A1-1'</>.
   <literal>SET TRANSACTION SNAPSHOT</literal> can only be executed at the
   start of a transaction, before the first query or
   data-modification statement (<command>SELECT</command>,
   <command>INSERT</command>, <command>DELETE</command>,
   <command>UPDATE</command>, <command>FETCH</command>, or
   <command>COPY</command>) of the transaction.  Furthermore, the transaction
   must already be set to <literal>SERIALIZABLE</literal> or
   <literal>REPEATABLE READ</literal> isolation level (otherwise, the snapshot
   would be discarded immediately, since <literal>READ COMMITTED</> mode takes
   a new snapshot for each command).  If the importing transaction uses
   <literal>SERIALIZABLE</literal> isolation level, then the transaction that
   exported the snapshot must also use that isolation level.  Also, a
   non-read-only serializable transaction cannot import a snapshot from a
   read-only transaction.
  </para>
-->
<para>
<literal>SET TRANSACTION SNAPSHOT</literal>命令允许一个新的事务运行的<firstterm>快照</>
与一个现存事务的相同。该已有的事务必须已经用<literal>pg_export_snapshot</literal>函数
（参阅<xref linkend="functions-snapshot-synchronization">）输出了它的快照。
这个函数返回一个快照标识符，这个标识符必须给<literal>SET TRANSACTION SNAPSHOT</literal>
以指出要输出哪个快照。该标识符在这个命令中必须写作字符串，例如<literal>'000003A1-1'</>。
<literal>SET TRANSACTION SNAPSHOT</literal>只能在该事务第一次查询或数据修改语句执行之前设置，
(<command>SELECT</command>, <command>INSERT</command>, 
<command>DELETE</command>, <command>UPDATE</command>, <command>FETCH</command>, 
<command>COPY</command>)。另外，事务必须已经设置为<literal>SERIALIZABLE</literal>
或<literal>REPEATABLE READ</literal>隔离级别（否则，快照会被立即丢弃，因为
<literal>READ COMMITTED</>模式为每个命令接受一个新的快照）。如果导入事务使用
<literal>SERIALIZABLE</literal>隔离级别，那么输出快照的事务必须也使用该隔离级别。
还有，非只读的序列化事务不能从一个只读的事务中导入一个快照。
</para>

 </refsect1>

 <refsect1>
  <!--
<title>Notes</title>
-->
<title>注意</title>

  <!--
<para>
   If <command>SET TRANSACTION</command> is executed without a prior
   <command>START TRANSACTION</command> or  <command>BEGIN</command>,
   it will appear to have no effect, since the transaction will immediately
   end.
  </para>
-->
<para>
如果执行<command>SET TRANSACTION</command>之前没有执行<command>START TRANSACTION</command>
或<command>BEGIN</command>，那么它会显得没有效果一样，因为事务将立即结束。
</para>

  <!--
<para>
   It is possible to dispense with <command>SET TRANSACTION</command>
   by instead specifying the desired <replaceable
   class="parameter">transaction_modes</replaceable> in
   <command>BEGIN</command> or <command>START TRANSACTION</command>.
   But that option is not available for <command>SET TRANSACTION
   SNAPSHOT</command>.
  </para>
-->
<para>
可以用在<command>BEGIN</command>或<command>START TRANSACTION</command>
里面声明所需要的<replaceable class="parameter">transaction_modes</replaceable>
的方法来避免使用<command>SET TRANSACTION</command>。但是这个选项不适用于
<command>SET TRANSACTION SNAPSHOT</command>。
</para>

  <!--
<para>
   The session default transaction modes can also be set by setting the
   configuration parameters <xref linkend="guc-default-transaction-isolation">,
   <xref linkend="guc-default-transaction-read-only">, and
   <xref linkend="guc-default-transaction-deferrable">.
   (In fact <command>SET SESSION CHARACTERISTICS</command> is just a
   verbose equivalent for setting these variables with <command>SET</>.)
   This means the defaults can be set in the configuration file, via
   <command>ALTER DATABASE</>, etc.  Consult <xref linkend="runtime-config">
   for more information.
  </para>
-->
<para>
会话的缺省事务模式也可以通过设置配置参数
<xref linkend="guc-default-transaction-isolation">,
<xref linkend="guc-default-transaction-read-only">, 和
<xref linkend="guc-default-transaction-deferrable">的方法来设置。
(实际上<command>SET SESSION CHARACTERISTICS</command>只是一个用<command>SET</>
来设置这些参数的另一种等效的方法)。这就意味着缺省值可以通过<command>ALTER DATABASE</>
或在配置文件里等方法设置。参考<xref linkend="runtime-config">获取更多信息。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>Examples</title>
-->
<title>例子</title>

<para>
<!-- 
   To begin a new transaction with the same snapshot as an already
   existing transaction, first export the snapshot from the existing
   transaction. That will return the snapshot identifier, for example:
-->
开启一个与已经存在的事务具有相同快照的新事务，首先从现存事务中输出快照。
这将返回快照的标识符，例如：
<programlisting>
BEGIN TRANSACTION ISOLATION LEVEL REPEATABLE READ;
SELECT pg_export_snapshot();
 pg_export_snapshot
--------------------
 000003A1-1
(1 row)
</programlisting>

<!-- 
   Then give the snapshot identifier in a <command>SET TRANSACTION
   SNAPSHOT</command> command at the beginning of the newly opened
   transaction:
-->
然后在新打开的事务的开始的<command>SET TRANSACTION SNAPSHOT</command>命令中给出快照标识符：
<programlisting>
BEGIN TRANSACTION ISOLATION LEVEL REPEATABLE READ;
SET TRANSACTION SNAPSHOT '000003A1-1';
</programlisting>
</para>
 </refsect1>

 <refsect1 id="R1-SQL-SET-TRANSACTION-3">
  <!--
<title>Compatibility</title>
-->
<title>兼容性</title>

  <!--
<para>
   These commands are defined in the <acronym>SQL</acronym> standard,
   except for the <literal>DEFERRABLE</literal> transaction mode
   and the <command>SET TRANSACTION SNAPSHOT</> form, which are
   <productname>PostgreSQL</productname> extensions.
  </para>
-->
<para>
这些命令在<acronym>SQL</acronym>标准中定义了，除了<literal>DEFERRABLE</literal>
事务模式和<command>SET TRANSACTION SNAPSHOT</>格式是<productname>PostgreSQL</productname>
的扩展。
</para>

  <!--
<para>
   <literal>SERIALIZABLE</literal> is the default transaction
   isolation level in the standard.  In
   <productname>PostgreSQL</productname> the default is ordinarily
   <literal>READ COMMITTED</literal>, but you can change it as
   mentioned above.
  </para>
-->
<para>
标准里的缺省事务隔离级别是<literal>SERIALIZABLE</literal>；
但在<productname>PostgreSQL</productname>里，缺省隔离级别是 <literal>READ COMMITTED</literal>，
但是你可以用上面描述的方法修改它。
</para>

  <!--
<para>
   In the SQL standard, there is one other transaction characteristic
   that can be set with these commands: the size of the diagnostics
   area.  This concept is specific to embedded SQL, and therefore is
   not implemented in the <productname>PostgreSQL</productname> server.
  </para>
-->
<para>
在 SQL 标准里还有另外一种事务特性可以用这些命令设置：诊断范围的大小。
这个概念只用于嵌入式 SQL ，因此没有在<productname>PostgreSQL</productname>服务器里实现。
</para>

  <!--
<para>
   The SQL standard requires commas between successive <replaceable
   class="parameter">transaction_modes</replaceable>, but for historical
   reasons <productname>PostgreSQL</productname> allows the commas to be
   omitted.
  </para>
-->
<para>
SQL 标准要求在相连的<replaceable class="parameter">transaction_modes</replaceable>
之间使用逗号，但是因为历史原因，<productname>PostgreSQL</productname>允许省略这个逗号。
</para>
 </refsect1>
</refentry>