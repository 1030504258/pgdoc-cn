<!--
doc/src/sgml/ref/alter_domain.sgml
PostgreSQL documentation
-->

<refentry id="SQL-ALTERDOMAIN">
<refmeta>
<refentrytitle>ALTER DOMAIN</refentrytitle>
<manvolnum>7</manvolnum>
<!--
<refmiscinfo>SQL - Language Statements</refmiscinfo>
-->
<refmiscinfo>SQL - 语句</refmiscinfo>
</refmeta>

<refnamediv>
<refname>ALTER DOMAIN</refname>
<!--
 <refpurpose>
change the definition of a domain
</refpurpose>
-->
<refpurpose>
修改一个域的定义
</refpurpose>
</refnamediv>

<indexterm zone="sql-alterdomain">
<primary>ALTER DOMAIN</primary>
</indexterm>

<refsynopsisdiv>
<synopsis>
ALTER DOMAIN <replaceable class="PARAMETER">name</replaceable>
{ SET DEFAULT <replaceable class="PARAMETER">expression</replaceable> | DROP DEFAULT }
ALTER DOMAIN <replaceable class="PARAMETER">name</replaceable>
{ SET | DROP } NOT NULL
ALTER DOMAIN <replaceable class="PARAMETER">name</replaceable>
ADD <replaceable class="PARAMETER">domain_constraint</replaceable> [ NOT VALID ]
ALTER DOMAIN <replaceable class="PARAMETER">name</replaceable>
DROP CONSTRAINT [ IF EXISTS ] <replaceable class="PARAMETER">constraint_name</replaceable> [ RESTRICT | CASCADE ]
ALTER DOMAIN <replaceable class="PARAMETER">name</replaceable>
RENAME CONSTRAINT <replaceable class="PARAMETER">constraint_name</replaceable> TO <replaceable class="PARAMETER">new_constraint_name</replaceable>
ALTER DOMAIN <replaceable class="PARAMETER">name</replaceable>
VALIDATE CONSTRAINT <replaceable class="PARAMETER">constraint_name</replaceable>
ALTER DOMAIN <replaceable class="PARAMETER">name</replaceable>
OWNER TO <replaceable class="PARAMETER">new_owner</replaceable>
ALTER DOMAIN <replaceable class="PARAMETER">name</replaceable>
RENAME TO <replaceable class="PARAMETER">new_name</replaceable>
ALTER DOMAIN <replaceable class="PARAMETER">name</replaceable>
SET SCHEMA <replaceable class="PARAMETER">new_schema</replaceable>
</synopsis>
</refsynopsisdiv>

<refsect1>
<!--
<title>Description</title>
-->
<title>描述</title>

<!--
 <para>
<command>ALTER DOMAIN</command> changes the definition of an existing domain.
There are several sub-forms:
</para>
-->
<para>
<command>ALTER DOMAIN</command> 修改一个域的定义。它有几种子形式：
</para>

<variablelist>
<varlistentry>
<term>SET/DROP DEFAULT</term>
<listitem>
<!--
 <para>
These forms set or remove the default value for a domain. Note
that defaults only apply to subsequent <command>INSERT</command>
commands; they do not affect rows already in a table using the domain.
</para>
-->
<para>
这些形式设置或者删除一个域的缺省值。请注意缺省值只适用于随后的 <command>INSERT</command> 命令；他们并不影响使用该域已经在表中的行。
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>SET/DROP NOT NULL</term>
<listitem>
<!--
 <para>
These forms change whether a domain is marked to allow NULL
values or to reject NULL values. You can only <literal>SET NOT NULL</>
when the columns using the domain contain no null values.
</para>
-->
<para>
这些形式改变一个域是否标记为允许 NULL 值或者是不允许 NULL 值。 在使用域的字段包含非空的值的时候，你只可以使用 <literal>SET NOT NULL</>。
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>ADD <replaceable class="PARAMETER">domain_constraint</replaceable> [ NOT VALID ]</term>
<listitem>
<!--
 <para>
This form adds a new constraint to a domain using the same syntax as
<xref linkend="SQL-CREATEDOMAIN">.
When a new constraint is added to a domain, all columns using that
domain will be checked against the newly added constraint. These
checks can be suppressed by adding the new constraint using the
<literal>NOT VALID</literal> option; the constraint can later be made
valid using <command>ALTER DOMAIN ... VALIDATE CONSTRAINT</command>.
Newly inserted or updated rows are always checked against all
constraints, even those marked <literal>NOT VALID</literal>.
<literal>NOT VALID</> is only accepted for <literal>CHECK</> constraints.
</para>
-->
<para>
这种形式向域中增加一种新的约束，使用的语法和 <xref linkend="SQL-CREATEDOMAIN"> 一样。
当一个新的约束增加至域中时，使用这个域的所有列将会按新增的约束条件进行检查。
这些检查也可以通过使用<literal>NOT VALID</literal>选项来增加新的约束条件进行关闭；
约束也可以以后通过<command>ALTER DOMAIN ... VALIDATE CONSTRAINT</command>语句生效。
新插入或是更新的记录将会按所有约束进行检查，甚至是标记为<literal>NOT VALID</literal>的约束。
<literal>NOT VALID</literal>只是对<literal>CHECK</>约束生效。
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>DROP CONSTRAINT [ IF EXISTS ]</term>
<listitem>
<!--
 <para>
This form drops constraints on a domain.
If <literal>IF EXISTS</literal> is specified and the constraint
does not exist, no error is thrown. In this case a notice is issued instead.
</para>
-->
<para>
这种形式删除一个域上的约束。如果使用了<literal>IF EXISTS</literal> 选项并且约束并不存在时，系统不会抛出错误提示，
这种情况下系统只会发出一个提示信息。
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>RENAME CONSTRAINT</term>
<listitem>
<!--
 <para>
This form changes the name of a constraint on a domain.
</para>
-->
<para>
这种形式更改一个域上的约束名称。
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>VALIDATE CONSTRAINT</term>
<listitem>
<!--
 <para>
This form validates a constraint previously added as
<literal>NOT VALID</>, that is, verify that all data in columns using the
domain satisfy the specified constraint.
</para>
-->
<para>
这种形式将域上以前以<literal>NOT VALID</>选项增加的约束进行生效，这样会对域中所有列的数据按这个指定的约束进行验证。
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>OWNER</term>
<listitem>
<!--
 <para>
This form changes the owner of the domain to the specified user.
</para>
-->
<para>
这种形式将域的所有者改变为一个指定的用户。
</para>
</listitem>
</varlistentry>

<varlistentry>
<term><literal>RENAME</literal></term>
<listitem>
<!--
 <para>
This form changes the name of the domain.
</para>
-->
<para>
这种形式将改变域的名称。
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>SET SCHEMA</term>
<listitem>
<!--
 <para>
This form changes the schema of the domain. Any constraints
associated with the domain are moved into the new schema as well.
</para>
-->
<para>
这种形式将改变域的模式。所有与这个域有关的约束也会移至新的模式。
</para>
</listitem>
</varlistentry>
</variablelist>

<!--
 <para>
You must own the domain to use <command>ALTER DOMAIN</>.
To change the schema of a domain, you must also have
<literal>CREATE</literal> privilege on the new schema.
To alter the owner, you must also be a direct or indirect member of the new
owning role, and that role must have <literal>CREATE</literal> privilege on
the domain's schema. (These restrictions enforce that altering the owner
doesn't do anything you couldn't do by dropping and recreating the domain.
However, a superuser can alter ownership of any domain anyway.)
</para>
-->
<para>
要使用<command>ALTER DOMAIN</>语句，您必须是该域的所有者。
要修改一个域的模式， 您还必须在新模式上拥有<literal>CREATE</literal>权限。
要修改所有者， 您还必须是新的所有角色的直接或间接成员，并且该成员必须在此域的模式上有<literal>CREATE</literal>权限。 
（这些限制强制了修改该所有者不会做任何通过删除和重建域不能做的事情。不过，超级用户可以以任何方式修改任意域的所有关系。）
</para>
</refsect1>

<refsect1>
<!--
<title>Parameters</title>
-->
<title>参数</title>

<para>
<variablelist>
<varlistentry>
<term><replaceable class="PARAMETER">name</replaceable></term>
<listitem>
<!--
 <para>
The name (possibly schema-qualified) of an existing domain to alter.
</para>
-->
<para>
一个要修改的现有域的名字(可以有模式修饰)。
</para>
</listitem>
</varlistentry>

<varlistentry>
<term><replaceable class="PARAMETER">domain_constraint</replaceable></term>
<listitem>
<!--
 <para>
New domain constraint for the domain.
</para>
-->
<para>
域的新域约束。
</para>
</listitem>
</varlistentry>

<varlistentry>
<term><replaceable class="PARAMETER">constraint_name</replaceable></term>
<listitem>
<!--
 <para>
Name of an existing constraint to drop or rename.
</para>
-->
<para>
要删除或是重命名的原有约束名。
</para>
</listitem>
</varlistentry>

<varlistentry>
<term><replaceable class="PARAMETER">NOT VALID</replaceable></term>
<listitem>
<!--
 <para>
Do not verify existing column data for constraint validity.
</para>
-->
<para>
不对已有数据进行约束的有效性验证。
</para>
</listitem>
</varlistentry>


<varlistentry>
<term><literal>CASCADE</literal></term>
<listitem>
<!--
 <para>
Automatically drop objects that depend on the constraint.
</para>
-->
<para>
自动级联删除依赖这个约束的对象。
</para>
</listitem>
</varlistentry>

<varlistentry>
<term><literal>RESTRICT</literal></term>
<listitem>
<!--
 <para>
Refuse to drop the constraint if there are any dependent
objects. This is the default behavior.
</para>
-->
<para>
如果有任何依赖对象，则拒绝删除约束。这是缺省行为。
</para>
</listitem>
</varlistentry>

<varlistentry>
<term><replaceable class="PARAMETER">new_name</replaceable></term>
<listitem>
<!--
 <para>
The new name for the domain.
</para>
-->
<para>
域的新名称。
</para>
</listitem>
</varlistentry>

<varlistentry>
<term><replaceable class="PARAMETER">new_constraint_name</replaceable></term>
<listitem>
<!--
 <para>
The new name for the constraint.
</para>
-->
<para>
约束的新名称。
</para>
</listitem>
</varlistentry>

<varlistentry>
<term><replaceable class="PARAMETER">new_owner</replaceable></term>
<listitem>
<!--
 <para>
The user name of the new owner of the domain.
</para>
-->
<para>
域的新的所有者的用户名。
</para>
</listitem>
</varlistentry>

<varlistentry>
<term><replaceable class="PARAMETER">new_schema</replaceable></term>
<listitem>
<!--
 <para>
The new schema for the domain.
</para>
-->
<para>
域的新的模式名。
</para>
</listitem>
</varlistentry>

</variablelist>
</para>
</refsect1>

<refsect1>
<!--
<title>Notes</title>
-->
<title>注意</title>

<!--
 <para>
Currently, <command>ALTER DOMAIN ADD CONSTRAINT</> and
<command>ALTER DOMAIN SET NOT NULL</> will fail if the named domain or
any derived domain is used within a composite-type column of any
table in the database. They should eventually be improved to be
able to verify the new constraint for such nested columns.
</para>
-->
<para>
目前，如果命名的域或者任何派生的域用于数据库中任何一个表的一个复合列中，
那么 <command>ALTER DOMAIN ADD CONSTRAINT</>和<command>ALTER DOMAIN SET NOT NULL</> 将失败。
最终，他们应该加以改进以达到能够验证这种嵌套列的新约束。 
</para>

</refsect1>

<refsect1>
<!--
<title>Examples</title>
-->
<title>例子</title>

<!--
 <para>
To add a <literal>NOT NULL</literal> constraint to a domain:
<programlisting>
ALTER DOMAIN zipcode SET NOT NULL;
</programlisting>
To remove a <literal>NOT NULL</literal> constraint from a domain:
<programlisting>
ALTER DOMAIN zipcode DROP NOT NULL;
</programlisting>
</para>
-->
<para>
给一个域增加一个<literal>NOT NULL</literal> 约束：
<programlisting>
ALTER DOMAIN zipcode SET NOT NULL;
</programlisting>
 从一个域里删除一个<literal>NOT NULL</literal>约束： 
<programlisting>
ALTER DOMAIN zipcode DROP NOT NULL;
</programlisting>
</para>

<!--
 <para>
To add a check constraint to a domain:
<programlisting>
ALTER DOMAIN zipcode ADD CONSTRAINT zipchk CHECK (char_length(VALUE) = 5);
</programlisting>
</para>
-->
<para>
向一个域里增加一个检查约束： 
<programlisting>
ALTER DOMAIN zipcode ADD CONSTRAINT zipchk CHECK (char_length(VALUE) = 5);
</programlisting>
</para>

<!--
 <para>
To remove a check constraint from a domain:
<programlisting>
ALTER DOMAIN zipcode DROP CONSTRAINT zipchk;
</programlisting>
</para>
-->
<para>
从一个域里删除一个检查约束： 
<programlisting>
ALTER DOMAIN zipcode DROP CONSTRAINT zipchk;
</programlisting>
</para>

<!--
 <para>
To rename a check constraint on a domain:
<programlisting>
ALTER DOMAIN zipcode RENAME CONSTRAINT zipchk TO zip_check;
</programlisting>
</para>
-->
<para>
从一个域里的检查约束重命名：
<programlisting>
ALTER DOMAIN zipcode RENAME CONSTRAINT zipchk TO zip_check;
</programlisting>
</para>

<!--
 <para>
To move the domain into a different schema:
<programlisting>
ALTER DOMAIN zipcode SET SCHEMA customers;
</programlisting></para>
-->
<para>
把域移动到另外一个模式：
<programlisting>
ALTER DOMAIN zipcode SET SCHEMA customers;
</programlisting></para>
</refsect1>

<refsect1 id="SQL-ALTERDOMAIN-compatibility">
<!--
<title>Compatibility</title>
-->
<title>兼容性</title>

<!--
 <para>
<command>ALTER DOMAIN</command> conforms to the <acronym>SQL</acronym>
standard, except for the <literal>OWNER</>, <literal>RENAME</literal>, <literal>SET SCHEMA</>, and
<literal>VALIDATE CONSTRAINT</> variants, which are
<productname>PostgreSQL</productname> extensions. The <literal>NOT VALID</>
clause of the <literal>ADD CONSTRAINT</> variant is also a
<productname>PostgreSQL</productname> extension.
</para>
-->
<para>
 除了<literal>OWNER</>、<literal>RENAME</literal>、<literal>SET SCHEMA</>和<literal>VALIDATE CONSTRAINT</>这些选项是<productname>PostgreSQL</productname>扩展外，
<command>ALTER DOMAIN</command>语句基本与<acronym>SQL</acronym>标准兼容。
<literal>ADD CONSTRAINT</>相关的<literal>NOT VALID</>选项也是<productname>PostgreSQL</productname>的扩展。
</para>
</refsect1>

<refsect1 id="SQL-ALTERDOMAIN-see-also">
<!--
<title>See Also</title>
-->
<title>参见</title>

<simplelist type="inline">
<member><xref linkend="sql-createdomain"></member>
<member><xref linkend="sql-dropdomain"></member>
</simplelist>
</refsect1>

</refentry>

