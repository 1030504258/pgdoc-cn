<!--
doc/src/sgml/ref/alter_domain.sgml
PostgreSQL documentation
-->

<refentry id="SQL-ALTERDOMAIN">
 <indexterm zone="sql-alterdomain">
  <primary>ALTER DOMAIN</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>ALTER DOMAIN</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>ALTER DOMAIN</refname>
  <refpurpose>
   更改一个域的定义
  </refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
ALTER DOMAIN <replaceable class="PARAMETER">name</replaceable>
    { SET DEFAULT <replaceable class="PARAMETER">expression</replaceable> | DROP DEFAULT }
ALTER DOMAIN <replaceable class="PARAMETER">name</replaceable>
    { SET | DROP } NOT NULL
ALTER DOMAIN <replaceable class="PARAMETER">name</replaceable>
    ADD <replaceable class="PARAMETER">domain_constraint</replaceable> [ NOT VALID ]
ALTER DOMAIN <replaceable class="PARAMETER">name</replaceable>
    DROP CONSTRAINT [ IF EXISTS ] <replaceable class="PARAMETER">constraint_name</replaceable> [ RESTRICT | CASCADE ]
ALTER DOMAIN <replaceable class="PARAMETER">name</replaceable>
     RENAME CONSTRAINT <replaceable class="PARAMETER">constraint_name</replaceable> TO <replaceable class="PARAMETER">new_constraint_name</replaceable>
ALTER DOMAIN <replaceable class="PARAMETER">name</replaceable>
    VALIDATE CONSTRAINT <replaceable class="PARAMETER">constraint_name</replaceable>
ALTER DOMAIN <replaceable class="PARAMETER">name</replaceable>
    OWNER TO { <replaceable class="PARAMETER">new_owner</replaceable> | CURRENT_USER | SESSION_USER }
ALTER DOMAIN <replaceable class="PARAMETER">name</replaceable>
    RENAME TO <replaceable class="PARAMETER">new_name</replaceable>
ALTER DOMAIN <replaceable class="PARAMETER">name</replaceable>
    SET SCHEMA <replaceable class="PARAMETER">new_schema</replaceable>
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <!-- 
  <title>Description</title>
  -->
  <title>描述</title>

  <!-- 
  <para>
   <command>ALTER DOMAIN</command> changes the definition of an existing domain.
   There are several sub-forms:
  </para>
  -->
  <para>
   <command>ALTER DOMAIN</command>更改一个现有域的定义。有几种形式：
  </para>

  <variablelist>
   <varlistentry>
    <term>SET/DROP DEFAULT</term>
    <listitem>
     <!-- 
     <para>
      These forms set or remove the default value for a domain. Note
      that defaults only apply to subsequent <command>INSERT</command>
      commands; they do not affect rows already in a table using the domain.
     </para>
     -->
     <para>
      这些形式设置或者移除一个域的默认值。注意默认值只会应用到后续的
      <command>INSERT</command>命令，它们不影响使用该域的已经存在于表中的行。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>SET/DROP NOT NULL</term>
    <listitem>
     <!-- 
     <para>
      These forms change whether a domain is marked to allow NULL
      values or to reject NULL values.  You can only <literal>SET NOT NULL</>
      when the columns using the domain contain no null values.
     </para>
     -->
     <para>
      这些形式更改一个域是被标记为允许 NULL 值还是拒绝 NULL 值。
      只有当使用该域的列不包含空值时才能<literal>SET NOT NULL</>。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>ADD <replaceable class="PARAMETER">domain_constraint</replaceable> [ NOT VALID ]</term>
    <listitem>
     <!-- 
     <para>
      This form adds a new constraint to a domain using the same syntax as
      <xref linkend="SQL-CREATEDOMAIN">.
      When a new constraint is added to a domain, all columns using that
      domain will be checked against the newly added constraint.  These
      checks can be suppressed by adding the new constraint using the
      <literal>NOT VALID</literal> option; the constraint can later be made
      valid using <command>ALTER DOMAIN ... VALIDATE CONSTRAINT</command>.
      Newly inserted or updated rows are always checked against all
      constraints, even those marked <literal>NOT VALID</literal>.
      <literal>NOT VALID</> is only accepted for <literal>CHECK</> constraints.
     </para>
     -->
     <para>
      这种形式使用和<xref linkend="SQL-CREATEDOMAIN">
      相同的语法为一个域增加一个新的约束。当一个新的约束增加到一个域时，
      所有使用该域的列都会根据新加的约束进行检查。可以通过增加使用
      <literal>NOT VALID</literal>选项的新约束来抑制这类检查，
      而该约束则可以在以后使用<command>ALTER DOMAIN ... VALIDATE CONSTRAINT</command>
      生效。新插入或更新的行总是会按所有约束进行检查（甚至是标记为
      <literal>NOT VALID</literal>的约束）。只有<literal>CHECK</>
      约束接受<literal>NOT VALID</>。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>DROP CONSTRAINT [ IF EXISTS ]</term>
    <listitem>
     <!-- 
     <para>
      This form drops constraints on a domain.
      If <literal>IF EXISTS</literal> is specified and the constraint
      does not exist, no error is thrown. In this case a notice is issued instead.
     </para>
     -->
     <para>
      这种形式删除一个域上的约束。如果指定了<literal>IF EXISTS</literal>
      并且约束不存在，不会抛出错误。在这种情况下会发出一个提示。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>RENAME CONSTRAINT</term>
    <listitem>
     <!-- 
     <para>
      This form changes the name of a constraint on a domain.
     </para>
     -->
     <para>
      这种形式更改一个域上的一个约束的名称。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>VALIDATE CONSTRAINT</term>
    <listitem>
     <!-- 
     <para>
      This form validates a constraint previously added as
      <literal>NOT VALID</>, that is, verify that all data in columns using the
      domain satisfy the specified constraint.
     </para>
     -->
     <para>
      这种形式验证一个之前作为<literal>NOT VALID</>增加的约束，也就是说，
      验证使用该域的列中所有数据是否满足指定的约束。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>OWNER</term>
    <listitem>
     <!-- 
     <para>
      This form changes the owner of the domain to the specified user.
     </para>
     -->
     <para>
      这种形式更改域的拥有者为指定用户。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>RENAME</literal></term>
    <listitem>
     <!-- 
     <para>
      This form changes the name of the domain.
     </para>
     -->
     <para>
      这种形式更改域的名称。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>SET SCHEMA</term>
    <listitem>
     <!-- 
     <para>
      This form changes the schema of the domain.  Any constraints
      associated with the domain are moved into the new schema as well.
     </para>
     -->
     <para>
      这种形式更改域的模式。任何与该域相关的约束也被会移动到新的模式中。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <!-- 
  <para>
   You must own the domain to use <command>ALTER DOMAIN</>.
   To change the schema of a domain, you must also have
   <literal>CREATE</literal> privilege on the new schema.
   To alter the owner, you must also be a direct or indirect member of the new
   owning role, and that role must have <literal>CREATE</literal> privilege on
   the domain's schema.  (These restrictions enforce that altering the owner
   doesn't do anything you couldn't do by dropping and recreating the domain.
   However, a superuser can alter ownership of any domain anyway.)
  </para>
  -->
  <para>
   要使用<command>ALTER DOMAIN</>，你必须拥有该域。要更改一个域的模式，
   你还必须具有新模式上的<literal>CREATE</literal>权限。要更改拥有者，
   你还必须是新拥有角色的一个直接或者间接成员，并且该角色必须具有该域的模式上的
   <literal>CREATE</literal>特权
   （这些限制强制修改拥有者不能通过删除和重建域做任何你不能做的事情。不过，
   超级用户可以更改任何域的所有权。）。
  </para>
 </refsect1>

 <refsect1>
  <!-- 
  <title>Parameters</title>
  -->
  <title>参数</title>

   <para>
    <variablelist>
     <varlistentry>
      <term><replaceable class="PARAMETER">name</replaceable></term>
      <listitem>
       <!-- 
       <para>
        The name (possibly schema-qualified) of an existing domain to
        alter.
       </para>
       -->
       <para>
        要修改的一个现有域的名称（可能是模式限定的）。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="PARAMETER">domain_constraint</replaceable></term>
      <listitem>
       <!--
       <para>
        New domain constraint for the domain.
       </para>
       -->
       <para>
        用于该域的新域约束。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="PARAMETER">constraint_name</replaceable></term>
      <listitem>
       <!-- 
       <para>
        Name of an existing constraint to drop or rename.
       </para>
       -->
       <para>
        要删除或重命名的一个现有约束的名称。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="PARAMETER">NOT VALID</replaceable></term>
      <listitem>
       <!-- 
       <para>
        Do not verify existing column data for constraint validity.
       </para>
       -->
       <para>
        不验证现有列数据的约束有效性。
       </para>
      </listitem>
     </varlistentry>


     <varlistentry>
      <term><literal>CASCADE</literal></term>
      <listitem>
       <!-- 
       <para>
        Automatically drop objects that depend on the constraint.
       </para>
       -->
       <para>
        自动删除依赖于该约束的对象。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>RESTRICT</literal></term>
      <listitem>
       <!-- 
       <para>
        Refuse to drop the constraint if there are any dependent
        objects. This is the default behavior.
       </para>
       -->
       <para>
        如果有任何依赖对象则拒绝删除该约束。这是默认行为。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="PARAMETER">new_name</replaceable></term>
      <listitem>
       <!-- 
       <para>
        The new name for the domain.
       </para>
       -->
       <para>
        域的新名称。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="PARAMETER">new_constraint_name</replaceable></term>
      <listitem>
       <!-- 
       <para>
        The new name for the constraint.
       </para>
       -->
       <para>
        约束的新名称。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="PARAMETER">new_owner</replaceable></term>
      <listitem>
       <!-- 
       <para>
        The user name of the new owner of the domain.
       </para>
       -->
       <para>
        域的新拥有者的用户名。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="PARAMETER">new_schema</replaceable></term>
      <listitem>
       <!-- 
       <para>
        The new schema for the domain.
       </para>
       -->
       <para>
        域的新模式。
       </para>
      </listitem>
     </varlistentry>

    </variablelist>
   </para>
  </refsect1>

 <refsect1>
  <!-- 
  <title>Notes</title>
  -->
  <title>注意</title>

  <!-- 
  <para>
   Currently, <command>ALTER DOMAIN ADD CONSTRAINT</>, <command>ALTER
   DOMAIN VALIDATE CONSTRAINT</>, and <command>ALTER DOMAIN SET NOT NULL</>
   will fail if the validated named domain or
   any derived domain is used within a composite-type column of any
   table in the database.  They should eventually be improved to be
   able to verify the new constraint for such nested columns.
  </para>
  -->
  <para>
   当前，如果已验证的命名域或者任何派生的域用于数据库任意表的一个复合类型列中，
   <command>ALTER DOMAIN ADD CONSTRAINT</>、<command>ALTER
   DOMAIN VALIDATE CONSTRAINT</>和<command>ALTER DOMAIN SET NOT NULL</>将会失败。
   它们最终将会被改进成能够对这类嵌套列进行新约束验证。
  </para>

 </refsect1>

 <refsect1>
  <!-- 
  <title>Examples</title>
  -->
  <title>示例</title>

  <para>
   <!-- 
   To add a <literal>NOT NULL</literal> constraint to a domain:
   -->
   要把一个<literal>NOT NULL</literal>约束加到一个域：
<programlisting>
ALTER DOMAIN zipcode SET NOT NULL;
</programlisting>
   <!-- 
   To remove a <literal>NOT NULL</literal> constraint from a domain:
   -->
   要从一个域中移除一个<literal>NOT NULL</literal>约束：
<programlisting>
ALTER DOMAIN zipcode DROP NOT NULL;
</programlisting>
  </para>

  <para>
   <!-- 
   To add a check constraint to a domain:
   -->
   要把一个检查约束增加到一个域：
<programlisting>
ALTER DOMAIN zipcode ADD CONSTRAINT zipchk CHECK (char_length(VALUE) = 5);
</programlisting>
  </para>

  <para>
   <!-- 
   To remove a check constraint from a domain:
   -->
   要从一个域移除一个检查约束：
<programlisting>
ALTER DOMAIN zipcode DROP CONSTRAINT zipchk;
</programlisting>
  </para>

  <para>
   <!-- 
   To rename a check constraint on a domain:
   -->
   要重命名一个域上的一个检查约束：
<programlisting>
ALTER DOMAIN zipcode RENAME CONSTRAINT zipchk TO zip_check;
</programlisting>
  </para>

  <para>
   <!-- 
   To move the domain into a different schema:
   -->
   要把域移动到一个不同的模式：
<programlisting>
ALTER DOMAIN zipcode SET SCHEMA customers;
</programlisting></para>
 </refsect1>

 <refsect1 id="SQL-ALTERDOMAIN-compatibility">
  <!-- 
  <title>Compatibility</title>
  -->
  <title>兼容性</title>

  <!-- 
  <para>
   <command>ALTER DOMAIN</command> conforms to the <acronym>SQL</acronym>
   standard, except for the <literal>OWNER</>, <literal>RENAME</literal>, <literal>SET SCHEMA</>, and
   <literal>VALIDATE CONSTRAINT</> variants, which are
   <productname>PostgreSQL</productname> extensions.  The <literal>NOT VALID</>
   clause of the <literal>ADD CONSTRAINT</> variant is also a
   <productname>PostgreSQL</productname> extension.
  </para>
  -->
  <para>
   除<literal>OWNER</>、<literal>RENAME</literal>、<literal>SET SCHEMA</>
   以及<literal>VALIDATE CONSTRAINT</>变体之外（它们是
   <productname>PostgreSQL</productname>的扩展），
   <command>ALTER DOMAIN</command>符合<acronym>SQL</acronym>标准。
   <literal>ADD CONSTRAINT</>变体的<literal>NOT VALID</>子句也是一个
   <productname>PostgreSQL</productname>扩展。
  </para>
 </refsect1>

 <refsect1 id="SQL-ALTERDOMAIN-see-also">
  <!-- 
  <title>See Also</title>
  -->
  <title>另见</title>

  <simplelist type="inline">
   <member><xref linkend="sql-createdomain"></member>
   <member><xref linkend="sql-dropdomain"></member>
  </simplelist>
 </refsect1>

</refentry>
