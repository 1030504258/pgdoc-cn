<!-- doc/src/sgml/amcheck.sgml -->

<sect1 id="amcheck" xreflabel="amcheck">
<!--==========================orignal english content==========================
 <title>amcheck</title>
____________________________________________________________________________-->
 <title>amcheck</title>

<!--==========================orignal english content==========================
 <indexterm zone="amcheck">
  <primary>amcheck</primary>
 </indexterm>
____________________________________________________________________________-->
 <indexterm zone="amcheck">
  <primary>amcheck</primary>
 </indexterm>

<!--==========================orignal english content==========================
 <para>
  The <filename>amcheck</> module provides functions that allow you to
  verify the logical consistency of the structure of indexes.  If the
  structure appears to be valid, no error is raised.
 </para>
____________________________________________________________________________-->
 <para>
  <filename>amcheck</>模块允许你验证索引结构的逻辑一致性。
  如果结构有效，就不会报错。
 </para>

<!--==========================orignal english content==========================
 <para>
  The functions verify various <emphasis>invariants</> in the
  structure of the representation of particular indexes.  The
  correctness of the access method functions behind index scans and
  other important operations relies on these invariants always
  holding.  For example, certain functions verify, among other things,
  that all B-Tree pages have items in <quote>logical</> order (e.g.,
  for B-Tree indexes on <type>text</>, index tuples should be in
  collated lexical order).  If that particular invariant somehow fails
  to hold, we can expect binary searches on the affected page to
  incorrectly guide index scans, resulting in wrong answers to SQL
  queries.
 </para>
____________________________________________________________________________-->
 <para>
  该功能验证特定索引表现结构中的各种<emphasis>不变量</>。
  索引扫描和其他重要操作后的访问方法函数的正确性依赖于这些不变量总是保持不变。
  例如，某些函数验证是否所有B-Tree页的项都是<quote>逻辑</>顺序的
  （例如<type>text</>类型上的B-Tree索引，索引元组应该是按单词排序的）。
  如果这个特定的不变量因为某种原因发生变化，
  我们可以预想到受影响页面上的二进制搜索会错误地指导索引扫描，
  导致SQL查询的答案错误。
 </para>
<!--==========================orignal english content==========================
 <para>
  Verification is performed using the same procedures as those used by
  index scans themselves, which may be user-defined operator class
  code.  For example, B-Tree index verification relies on comparisons
  made with one or more B-Tree support function 1 routines.  See <xref
  linkend="xindex-support"> for details of operator class support
  functions.
 </para>
____________________________________________________________________________-->
 <para>
  使用与索引扫描相同的过程执行验证，这些过程可以是用户自定义的操作符类代码。
  例如，B-Tree索引验证依赖于与一个或多个B-Tree支持功能1例程进行的比较。
  有关操作符类支持函数的详细信息，请参见<xref linkend="xindex-support">。
 </para>
<!--==========================orignal english content==========================
 <para>
  <filename>amcheck</> functions may be used only by superusers.
 </para>
____________________________________________________________________________-->
 <para>
  只有超级用户可以使用<filename>amcheck</>函数。
 </para>

 <sect2>
<!--==========================orignal english content==========================
  <title>Functions</title>
____________________________________________________________________________-->
  <title>函数</title>

  <variablelist>
   <varlistentry>
<!--==========================orignal english content==========================
    <term>
     <function>bt_index_check(index regclass) returns void</function>
     <indexterm>
      <primary>bt_index_check</primary>
     </indexterm>
    </term>
____________________________________________________________________________-->
    <term>
     <function>bt_index_check(index regclass) returns void</function>
     <indexterm>
      <primary>bt_index_check</primary>
     </indexterm>
    </term>

    <listitem>
<!--==========================orignal english content==========================
     <para>
      <function>bt_index_check</function> tests that its target, a
      B-Tree index, respects a variety of invariants.  Example usage:
<screen>
test=# SELECT bt_index_check(c.oid), c.relname, c.relpages
FROM pg_index i
JOIN pg_opclass op ON i.indclass[0] = op.oid
JOIN pg_am am ON op.opcmethod = am.oid
JOIN pg_class c ON i.indexrelid = c.oid
JOIN pg_namespace n ON c.relnamespace = n.oid
WHERE am.amname = 'btree' AND n.nspname = 'pg_catalog'
-&minus; Don't check temp tables, which may be from another session:
AND c.relpersistence != 't'
-&minus; Function may throw an error when this is omitted:
AND i.indisready AND i.indisvalid
ORDER BY c.relpages DESC LIMIT 10;
 bt_index_check |             relname             | relpages 
-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;+-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-+-&minus;-&minus;-&minus;-&minus;-&minus;
                | pg_depend_reference_index       |       43
                | pg_depend_depender_index        |       40
                | pg_proc_proname_args_nsp_index  |       31
                | pg_description_o_c_o_index      |       21
                | pg_attribute_relid_attnam_index |       14
                | pg_proc_oid_index               |       10
                | pg_attribute_relid_attnum_index |        9
                | pg_amproc_fam_proc_index        |        5
                | pg_amop_opr_fam_index           |        5
                | pg_amop_fam_strat_index         |        5
(10 rows)
</screen>
      This example shows a session that performs verification of every
      catalog index in the database <quote>test</>.  Details of just
      the 10 largest indexes verified are displayed.  Since no error
      is raised, all indexes tested appear to be logically consistent.
      Naturally, this query could easily be changed to call
      <function>bt_index_check</function> for every index in the
      database where verification is supported.
     </para>
____________________________________________________________________________-->
     <para>
      <function>bt_index_check</function>测试它的目标B-Tree索引遵守各种不变量。
	  用法示例：
<screen>
test=# SELECT bt_index_check(c.oid), c.relname, c.relpages
FROM pg_index i
JOIN pg_opclass op ON i.indclass[0] = op.oid
JOIN pg_am am ON op.opcmethod = am.oid
JOIN pg_class c ON i.indexrelid = c.oid
JOIN pg_namespace n ON c.relnamespace = n.oid
WHERE am.amname = 'btree' AND n.nspname = 'pg_catalog'
-- 不要检查可能来自另一个会话的临时表：
AND c.relpersistence != 't'
-- 漏掉下面这句函数会报错：
AND i.indisready AND i.indisvalid
ORDER BY c.relpages DESC LIMIT 10;
 bt_index_check |             relname             | relpages 
----------------+---------------------------------+----------
                | pg_depend_reference_index       |       43
                | pg_depend_depender_index        |       40
                | pg_proc_proname_args_nsp_index  |       31
                | pg_description_o_c_o_index      |       21
                | pg_attribute_relid_attnam_index |       14
                | pg_proc_oid_index               |       10
                | pg_attribute_relid_attnum_index |        9
                | pg_amproc_fam_proc_index        |        5
                | pg_amop_opr_fam_index           |        5
                | pg_amop_fam_strat_index         |        5
(10 rows)
</screen>
      这个例子展示了一个对数据库<quote>test</>中每个目录索引进行验证的会话。
	  只显示了通过验证的最大10条索引。因为没有报错，所以测试的所有索引都是逻辑上一致的。
	  当然，这个查询可以很轻易的修改，
	  为支持验证的数据库中的每个索引调用<function>bt_index_check</function>。
     </para>
<!--==========================orignal english content==========================
     <para>
      <function>bt_index_check</function> acquires an <literal>AccessShareLock</>
      on the target index and the heap relation it belongs to. This lock mode
      is the same lock mode acquired on relations by simple
      <literal>SELECT</> statements.
      <function>bt_index_check</function> does not verify invariants
      that span child/parent relationships, nor does it verify that
      the target index is consistent with its heap relation.  When a
      routine, lightweight test for corruption is required in a live
      production environment, using
      <function>bt_index_check</function> often provides the best
      trade-off between thoroughness of verification and limiting the
      impact on application performance and availability.
     </para>
____________________________________________________________________________-->
     <para>
      <function>bt_index_check</function>在目标索引和它所属的堆关系上请求一个
	  <literal>AccessShareLock</>。这种锁模式和简单<literal>SELECT</>
	  语句在关系上请求的锁模式相同。<function>bt_index_check</function>
      并不验证跨越子/父关系的不变量，也不验证与其堆关系一致的目标索引。
	  当在现场生产环境中需要一个例程进行轻量级的损坏测试时，
	  使用<function>bt_index_check</function>
	  通常在验证的完整性和限制对应用程序性能和可用性的影响之间提供最佳平衡。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term>
     <function>bt_index_parent_check(index regclass) returns void</function>
     <indexterm>
      <primary>bt_index_parent_check</primary>
     </indexterm>
    </term>
____________________________________________________________________________-->
    <term>
     <function>bt_index_parent_check(index regclass) returns void</function>
     <indexterm>
      <primary>bt_index_parent_check</primary>
     </indexterm>
    </term>

    <listitem>
<!--==========================orignal english content==========================
     <para>
      <function>bt_index_parent_check</function> tests that its
      target, a B-Tree index, respects a variety of invariants.  The
      checks performed by <function>bt_index_parent_check</function>
      are a superset of the checks performed by
      <function>bt_index_check</function>.
      <function>bt_index_parent_check</function> can be thought of as
      a more thorough variant of <function>bt_index_check</function>:
      unlike <function>bt_index_check</function>,
      <function>bt_index_parent_check</function> also checks
      invariants that span parent/child relationships.  However, it
      does not verify that the target index is consistent with its
      heap relation.  <function>bt_index_parent_check</function>
      follows the general convention of raising an error if it finds a
      logical inconsistency or other problem.
     </para>
____________________________________________________________________________-->
     <para>
      <function>bt_index_parent_check</function>测试它的目标B-Tree
	  索引遵守各种不变量。由<function>bt_index_parent_check</function>
	  执行的检查是由<function>bt_index_check</function>执行的检查的超集。
	  <function>bt_index_parent_check</function>可以被认为是
	  <function>bt_index_check</function>的一个更全面的变体：
	  与<function>bt_index_check</function>不同，
	  <function>bt_index_parent_check</function>也检查跨父/子关系的不变量。
	  但是，它不验证目标索引是否与其堆关系一致。如果发现逻辑不一致或其他问题，
	  <function>bt_index_parent_check</function>遵循引发错误的一般惯例。
     </para>
<!--==========================orignal english content==========================
     <para>
      A <literal>ShareLock</> is required on the target index by
      <function>bt_index_parent_check</function> (a
      <literal>ShareLock</> is also acquired on the heap relation).
      These locks prevent concurrent data modification from
      <command>INSERT</>, <command>UPDATE</>, and <command>DELETE</>
      commands.  The locks also prevent the underlying relation from
      being concurrently processed by <command>VACUUM</>, as well as
      all other utility commands.  Note that the function holds locks
      only while running, not for the entire transaction.
     </para>
____________________________________________________________________________-->
     <para>
      <function>bt_index_parent_check</function>需要目标索引上的一个
	  <literal>ShareLock</>（也需要堆关系上的一个<literal>ShareLock</>）。
	  这些锁阻止<command>INSERT</>、<command>UPDATE</>和<command>DELETE</>
	  命令对数据进行并发修改。也阻止<command>VACUUM</>和所有其他实用命令并发处理底层关系。
	  请注意，该函数仅在运行时持有锁，并不是整个事务都持有锁。
     </para>
<!--==========================orignal english content==========================
     <para>
      <function>bt_index_parent_check</function>'s additional
      verification is more likely to detect various pathological
      cases.  These cases may involve an incorrectly implemented
      B-Tree operator class used by the index that is checked, or,
      hypothetically, undiscovered bugs in the underlying B-Tree index
      access method code.  Note that
      <function>bt_index_parent_check</function> cannot be used when
      Hot Standby mode is enabled (i.e., on read-only physical
      replicas), unlike <function>bt_index_check</function>.
     </para>
____________________________________________________________________________-->
     <para>
      <function>bt_index_parent_check</function>的附加验证更有可能检测到各种病态情况。
	  这些情况可能包括被检查的索引使用的B-Tree操作符类执行不正确，
	  或者假设在底层B-Tree索引访问方式代码中有未被发现的错误。
	  请注意，与<function>bt_index_check</function>不同，
	  当启用热备份模式时（也就是在只读物理副本上），
	  不能使用<function>bt_index_parent_check</function>。	  
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect2>

 <sect2>
<!--==========================orignal english content==========================
  <title>Using <filename>amcheck</> effectively</title>
____________________________________________________________________________-->
  <title>有效地使用<filename>amcheck</></title>

<!--==========================orignal english content==========================
 <para>
  <filename>amcheck</> can be effective at detecting various types of
  failure modes that <link
  linkend="app-initdb-data-checksums"><application>data page
  checksums</></link> will always fail to catch.  These include:

  <itemizedlist>
   <listitem>
    <para>
     Structural inconsistencies caused by incorrect operator class
     implementations.
    </para>
    <para>
     This includes issues caused by the comparison rules of operating
     system collations changing. Comparisons of datums of a collatable
     type like <type>text</> must be immutable (just as all
     comparisons used for B-Tree index scans must be immutable), which
     implies that operating system collation rules must never change.
     Though rare, updates to operating system collation rules can
     cause these issues. More commonly, an inconsistency in the
     collation order between a master server and a standby server is
     implicated, possibly because the <emphasis>major</> operating
     system version in use is inconsistent.  Such inconsistencies will
     generally only arise on standby servers, and so can generally
     only be detected on standby servers.
    </para>
    <para>
     If a problem like this arises, it may not affect each individual
     index that is ordered using an affected collation, simply because
     <emphasis>indexed</> values might happen to have the same
     absolute ordering regardless of the behavioral inconsistency. See
     <xref linkend="locale"> and <xref linkend="collation"> for
     further details about how <productname>PostgreSQL</> uses
     operating system locales and collations.
    </para>
   </listitem>
   <listitem>
    <para>
     Corruption caused by hypothetical undiscovered bugs in the
     underlying <productname>PostgreSQL</> access method code or sort
     code.
    </para>
    <para>
     Automatic verification of the structural integrity of indexes
     plays a role in the general testing of new or proposed
     <productname>PostgreSQL</> features that could plausibly allow a
     logical inconsistency to be introduced.  One obvious testing
     strategy is to call <filename>amcheck</> functions continuously
     when running the standard regression tests.  See <xref
     linkend="regress-run"> for details on running the tests.
    </para>
   </listitem>
   <listitem>
    <para>
     File system or storage subsystem faults where checksums happen to
     simply not be enabled.
    </para>
    <para>
     Note that <filename>amcheck</> examines a page as represented in some
     shared memory buffer at the time of verification if there is only a
     shared buffer hit when accessing the block. Consequently,
     <filename>amcheck</> does not necessarily examine data read from the
     file system at the time of verification. Note that when checksums are
     enabled, <filename>amcheck</> may raise an error due to a checksum
     failure when a corrupt block is read into a buffer.
    </para>
   </listitem>
   <listitem>
    <para>
     Corruption caused by faulty RAM, and the broader memory subsystem
     and operating system.
    </para>
    <para>
     <productname>PostgreSQL</> does not protect against correctable
     memory errors and it is assumed you will operate using RAM that
     uses industry standard Error Correcting Codes (ECC) or better
     protection.  However, ECC memory is typically only immune to
     single-bit errors, and should not be assumed to provide
     <emphasis>absolute</emphasis> protection against failures that
     result in memory corruption.
    </para>
   </listitem>
  </itemizedlist>
  In general, <filename>amcheck</> can only prove the presence of
  corruption; it cannot prove its absence.
 </para>
____________________________________________________________________________-->
 <para>
  <filename>amcheck</>可以有效的检测<link
  linkend="app-initdb-data-checksums"><application>数据页校验和</></link>
  总是未能捕获的各种类型的失败模式。这些包括：
  <itemizedlist>
   <listitem>
    <para>
     由于不正确的操作符类实现引起的结构不一致。
    </para>
    <para>
     这包括由操作系统排序改变的比较规则引起的问题。
	 像<type>text</>这样的可比较类型的数据的比较必须是不可变的
	 （就像用于B-Tree索引扫描的所有比较必须是不可变的），
	 这意味着操作系统排序规则决不能改变。虽然很少，
	 但操作系统排序规则的更新可能会导致这些问题。更常见的情况是，
	 主服务器和备用服务器之间的排序顺序不一致，
	 这可能是因为正在使用的<emphasis>主要</>操作系统版本不一致。
	 这种不一致通常只会出现在备用服务器上，所以通常只能在备用服务器上检测到。
    </para>
    <para>
     如果出现这样的问题，可能不会影响使用受影响的排序规则排序的单独索引，
	 因为<emphasis>索引的</>值可能正好拥有相同的绝对顺序，无视表现出来的不一致。
	 参阅<xref linkend="locale">和<xref linkend="collation">
	 获取关于<productname>PostgreSQL</>如何使用操作系统本地化和排序的详细信息。
    </para>
   </listitem>
   <listitem>
    <para>
     由底层的<productname>PostgreSQL</>
	 访问方法代码或排序代码中的假设未发现的错误导致的损坏。
    </para>
    <para>
     索引结构完整性的自动验证在对新的或提议的<productname>PostgreSQL</>
	 功能进行的一般测试中发挥作用，这些功能可能会导致引入逻辑不一致性。
	 一个明显的测试策略是在运行标准回归测试时连续调用<filename>amcheck</>函数。
	 有关运行测试的详细信息，请参见<xref linkend="regress-run">。
    </para>
   </listitem>
   <listitem>
    <para>
     未启用校验和时，文件系统或存储子系统故障。
    </para>
    <para>
     请注意，如果在访问块时只有共享缓冲区命中，<filename>amcheck</>
	 会在验证时检查某个共享内存缓冲区中显示的页面。因此，
	 <filename>amcheck</>不一定检查在验证时从文件系统读取的数据。
	 请注意，启用校验和时，当损坏的块读入缓冲区时，<filename>amcheck</>
	 可能会由于校验和失败而引发错误。
    </para>
   </listitem>
   <listitem>
    <para>
     内存故障导致的损坏，以及更广泛的内存子系统和操作系统导致的损坏。
    </para>
    <para>
     <productname>PostgreSQL</>不能防止可纠正的内存错误，
	 并假定您将使用使用行业标准纠错码（ECC）或更好保护的RAM进行操作。
	 然而，ECC内存通常只能抵抗一位错误，
	 不应该被假定为提供<emphasis>绝对</emphasis>保护来防止导致内存损坏的故障。
    </para>
   </listitem>
  </itemizedlist>
  通常，<filename>amcheck</>只能证明损坏的存在; 不能证明不存在损坏。
 </para>

 </sect2>
 <sect2>
<!--==========================orignal english content==========================
  <title>Repairing corruption</title>
____________________________________________________________________________-->
  <title>修复损坏</title>
<!--==========================orignal english content==========================
 <para>
  No error concerning corruption raised by <filename>amcheck</> should
  ever be a false positive.  In practice, <filename>amcheck</> is more
  likely to find software bugs than problems with hardware.
  <filename>amcheck</> raises errors in the event of conditions that,
  by definition, should never happen, and so careful analysis of
  <filename>amcheck</> errors is often required.
 </para>
____________________________________________________________________________-->
 <para>
  有关<filename>amcheck</>提出的损坏错误不应该是一个误报。
  实际上，<filename>amcheck</>更容易发现软件问题，而不是硬件问题。
  在定义的不应该发生情况下，<filename>amcheck</>会引发错误，
  因此通常需要对<filename>amcheck</>错误进行仔细的分析。
 </para>
<!--==========================orignal english content==========================
 <para>
  There is no general method of repairing problems that
  <filename>amcheck</> detects.  An explanation for the root cause of
  an invariant violation should be sought.  <xref
  linkend="pageinspect"> may play a useful role in diagnosing
  corruption that <filename>amcheck</> detects.  A <command>REINDEX</>
  may not be effective in repairing corruption.
 </para>
____________________________________________________________________________-->
 <para>
  没有通用的方法修复<filename>amcheck</>检测到的问题。
  应该寻找引起不变量变化的根本原因。<xref
  linkend="pageinspect">在诊断<filename>amcheck</>检测到的损坏中发挥有用的作用。
  <command>REINDEX</>可能不能有效的修复损坏。
 </para>

 </sect2>

</sect1>
