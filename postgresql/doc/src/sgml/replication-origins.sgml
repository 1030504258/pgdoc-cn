<!-- doc/src/sgml/replication-origins.sgml -->
<chapter id="replication-origins">
 <!--
 <title>Replication Progress Tracking</title>
 -->
 <title>复制进度跟踪</title>

 <indexterm zone="replication-origins">
  <!--
  <primary>Replication Progress Tracking</primary>
  -->
  <primary>复制进度跟踪</primary>
 </indexterm>
 <indexterm zone="replication-origins">
  <!--
  <primary>Replication Origins</primary>
  -->
  <primary>复制起源</primary>
 </indexterm>

 <para>
  <!-- 
  Replication origins are intended to make it easier to implement
  logical replication solutions on top
  of <link linkend="logicaldecoding">logical decoding</link>.
  They provide a solution to two common problems:
  -->
  复制起源意在使在<link linkend="logicaldecoding">逻辑解码</link>
  之上更容易实现逻辑复制解决方案。它们提供了两个常见问题的解决方案：
  <itemizedlist>
   <listitem>
    <!--
    <para>How to safely keep track of replication progress</para>
    -->
    <para>如何安全地跟踪复制进度</para>
   </listitem>
   <listitem>
    <!-- 
    <para>How to change replication behavior based on the
     origin of a row; for example, to prevent loops in bi-directional
     replication setups</para>
     -->
     <para>如何根据行的起源来改变复制行为；例如，防止双向复制设置中的循环</para>
   </listitem>
  </itemizedlist>
 </para>

 <!-- 
 <para>
  Replication origins have just two properties, a name and an OID. The name,
  which is what should be used to refer to the origin across systems, is
  free-form <type>text</type>. It should be used in a way that makes conflicts
  between replication origins created by different replication solutions
  unlikely; e.g. by prefixing the replication solution's name to it.
  The OID is used only to avoid having to store the long version
  in situations where space efficiency is important. It should never be shared
  across systems.
 </para>
 -->
 <para>
  复制起源只有两个属性，一个名称和一个OID。名称，这是应该用来指代跨系统的起源，
  是自由形式的<type>text</type>。
  它应该以使得由不同复制解决方案创建的复制起源之间的冲突不可能的方式使用；
  例如，通过将复制解决方案的名称作为它的前缀。
  OID仅用于避免在空间效率重要的情况下存储长版本。它不应该跨系统共享。
 </para>

 <!-- 
 <para>
  Replication origins can be created using the function
  <link linkend="pg-replication-origin-create"><function>pg_replication_origin_create()</function></link>;
  dropped using
  <link linkend="pg-replication-origin-drop"><function>pg_replication_origin_drop()</function></link>;
  and seen in the
  <link linkend="catalog-pg-replication-origin"><structname>pg_replication_origin</structname></link>
  system catalog.
 </para>
 -->
 <para>
  复制起源可以使用函数
  <link linkend="pg-replication-origin-create"><function>pg_replication_origin_create()</function></link>
  创建；使用
  <link linkend="pg-replication-origin-drop"><function>pg_replication_origin_drop()</function></link>
  删除；在
  <link linkend="catalog-pg-replication-origin"><structname>pg_replication_origin</structname></link>
  系统目录中查看。
 </para>

 <!-- 
 <para>
  One nontrivial part of building a replication solution is to keep track of
  replay progress in a safe manner. When the applying process, or the whole
  cluster, dies, it needs to be possible to find out up to where data has
  successfully been replicated. Naive solutions to this, such as updating a
  row in a table for every replayed transaction, have problems like run-time
  overhead and database bloat.
 </para>
 -->
 <para>
  构建复制解决方案的一个非常重要的部分是以安全的方式跟踪重放进度。
  当应用过程或整个集群死机时，需要找出数据已成功复制的位置。
  天真的解决方案，如更新每个重放事务的表中的行，有运行时开销和数据库膨胀等问题。
 </para>

 <!-- 
 <para>
  Using the replication origin infrastructure a session can be
  marked as replaying from a remote node (using the
  <link linkend="pg-replication-origin-session-setup"><function>pg_replication_origin_session_setup()</function></link>
  function). Additionally the <acronym>LSN</acronym> and commit
  time stamp of every source transaction can be configured on a per
  transaction basis using
  <link linkend="pg-replication-origin-xact-setup"><function>pg_replication_origin_xact_setup()</function></link>.
  If that's done replication progress will persist in a crash safe
  manner. Replay progress for all replication origins can be seen in the
  <link linkend="view-pg-replication-origin-status">
   <structname>pg_replication_origin_status</structname>
  </link> view. An individual origin's progress, e.g. when resuming
  replication, can be acquired using
  <link linkend="pg-replication-origin-progress"><function>pg_replication_origin_progress()</function></link>
  for any origin or
  <link linkend="pg-replication-origin-session-progress"><function>pg_replication_origin_session_progress()</function></link>
  for the origin configured in the current session.
 </para>
 -->
 <para>
  使用复制源基础结构，会话可以被标记为从远程节点重放（使用
  <link linkend="pg-replication-origin-session-setup"><function>pg_replication_origin_session_setup()</function></link>
  函数）。此外，每个源事务的<acronym>LSN</acronym>和提交时间戳可以使用
  <link linkend="pg-replication-origin-xact-setup"><function>pg_replication_origin_xact_setup()</function></link>
  在每个事务基础上进行配置。如果这样做复制进度将以崩溃安全的方式持续。
  可以在<link linkend="view-pg-replication-origin-status">
   <structname>pg_replication_origin_status</structname>
  </link>视图中看到所有复制原点的重放进度。单独起源的进展，例如，
  当恢复复制时，可以使用<link linkend="pg-replication-origin-progress"><function>pg_replication_origin_progress()</function></link>
  获取任何源或<link linkend="pg-replication-origin-session-progress"><function>pg_replication_origin_session_progress()</function></link>
  获取在当前会话中配置的源。
 </para>

 <!-- 
 <para>
  In replication topologies more complex than replication from exactly one
  system to one other system, another problem can be that it is hard to avoid
  replicating replayed rows again. That can lead both to cycles in the
  replication and inefficiencies. Replication origins provide an optional
  mechanism to recognize and prevent that. When configured using the functions
  referenced in the previous paragraph, every change and transaction passed to
  output plugin callbacks (see <xref linkend="logicaldecoding-output-plugin">)
  generated by the session is tagged with the replication origin of the
  generating session.  This allows treating them differently in the output
  plugin, e.g. ignoring all but locally-originating rows.  Additionally
  the <link linkend="logicaldecoding-output-plugin-filter-origin">
  <function>filter_by_origin_cb</function></link> callback can be used
  to filter the logical decoding change stream based on the
  source. While less flexible, filtering via that callback is
  considerably more efficient than doing it in the output plugin.
 </para>
 -->
 <para>
  在复制拓扑比从完全一个系统到另一个系统的复制更复杂，
  另一个问题可能是难以避免再次复制重放的行。这可能导致复制和低效率的循环。
  复制起点提供了一个可选的机制来识别和防止该循环。
  当使用前一段中引用的函数进行配置时，传递给会话生成的输出插件回调
  （参见<xref linkend="logicaldecoding-output-plugin">）
  的每个更改和事务都使用生成会话的复制原点进行标记。
  这允许在输出插件中对它们进行不同的处理。例如，忽略除本地原始行之外的所有行。
  另外，<link linkend="logicaldecoding-output-plugin-filter-origin">
  <function>filter_by_origin_cb</function></link>回调可以用于基于源来过滤逻辑解码改变流。
  虽然不太灵活，通过回调进行过滤比在输出插件中进行的过滤效率高得多。
 </para>
</chapter>
