<!-- doc/src/sgml/custom-scan.sgml -->

<chapter id="custom-scan">
 <title>编写自定义扫描提供程序</title>

 <indexterm zone="custom-scan">
  <primary>自定义扫描提供程序</primary>
  <secondary>处理程序</secondary>
 </indexterm>

 <para>
  <productname>PostgreSQL</>支持一组实验设施，旨在允许扩展模块向系统添加新的扫描类型。
  与<link linkend="fdwhandler">外部数据包装器</>不同，
  外部数据包装器仅负责知道如何扫描其自己的外部表，
  自定义扫描提供程序可以提供扫描系统中的任何关系的替代方法。通常，
  编写自定义扫描提供程序的动机将是允许使用核心系统不支持的某些优化，
  例如缓存或某种形式的硬件加速。本章概述如何编写新的自定义扫描提供程序。
 </para>

 <para>
  实施新类型的自定义扫描是一个三步过程。首先，在规划期间，
  有必要使用所提出的策略来生成表示扫描的访问路径。第二，
  如果计划者选择那些访问路径中的一个作为扫描特定关系的最佳策略，
  则必须将访问路径转换为计划。最后，
  必须能够执行计划并生成针对以同一关系为目标的任何其他访问路径生成的相同结果。
 </para>

 <sect1 id="custom-scan-path">
  <title>创建自定义扫描路径</title>

  <para>
    自定义扫描提供程序通常通过设置以下hook来为基本关系添加路径，
    该hook在核心代码生成了它认为是关系的完整和正确的访问路径集合之后被调用。
<programlisting>
typedef void (*set_rel_pathlist_hook_type) (PlannerInfo *root,
                                            RelOptInfo *rel,
                                            Index rti,
                                            RangeTblEntry *rte);
extern PGDLLIMPORT set_rel_pathlist_hook_type set_rel_pathlist_hook;
</programlisting>
  </para>

  <para>
    虽然这个hook函数可以用于检查，修改或删除由核心系统生成的路径，
    但自定义扫描提供程序通常仅限于生成<structname>CustomPath</>
    对象并使用<function>add_path</>将它们添加到<literal>rel</>。
    自定义扫描提供程序负责初始化<structname>CustomPath</>对象，其声明如下：
<programlisting>
typedef struct CustomPath
{
    Path      path;
    uint32    flags;
    List     *custom_paths;
    List     *custom_private;
    const CustomPathMethods *methods;
} CustomPath;
</programlisting>
  </para>

  <para>
    <structfield>path</>必须按任何其他路径初始化，包括行计数估计，
    开始和总成本以及此路径提供的排序顺序。<structfield>flags</>是一个位掩码，
    如果自定义路径可以支持反向扫描，则应该包含<literal>CUSTOMPATH_SUPPORT_BACKWARD_SCAN</>，
    并且如果它可以支持标记和恢复，则应该包含<literal>CUSTOMPATH_SUPPORT_MARK_RESTORE</>。
    这两种功能都是可选的。可选的<structfield>custom_paths</>是由该自定义路径节点使用的
    <structname>Path</>节点的列表；这些将由计划器转换成<structname>Plan</>节点。
    <structfield>custom_private</>可用于存储自定义路径的私有数据。
    私有数据应以可由<literal>nodeToString</>处理的形式存储，
    以便尝试打印自定义路径的调试例程将按设计工作。<structfield>methods</>
    必须指向实现所需的自定义路径方法的（通常是静态分配的）对象，
    其中目前仅有两个，见下面进一步详细描述。
  </para>

  <para>
   A custom scan provider can also provide join paths.  Just as for base
   relations, such a path must produce the same output as would normally be
   produced by the join it replaces.  To do this, the join provider should
   set the following hook, and then within the hook function,
   create <structname>CustomPath</> path(s) for the join relation.
   自定义扫描提供程序还可以提供连接路径。正如对于基本关系一样，
   这样的路径必须产生与它替换的连接通常产生的输出相同的输出。为此，
   连接提供程序应设置以下hook，然后在hook函数中为连接关系创建
   <structname>CustomPath</>路径。
<programlisting>
typedef void (*set_join_pathlist_hook_type) (PlannerInfo *root,
                                             RelOptInfo *joinrel,
                                             RelOptInfo *outerrel,
                                             RelOptInfo *innerrel,
                                             JoinType jointype,
                                             JoinPathExtraData *extra);
extern PGDLLIMPORT set_join_pathlist_hook_type set_join_pathlist_hook;
</programlisting>

   这个hook将针对相同的连接关系被重复调用，以内部和外部关系的不同组合；
   最小化重复工作是hook的责任。
  </para>

  <sect2 id="custom-scan-path-callbacks">
  <title>自定义扫描路径回调</title>

  <para>
<programlisting>
Plan *(*PlanCustomPath) (PlannerInfo *root,
                         RelOptInfo *rel,
                         CustomPath *best_path,
                         List *tlist,
                         List *clauses,
                         List *custom_plans);
</programlisting>
    将自定义路径转换为完成的计划。返回值通常是一个<literal>CustomScan</>对象，
    回调必须分配和初始化它。有关详情，请参阅<xref linkend="custom-scan-plan">。
   </para>

   <para>
<programlisting>
void (*TextOutCustomPath) (StringInfo str,
                           const CustomPath *node);
</programlisting>
    当在此自定义路径上调用<function>nodeToString</>时生成附加输出。此回调是可选的。
    因为<function>nodeToString</>将自动转储结构中可以看到的所有字段，
    包括<structfield>custom_private</>，所以只有当<structname>CustomPath</>
    实际嵌入在包含其他字段的较大结构中时是有用的。
   </para>
  </sect2>
 </sect1>

 <sect1 id="custom-scan-plan">
  <title>创建自定义扫描计划</title>

  <para>
    自定义扫描在完成的计划树中使用以下结构表示：
<programlisting>
typedef struct CustomScan
{
    Scan      scan;
    uint32    flags;
    List     *custom_plans;
    List     *custom_exprs;
    List     *custom_private;
    List     *custom_scan_tlist;
    Bitmapset *custom_relids;
    const CustomScanMethods *methods;
} CustomScan;
</programlisting>
  </para>

  <para>
    <structfield>scan</>必须为任何其他扫描初始化，包括估计成本、目标列表、资格等。
    <structfield>flags</>是与<structname>CustomPath</>中相同含义的位掩码。
    <structfield>custom_plans</>可以用来存储子<structname>Plan</>节点。
    <structfield>custom_exprs</>应用于存储需要由<filename>setrefs.c</>
    和<filename>subselect.c</>修饰的表达式树，而<structfield>custom_private</>
    应该用于存储仅由自定义扫描提供程序本身使用的其他私有数据。
    当扫描基本关系时，<structfield>custom_scan_tlist</>可以为NIL，
    表示自定义扫描返回与基本关系的行类型匹配的扫描元组。否则，
    它是描述实际扫描元组的目标列表。
    必须为连接提供<structfield>custom_scan_tlist</>，
    如果自定义扫描提供程序可以计算一些非Var表达式，则可以提供扫描。
    <structfield>custom_relids</>由核心代码设置为该扫描节点处理的关系集
    （范围表索引）；除非此扫描正在替换联接，它将只有一个成员。
    <structfield>methods</>必须指向实现所需的自定义扫描方法的
    （通常是静态分配的）对象，这将在下面进一步详细描述。
  </para>

  <para>
   当<structname>CustomScan</>扫描单个关系时，<structfield>scan.scanrelid</>
   必须是要扫描的表的范围表索引。当它替换连接时，<structfield>scan.scanrelid</>应为零。
  </para>

  <para>
   计划树必须能够使用<function>copyObject</>复制，因此存储在<quote>custom</>
   字段中的所有数据必须由该函数可以处理的节点组成。此外，
   自定义扫描提供者不能替代嵌入用于结构本身的<structname>CustomScan</>
   的较大结构，如对于<structname>CustomPath</>或<structname>CustomScanState</>是可能的。
  </para>

  <sect2 id="custom-scan-plan-callbacks">
   <title>自定义扫描计划回调</title>
   <para>
<programlisting>
Node *(*CreateCustomScanState) (CustomScan *cscan);
</programlisting>
    为该<structname>CustomScan</>分配<structname>CustomScanState</>。
    实际分配通常大于普通<structname>CustomScanState</>所需的分配，
    因为许多提供者希望将其嵌入为较大结构的第一个字段。
    返回的值必须正确设置节点标签和<structfield>methods</>，
    但在此阶段其他字段应为零；在<function>ExecInitCustomScan</>执行基本初始化之后，
    将调用<function>BeginCustomScan</>回调，以使自定义扫描提供程序有机会执行所需的任何操作。
   </para>

   <para>
<programlisting>
void (*TextOutCustomScan) (StringInfo str,
                           const CustomScan *node);
</programlisting>
    当在此自定义计划节点调用<function>nodeToString</>时，生成额外的输出。
    这个回调是可选的。因为<function>nodeToString</>会自动转储结构中的所有字段，
    包括<quote>custom</>字段的子结构，所以通常不需要这个回调。
   </para>
  </sect2>
 </sect1>

 <sect1 id="custom-scan-execution">
  <title>执行自定义扫描</title>

  <para>
   当执行<structfield>CustomScan</>时，其执行状态由
   <structfield>CustomScanState</>表示，其声明如下：
<programlisting>
typedef struct CustomScanState
{
    ScanState ss;
    uint32    flags;
    const CustomExecMethods *methods;
} CustomScanState;
</programlisting>
  </para>

  <para>
   <structfield>ss</>初始化为任何其他扫描状态，
   但如果扫描是针对联接而不是基本关系，则<literal>ss.ss_currentRelation</>
   将保留为NULL。<structfield>flags</>是具有与<structname>CustomPath</>
   和<structname>CustomScan</>中相同含义的位掩码。<structfield>methods</>
   必须指向实现所需的自定义扫描状态方法的（通常是静态分配的）对象，
   这将在下面进一步详细描述。通常，不需要支持<function>copyObject</>
   的<structname>CustomScanState</>将实际上是嵌入上面作为其第一成员的更大的结构。
  </para>

  <sect2 id="custom-scan-execution-callbacks">
   <title>自定义扫描执行回调</title>

   <para>
<programlisting>
void (*BeginCustomScan) (CustomScanState *node,
                         EState *estate,
                         int eflags);
</programlisting>
    完成提供的<structname>CustomScanState</>的初始化。
    已经通过<function>ExecInitCustomScan</>初始化了标准字段，
    但是应该在这里初始化任何私有字段。
   </para>

   <para>
<programlisting>
TupleTableSlot *(*ExecCustomScan) (CustomScanState *node);
</programlisting>
    获取下一个扫描元组。如果剩余任何元组，
    它应该在当前扫描方向上用下一个元组填充<literal>ps_ResultTupleSlot</>，
    然后返回元组槽。如果没有，应返回<literal>NULL</>或空槽。
   </para>

   <para>
<programlisting>
void (*EndCustomScan) (CustomScanState *node);
</programlisting>
    Clean up any private data associated with the <literal>CustomScanState</>.
    This method is required, but it does not need to do anything if there is
    no associated data or it will be cleaned up automatically.
    清除与<literal>CustomScanState</>相关联的任何私有数据。
    此方法是必需的，但如果没有相关数据或者它将自动清理，则不需要执行任何操作。
   </para>

   <para>
<programlisting>
void (*ReScanCustomScan) (CustomScanState *node);
</programlisting>
    将当前扫描回滚到开始处，并准备重新扫描关系。
   </para>

   <para>
<programlisting>
void (*MarkPosCustomScan) (CustomScanState *node);
</programlisting>
    保存当前扫描位置，以便随后可以通过<function>RestrPosCustomScan</>回调恢复。
    此回调是可选的，只需要在设置<literal>CUSTOMPATH_SUPPORT_MARK_RESTORE</>
    标志时提供此回调。
   </para>

   <para>
<programlisting>
void (*RestrPosCustomScan) (CustomScanState *node);
</programlisting>
    恢复由<function>MarkPosCustomScan</>回调保存的上一个扫描位置。
    此回调是可选的，只需要在设置<literal>CUSTOMPATH_SUPPORT_MARK_RESTORE</>
    标志时提供此回调。
   </para>

   <para>
<programlisting>
void (*ExplainCustomScan) (CustomScanState *node,
                           List *ancestors,
                           ExplainState *es);
</programlisting>
    输出自定义扫描计划节点的<command>EXPLAIN</> 的附加信息。此回调是可选的。
    公共数据存储在<structname>ScanState</>中，如目标列表和扫描关系，
    即使没有这个回调也会显示，但回调允许显示额外的私有状态。
   </para>
  </sect2>
 </sect1>
</chapter>
