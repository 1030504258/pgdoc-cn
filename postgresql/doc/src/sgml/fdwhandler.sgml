<!-- doc/src/sgml/fdwhandler.sgml -->

 <chapter id="fdwhandler">
   <title>编写一个外部数据包装器</title>

   <indexterm zone="fdwhandler">
    <primary>foreign data wrapper</primary>
    <secondary>handler for</secondary>
   </indexterm>

   <para>
    所有在一个外部表上的操作都通过它的外部数据包装器来处理，外部数据包装器由一组被核心服务器调用的函数组成。外部数据包装器负责从远程数据源取得数据并把它返回给<productname>PostgreSQL</productname>执行器。如果要支持更新外部表，包装器也需要处理更新。本章将介绍如何编写一个新的外部数据包装器。
   </para>

   <para>
    在你试图编写你自己的外部数据包装器时，包含在标准发布中的外部数据包装器会是很好的参考。请看看源代码树的<filename>contrib</>子目录。<xref linkend="sql-createforeigndatawrapper">参考页也会有很多有用的细节。
   </para>

   <note>
    <para>
     SQL 标准声明了一个接口用来编写外部数据包装器。但是，PostgreSQL 没有实现该 API，因为将其纳入到 PostgreSQL 中的工作量将会很大，并且标准的 API 并没有得到广泛地采用。
    </para>
   </note>

   <sect1 id="fdw-functions">
    <title>外部数据包装器函数</title>

    <para>
     FDW的作者需要实现一个处理器函数，并且可以有选择地实现一个验证器函数。两个函数都必须被用一种编译语言（如 C）来编写，并使用版本-1接口。关于 C 语言调用习惯和动态载入的细节，请见<xref linkend="xfunc-c">。
    </para>

    <para>
     处理器函数简单地返回一个函数指针结构给回调函数，回调函数将被规划器、执行器和多种维护命令调用。编写一个FDW的大部分工作量都在实现这些回调函数上。处理器函数必须被注册在<productname>PostgreSQL</productname>中，并且注册为不需要参数并且返回特殊的伪类型<type>fdw_handler</type>。回调函数则是普通的 C 函数并且对于 SQL 层是不可见的或者不可调用的。回调函数在<xref linkend="fdw-callbacks">中描述。
    </para>

    <para>
     验证器函数负责验证<command>CREATE</command>和<command>ALTER</command>命令中对它的外部数据包装器给出的选项，以及使用该包装器的外部服务器、用户映射和外部表。验证器函数必须被注册为要求两个参数：一个包含需要被验证的选项的文本数组，以及一个表示与这些选项相关联的对象类型的OID（以该对象可能被存储的系统目录的OID的形式，可以是<literal>ForeignDataWrapperRelationId</>、
     <literal>ForeignServerRelationId</>、
     <literal>UserMappingRelationId</>、
     或<literal>ForeignTableRelationId</>）。如果没有提供验证器函数，在对象创建或修改时选项不会被检查。
    </para>

   </sect1>

   <sect1 id="fdw-callbacks">
    <title>外部数据包装器回调例程</title>

    <para>
     FDW处理器函数返回一个palloc过的<structname>FdwRoutine</>结构，它包含下文描述的回调函数的指针。扫描相关的函数是必需的，剩下的是可选的。
    </para>

    <para>
     <structname>FdwRoutine</>结构类型被声明在<filename>src/include/foreign/fdwapi.h</>中，可以查看它来获得额外的信息。
    </para>

   <sect2 id="fdw-callbacks-scan">
    <title>用于扫描外部表的FDW例程</title>

    <para>
<programlisting>
void
GetForeignRelSize (PlannerInfo *root,
                   RelOptInfo *baserel,
                   Oid foreigntableid);
</programlisting>

     获取一个外部表的关系尺寸估计。在对一个扫描外部表的查询进行规划的开头将调用该函数。<literal>root</>是规划器的关于该查询的全局信息；<literal>baserel</>是规划器的关于该表的信息；<literal>foreigntableid</>是外部表在<structname>pg_class</>中的 OID （<literal>foreigntableid</>可以从规划器的数据结构中获得，但是为了减少工作量，这里直接显式地将它传递给函数）。
    </para>

    <para>
     这个函数应该更新<literal>baserel-&gt;rows</>为表扫描根据限制条件完成了过滤后将返回的预期行数。<literal>baserel-&gt;rows</>的初始值只是一个常数的默认估计值，应该尽可能把它替换掉。如果该函数能够计算出一个平均结果行宽度的更好的估计值，该函数也可能选择更新<literal>baserel-&gt;width</>。
    </para>

    <para>
     更多信息请见<xref linkend="fdw-planning">。
    </para>

    <para>
<programlisting>
void
GetForeignPaths (PlannerInfo *root,
                 RelOptInfo *baserel,
                 Oid foreigntableid);
</programlisting>

     为一个外部表上的扫描创建可能的访问路径。这个函数在查询规划过程中被调用。参数和<function>GetForeignRelSize</>相同，后者已经被调用过了。
    </para>

    <para>
     这个函数必须为外部表上的扫描生成至少一个访问路径（<structname>ForeignPath</>节点），并且必须调用<function>add_path</>把每一个这样的路径加入到<literal>baserel-&gt;pathlist</>中。我们推荐使用<function>create_foreignscan_path</>来建立<structname>ForeignPath</>节点。该函数可以生成多个访问路径，例如一个具有合法<literal>pathkeys</>的路径表示一个预排序好的结果。每一个反问路径必须包含代价估计，并且能包含任何FDW的私有信息，这种信息被用来标识想要使用的指定扫描方法。
    </para>

    <para>
     更多信息请见<xref linkend="fdw-planning">。
    </para>

    <para>
<programlisting>
ForeignScan *
GetForeignPlan (PlannerInfo *root,
                RelOptInfo *baserel,
                Oid foreigntableid,
                ForeignPath *best_path,
                List *tlist,
                List *scan_clauses);
</programlisting>

     从选择的外部访问路径创建一个<structname>ForeignScan</>计划节点。这个函数在查询规划的末尾被调用。参数和<function>GetForeignRelSize</>的一样，外加选中的<structname>ForeignPath</>（在前面由<function>GetForeignPaths</>产生）、被计划节点发出的目标列表以及计划节点强制的限制子句。
    </para>

    <para>
     这个函数必须创建并返回一个<structname>ForeignScan</>计划节点，我们对剑使用<function>make_foreignscan</>来建立<structname>ForeignScan</>节点。
    </para>

    <para>
     更多信息见<xref linkend="fdw-planning">。
    </para>

    <para>
<programlisting>
void
BeginForeignScan (ForeignScanState *node,
                  int eflags);
</programlisting>

     开始执行一个外部扫描。这个函数在执行器启动阶段被调用。它应该执行任何在扫描能够开始之前需要完成的初始化工作，但是并不开始执行真正的扫描（会在第一次调用<function>IterateForeignScan</>时完成）。<structname>ForeignScanState</>节点已经被创建好了，但是它的<structfield>fdw_state</>域仍然为 NULL。关于要被扫描的表的信息可以通过<structname>ForeignScanState</>节点访问（特殊地，从底层的<structname>ForeignScan</>计划节点，它包含任何由<function>GetForeignPlan</>提供的FDW私有信息）。<literal>eflags</>包含描述执行器对该计划节点操作模式的标志位。
    </para>

    <para>
     注意当<literal>(eflags &amp; EXEC_FLAG_EXPLAIN_ONLY)</>为真时，这个函数不应该执行任何外部可见的动作；它应当只做最少的事情来创建对<function>ExplainForeignScan</> 和<function>EndForeignScan</>有效的节点状态。
    </para>

    <para>
<programlisting>
TupleTableSlot *
IterateForeignScan (ForeignScanState *node);
</programlisting>

     从外部源获得一行，将它放在一个元组表槽中返回（节点的<structfield>ScanTupleSlot</>应当被用于此目的）。如果没有更多的行可用则返回 NULL。元组表槽设施允许一个物理的或者虚拟的元组被返回；在大部分情况下出于性能的考虑会倾向于选择后者。注意这是在一个短期存在的内存上下文中被调用的，该内存上下文会在调用之间被重置。如果你需要长期存在的存储，请在<function>BeginForeignScan</>中创建内存上下文，或者使用节点的<structname>EState</>中的<structfield>es_query_cxt</>。
    </para>

    <para>
     被返回的行必须匹配被扫描的外部表的列签名。如果你选择将那些不需要的列优化掉，你应该在那些列位置上插入空值。
    </para>

    <para>
     注意<productname>PostgreSQL</productname>的执行器并不关心被返回的行是否违反任何定义在外部表列上的<literal>NOT NULL</literal>约束 &mdash; 但是规划器却关心，并且如果<literal>NULL</>值出现在一个被声明为不可能包含它们的列中，优化器可能会不正确地优化查询。如果用户已经声明了不会出现空值时遇到一个<literal>NULL</>值，可能抛出一个错误更为合适（就像你在数据类型失配的情况下你需要做的一样）。
    </para>

    <para>
<programlisting>
void
ReScanForeignScan (ForeignScanState *node);
</programlisting>

     从头开始重启一个扫描。注意扫描所依赖的任何参数可能已经改变了值，因此新扫描不一定会返回完全相同的行。
    </para>

    <para>
<programlisting>
void
EndForeignScan (ForeignScanState *node);
</programlisting>

     结束扫描并释放资源。通常释放palloc过的内存并不重要，但是打开的文件和到远程服务器的连接等应该被清理。
    </para>

   </sect2>

   <sect2 id="fdw-callbacks-update">
    <title>更新外部表的FDW例程</title>

    <para>
     如果一个FDW支持可写的外部表，根据FDW的需要和功能它应该提供某些或者全部下列回调函数：
    </para>

    <para>
<programlisting>
void
AddForeignUpdateTargets (Query *parsetree,
                         RangeTblEntry *target_rte,
                         Relation target_relation);
</programlisting>

     <command>UPDATE</>和<command>DELETE</>操作是在之前由表扫描函数取出的行上被执行的。FDW可能需要额外的信息（例如一个行ID或主键列的值）来保证它能够找到要更新或删除的准确行。要支持这些要求，这个函数可以项列列表中增加额外的隐藏或<quote>junk</>的目标列，它们在一个<command>UPDATE</>或<command>DELETE</>期间会被从外部表中获取。
    </para>

    <para>
     要做到这一点，向<literal>parsetree-&gt;targetList</>中增加<structname>TargetEntry</>项，它们包含要被获取的额外值的表达式。每一个这样的项必须被标记为<structfield>resjunk</> = <literal>true</>，并且必须有一个可区分的<structfield>resname</>用于在执行期间标识它。请避免使用匹配<literal>ctid<replaceable>N</></literal>、<literal>wholerow</literal>或<literal>wholerow<replaceable>N</></literal>的名字，因为核心系统可能会生成使用这些名字的junk列。
    </para>

    <para>
     这个函数在重写器中被调用，而不是在规划器中，因此可用的信息与在规划例程中的有点区别。<literal>parsetree</>是<command>UPDATE</>或<command>DELETE</>命令的分析树，而<literal>target_rte</>和<literal>target_relation</>描述目标外部表。
    </para>

    <para>
     如果<function>AddForeignUpdateTargets</>指针被设置为<literal>NULL</>，则不会有额外的目标表达式被加入（这将使得我们不可能实现<command>DELETE</>操作，而<command>UPDATE</>则还有可能是可行的，前提是FDW依赖一个未改变的主键来标识行）。
    </para>

    <para>
<programlisting>
List *
PlanForeignModify (PlannerInfo *root,
                   ModifyTable *plan,
                   Index resultRelation,
                   int subplan_index);
</programlisting>

     执行外部表上插入、更新或删除所需的任何附加规划动作。这个函数生成FDW私有信息，该信息将被附加到执行该更新动作的<structname>ModifyTable</>计划节点。这个私有信息的形式必须是一个<literal>List</>，并将会在执行阶段被传递给<function>BeginForeignModify</>。
    </para>

    <para>
     <literal>root</>是规划器关于该查询的全局信息。
     <literal>plan</>是<structname>ModifyTable</>计划节点，它除了<structfield>fdwPrivLists</>域之外是完整的。
     <literal>resultRelation</>通过目标外部表的范围表索引来标识它。<literal>subplan_index</>标识这是<structname>ModifyTable</>计划节点的哪个目标，从零开始计数；如果你希望索引到<literal>plan-&gt;plans</>或其他<literal>plan</>节点的子结构中，请使用它。
    </para>

    <para>
     更多信息见<xref linkend="fdw-planning">。
    </para>

    <para>
     如果<function>PlanForeignModify</>指针被设置为<literal>NULL</>，则不会有额外的计划时动作被执行，并且传递给<function>BeginForeignModify</>的<literal>fdw_private</>列表也将为 NIL。
    </para>

    <para>
<programlisting>
void
BeginForeignModify (ModifyTableState *mtstate,
                    ResultRelInfo *rinfo,
                    List *fdw_private,
                    int subplan_index,
                    int eflags);
</programlisting>

     开始执行一个外部表修改操作。这个例程在执行器启动期间被调用。它应该执行任何先于实际表修改的初始化工作。随后，<function>ExecForeignInsert</>、<function>ExecForeignUpdate</>或<function>ExecForeignDelete</>将被为每一个将被插入、更新或删除的元组调用。
    </para>

    <para>
     <literal>mtstate</>是要被执行的<structname>ModifyTable</>计划节点的状态信息；通过这个结构可以得到关于规划和执行阶段的全局数据。<literal>rinfo</>是描述目标外部表的<structname>ResultRelInfo</>结构（<structname>ResultRelInfo</>的<structfield>ri_FdwState</>域用于FDW来存储它在此操作中需要的任何私有状态）。<literal>fdw_private</>包含<function>PlanForeignModify</>生成的私有数据。<literal>subplan_index</>标识这是<structname>ModifyTable</>计划节点的哪个目标。<literal>eflags</>包含描述执行器对该计划节点操作模式的标志位。
    </para>

    <para>
     注意当<literal>(eflags &amp; EXEC_FLAG_EXPLAIN_ONLY)</>为真，这个函数不应执行任何外部可见的动作；它只应该做最少的工作来创建<function>ExplainForeignModify</>和<function>EndForeignModify</>可用的节点状态。
    </para>

    <para>
     如果<function>BeginForeignModify</>指针被设置为<literal>NULL</>，在执行器启动期间将不会采取任何动作。
    </para>

    <para>
<programlisting>
TupleTableSlot *
ExecForeignInsert (EState *estate,
                   ResultRelInfo *rinfo,
                   TupleTableSlot *slot,
                   TupleTableSlot *planSlot);
</programlisting>

     插入一个元组到外部表。<literal>estate</>是查询的全局执行状态。<literal>rinfo</>是描述目标外部表的<structname>ResultRelInfo</>结构。<literal>slot</>包含要被插入的元组；它将匹配外部表的行类型定义。<literal>planSlot</>包含由<structname>ModifyTable</>计划节点的子计划生成的元组；它与<literal>slot</>不同，它可能包含额外的<quote>junk</>列（<command>INSERT</>情况通常不关心<literal>planSlot</>，但是为了完整性还是在这里提供它）。
    </para>

    <para>
     返回值可以是一个包含实际被插入的数据的槽（这可能会和所提供的数据不同，例如一个触发器动作的结果），或者为 NULL 表示实际没有插入行（还是触发器的结果）。被传入的<literal>slot</>可以被重用于这个目的。
    </para>

    <para>
     在返回槽中的数据只有在<command>INSERT</>查询具有一个<literal>RETURNING</>子句或者
     外部表具有一个<literal>AFTER ROW</>触发器时才被使用。触发器要求所有的列，但是 FDW 应
     该选择优化成根据<literal>RETURNING</>子句的内容返回某些或全部列。不管怎样，某些槽必须
     被返回来指示成功，或者查询报告的行计数将会是错误的。
    </para>

    <para>
     如果<function>ExecForeignInsert</>指针被设置为<literal>NULL</>，尝试向外部表插入将会失败并报告一个错误消息。
    </para>

    <para>
<programlisting>
TupleTableSlot *
ExecForeignUpdate (EState *estate,
                   ResultRelInfo *rinfo,
                   TupleTableSlot *slot,
                   TupleTableSlot *planSlot);
</programlisting>

     更新外部表中的一个元组。<literal>estate</>是查询的全局执行状态。<literal>rinfo</>是描述目标外部表的<structname>ResultRelInfo</>结构。<literal>slot</>包含元组的新数据；它将匹配外部表的行类型定义。<literal>planSlot</>包含由<structname>ModifyTable</>计划节点的子计划生成的元组；它与<literal>slot</>不同，它可能包含额外的<quote>junk</>列（<command>INSERT</>情况通常不关心<literal>planSlot</>，但是为了完整性还是在这里提供它）。特殊地，任何<function>AddForeignUpdateTargets</>所要求的junk列在这个槽中都是有效的。
    </para>

    <para>
     返回值可以是一个包含实际被更新的数据的槽（这可能会和所提供的数据不同，例如一个触发器动作的结果），或者为 NULL 表示实际没有更新行（还是触发器的结果）。被传入的<literal>slot</>可以被重用于这个目的。
    </para>

    <para>
    在返回槽中的数据只有在<command>UPDATE</>查询具有一个<literal>RETURNING</>子句或者
    外部表具有一个<literal>AFTER ROW</>触发器时才被使用。触发器要求所有的列，但是 FDW 应
    该选择优化成根据<literal>RETURNING</>子句的内容返回某些或全部列。不管怎样，某些槽必须
    被返回来指示成功，或者查询报告的行计数将会是错误的。
    </para>

    <para>
     如果<function>ExecForeignUpdate</>指针被设置为<literal>NULL</>，尝试更新外部表将会失败并报告一个错误消息。
    </para>

    <para>
<programlisting>
TupleTableSlot *
ExecForeignDelete (EState *estate,
                   ResultRelInfo *rinfo,
                   TupleTableSlot *slot,
                   TupleTableSlot *planSlot);
</programlisting>

     从外部表删除一个元组。<literal>estate</>是查询的全局执行状态。<literal>rinfo</>是描述目标外部表的<structname>ResultRelInfo</>结构。<literal>slot</>在调用时不包含任何有用的东西，但是可以被用于保持被返回的元组。<literal>planSlot</>包含由<structname>ModifyTable</>计划节点的子计划生成的元组；特殊地，它将携带<function>AddForeignUpdateTargets</>所要求的任意垃圾列。垃圾列被用来标识要被删除的元组。
    </para>

    <para>
     返回值可以是一个包含实际被删除的数据的槽（这可能会和所提供的数据不同，例如一个触发器动作的结果），或者为 NULL 表示实际没有删除行（还是触发器的结果）。被传入的<literal>slot</>可以被重用于这个目的。
    </para>

    <para>
    在返回槽中的数据只有在<command>DELETE</>查询具有一个<literal>RETURNING</>子句或者
    外部表具有一个<literal>AFTER ROW</>触发器时才被使用。触发器要求所有的列，但是 FDW 应
    该选择优化成根据<literal>RETURNING</>子句的内容返回某些或全部列。不管怎样，某些槽必须
    被返回来指示成功，或者查询报告的行计数将会是错误的。
    </para>

    <para>
     如果<function>ExecForeignDelete</>指针被设置为<literal>NULL</>，尝试从外部表中删除将会失败并报告一个错误消息。
    </para>

    <para>
<programlisting>
void
EndForeignModify (EState *estate,
                  ResultRelInfo *rinfo);
</programlisting>

     结束表更新并释放资源。通常释放palloc的内存并不重要，但是打开的文件和到远程服务器的连接等应当被清除。
    </para>

    <para>
     如果<function>EndForeignModify</>指针被设置为<literal>NULL</>，在执行器关闭期间不会采取任何动作。
    </para>

    <para>
<programlisting>
int
IsForeignRelUpdatable (Relation rel);
</programlisting>

     报告指定的外部表支持哪些更新操作。返回值应该是一个规则事件编号的位掩码，它指示了哪些操作被外部表支持，它使用<literal>CmdType</>枚举，及：
     <literal>(1 << CMD_UPDATE) = 4</>表示<command>UPDATE</>、
     <literal>(1 << CMD_INSERT) = 8</>表示<command>INSERT</>以及
     <literal>(1 << CMD_DELETE) = 16</>表示<command>DELETE</>。
    </para>

    <para>
     如果<function>IsForeignRelUpdatable</>指针被设置为<literal>NULL</>，而FDW提供了<function>ExecForeignInsert</>、<function>ExecForeignUpdate</>或<function>ExecForeignDelete</>，则外部表分别被假定为可插入、可更新或可删除。只有在FDW支持某些表是可更新的而某些不是可更新的时候，才需要这个函数（即便如此，也允许在执行例程中抛出一个错误而不是在这个函数中检查。但是，这个函数被用来决定显示在<literal>information_schema</>视图中的可更新性）。
    </para>

   </sect2>

   <sect2 id="fdw-callbacks-explain">
    <title><command>EXPLAIN</>的FDW例程</title>

    <para>
<programlisting>
void
ExplainForeignScan (ForeignScanState *node,
                    ExplainState *es);
</programlisting>

     为一个外部表扫描打印额外的<command>EXPLAIN</>输出。这个函数可以调用<function>ExplainPropertyText</>和相关函数来向<command>EXPLAIN</>输出中增加域。<literal>es</>中的标志域可以被用来决定什么将被打印，并且<structname>ForeignScanState</>节点的状态可以被检查来为<command>EXPLAIN ANALYZE</>提供运行时统计数据。
    </para>

    <para>
     如果<function>ExplainForeignScan</>指针被设置为<literal>NULL</>，在<command>EXPLAIN</>期间不会打印任何额外的信息。
    </para>

    <para>
<programlisting>
void
ExplainForeignModify (ModifyTableState *mtstate,
                      ResultRelInfo *rinfo,
                      List *fdw_private,
                      int subplan_index,
                      struct ExplainState *es);
</programlisting>

     为一个外部表更新打印额外的<command>EXPLAIN</>输出。这个函数可以调用<function>ExplainPropertyText</>和相关函数来向<command>EXPLAIN</>输出中增加域。<literal>es</>中的标志域可以被用来决定什么将被打印，并且<structname>ModifyTableState</>节点的状态可以被检查来为<command>EXPLAIN ANALYZE</>提供运行时统计数据。前四个参数和<function>BeginForeignModify</>相同。
    </para>

    <para>
     如果<function>ExplainForeignModify</>指针被设置为<literal>NULL</>，在<command>EXPLAIN</>期间不会打印任何额外的信息。
    </para>

   </sect2>

   <sect2 id="fdw-callbacks-analyze">
    <title><command>ANALYZE</>的FDW例程</title>

    <para>
<programlisting>
bool
AnalyzeForeignTable (Relation relation,
                     AcquireSampleRowsFunc *func,
                     BlockNumber *totalpages);
</programlisting>

     当<xref linkend="sql-analyze">被执行在一个外部表上时会调用这个函数。如果FDW可以为这个外部表收集统计信息，它会返回<literal>true</>并提供一个函数指针，该函数将将从<parameter>func</>中的表上收集采样行，外加<parameter>totalpages</>中页面中的表尺寸估计值。否则，返回<literal>false</>。
    </para>

    <para>
     如果FDW不支持为任何表收集统计信息，<function>AnalyzeForeignTable</>指针可以被设置为<literal>NULL</>。
    </para>

    <para>
     如果提供，采样收集函数必须具有签名
<programlisting>
int
AcquireSampleRowsFunc (Relation relation, int elevel,
                       HeapTuple *rows, int targrows,
                       double *totalrows,
                       double *totaldeadrows);
</programlisting>

     应该从该表上收集最多<parameter>targrows</>行的一个随机采样并将它存放到调用者提供的<parameter>rows</>数组中。实际被收集的行的数量必须被返回。另外，将表中有效行和死亡行的总数存储到输出参数<parameter>totalrows</>和<parameter>totaldeadrows</>中（如果FDW没有死亡行的概念，将<parameter>totaldeadrows</>设置为 0 ）。
    </para>

   </sect2>

   </sect1>

   <sect1 id="fdw-helpers">
    <title>外部数据包装器助手函数</title>

    <para>
     多个助手函数被从核心服务器输出，这样外部数据包装器的作者们可以很容易访问到FDW相关对象的属性，例如FDW选项。要使用任何其中一个函数，你需要在你的源文件中包括头文件<filename>foreign/foreign.h</filename>。这个头也定义了被这些函数返回的结构类型。
    </para>

    <para>
<programlisting>
ForeignDataWrapper *
GetForeignDataWrapper(Oid fdwid);
</programlisting>

     这个函数为具有给定 OID 的外部数据包装器返回一个<structname>ForeignDataWrapper</structname>对象。一个<structname>ForeignDataWrapper</structname>对象包含该FDW的特性（详见<filename>foreign/foreign.h</filename>）。
    </para>

    <para>
<programlisting>
ForeignServer *
GetForeignServer(Oid serverid);
</programlisting>

     这个函数为一个具有给定 OID 的外部服务器返回<structname>ForeignServer</structname>对象。一个<structname>ForeignServer</structname>对象包含该服务器的特性（详见<filename>foreign/foreign.h</filename>）。
    </para>

    <para>
<programlisting>
UserMapping *
GetUserMapping(Oid userid, Oid serverid);
</programlisting>

     这个函数为在给定服务器上的给定角色的用户映射返回<structname>UserMapping</structname>对象（如果指定用户没有映射，它将返回<literal>PUBLIC</>的映射，如果也没有则抛出错误）。一个<structname>UserMapping</structname>对象包含该用户映射的特性（详见<filename>foreign/foreign.h</filename>）。
    </para>

    <para>
<programlisting>
ForeignTable *
GetForeignTable(Oid relid);
</programlisting>

     该函数为一个具有给定 OID 的外部表返回<structname>ForeignTable</structname>对象。一个<structname>ForeignTable</structname>对象包含该外部表的特性（详见<filename>foreign/foreign.h</filename>）。
    </para>

    <para>
<programlisting>
List *
GetForeignColumnOptions(Oid relid, AttrNumber attnum);
</programlisting>

     这个函数为一个具有给定外部表 OID 和属性号的列返回针对每一列的FDW选项，形式为一个<structname>DefElem</structname>列表。如果该列没有选项则返回 NIL。
    </para>

    <para>
     某些对象类型除了基于OID的查找函数之外，还具有基于名称的查找函数：
    </para>

    <para>
<programlisting>
ForeignDataWrapper *
GetForeignDataWrapperByName(const char *name, bool missing_ok);
</programlisting>

     这个函数为一个具有给定名称的外部数据包装器返回<structname>ForeignDataWrapper</structname>对象。如果包装器没有找到，在missing_ok为真时返回 NULL，否则抛出一个错误。
    </para>

    <para>
<programlisting>
ForeignServer *
GetForeignServerByName(const char *name, bool missing_ok);
</programlisting>

     这个函数为一个具有给定名称的外部服务器返回<structname>ForeignServer</structname>对象。如果该服务器没有被找到，在missing_ok为真时返回 NULL，否则抛出一个错误。
    </para>

   </sect1>

   <sect1 id="fdw-planning">
    <title>外部数据包装器查询规划</title>

    <para>
     FDW回调函数<function>GetForeignRelSize</>、
     <function>GetForeignPaths</>、<function>GetForeignPlan</>和
     <function>PlanForeignModify</>必须适合<productname>PostgreSQL</>规划器的工作。这里有一些关于它们必须做什么的注记。
    </para>

    <para>
     <literal>root</>和<literal>baserel</>中的信息可以被用来减少必须从外部表获得的信息量（并且因此降低代价）。<literal>baserel-&gt;baserestrictinfo</>是特别有趣的，因为它包含限制条件（<literal>WHERE</>）子句，它应该被用来过滤要被获取的行（FDW本身并不要求强制这些条件，因为核心执行器可以检查它们）。<literal>baserel-&gt;reltargetlist</>可以被用来决定哪些类需要被获取；但是注意它仅列出了<structname>ForeignScan</>计划节点所发出的列，不包含在条件计算中使用但并不被查询输出的列。
    </para>

    <para>
     有多个私有域可以给FDW规划函数来保存信息。通常，不管你存储什么在FDW私有域中，它们都应该被palloc，这样它会在规划结束时被回收。    </para>

    <para>
     <literal>baserel-&gt;fdw_private</>是一个<type>void</>指针，它可以被FDW规划函数用来存储与特定外部表相关的信息。核心规划器不会碰它除非当<literal>baserel</>节点被创建时把它初始化为NULL。它对从<function>GetForeignRelSize</>传递信息给<function>GetForeignPaths</>和/或从<function>GetForeignPaths</>传递信息给<function>GetForeignPlan</>非常有用，这样避免了重新计算。
    </para>

    <para>
     <function>GetForeignPaths</>可以通过在<structname>ForeignPath</>节点的<structfield>fdw_private</>域中存储私有信息来标识不同的访问路径。<structfield>fdw_private</>被声明为一个<type>List</>指针，但是可能实际上包含任何东西，因为规划器不会触碰它。但是，最好是使用一种<function>nodeToString</>可导出的形式，这样在后端可以用于调试支持。
    </para>

    <para>
     <function>GetForeignPlan</>可以检查选中的<structname>ForeignPath</>节点的<structfield>fdw_private</>域，并且可以生成被放置于<structname>ForeignPath</>计划节点中的<structfield>fdw_exprs</>和<structfield>fdw_private</>列表。这两个列表必须被表示为一种<function>copyObject</>可复制的形式。<structfield>fdw_private</>列表没有任何其他限制并且不会被核心后端以任何形式解释。非 NIL 的<structfield>fdw_exprs</>应该包含表达式树，该树会在运行时被执行。这些树将由规划器在后期处理，以便让它们变成完全可执行的。
    </para>

    <para>
     在<function>GetForeignPlan</>中，通常被传入的目标列表可以被照样复制到计划节点中。被传入的<literal>scan_clauses</> 列表包含和<literal>baserel-&gt;baserestrictinfo</>相同的子句，但是可能为了更好的执行效率会被重新排序。在简单情况下，FDW可以只把<structname>RestrictInfo</>节点从<literal>scan_clauses</> 列表剥离（使用<function>extract_actual_clauses</>）并且把所有子句放到计划节点的条件列表中，这意味着所有子句将在运行时由执行器检查。更复杂的FDW可能可以在内部检查某些子句，着这种情况下哪些子句可以从计划节点的条件列表中删除，这样执行器就不用浪费时间去检查它们。
    </para>

    <para>
     作为一个例子，FDW可以标识某些<replaceable>foreign_variable</> <literal>=</>
     <replaceable>sub_expression</>形式的限制子句，它决定哪些可以使用由<replaceable>sub_expression</>给出的本地计算值在远程服务器上被执行。这样一个子句的实际标识应该在<function>GetForeignPaths</>期间发生，因为它可能会影响路径的代价估计。路径的<structfield>fdw_private</>域可能包括一个已标识的子句的<structname>RestrictInfo</>节点。然后<function>GetForeignPlan</>将从<literal>scan_clauses</> 中移除该子句，但是将<replaceable>sub_expression</>加到<structfield>fdw_exprs</>来保证它被揉成可执行的形式。它可能还将把控制信息放入到计划节点的<structfield>fdw_private</>域来告诉执行函数在运行时要做什么。传递给远程服务器的查询将涉及类似<literal>WHERE <replaceable>foreign_variable</> = $1</literal>的东西，使用在运行时从<structfield>fdw_exprs</>表达式树获得的参数值。
    </para>

    <para>
     FDW应该总是只依靠表的限制子句构建至少一个路径。在连接查询中，它可能还会选择依靠连接子句构建路径，例如<replaceable>foreign_variable</> <literal>=</> <replaceable>local_variable</>。这样的子句将不会在<literal>baserel-&gt;baserestrictinfo</>中找到，但是必须出现在关系的连接列表中。使用这样一个子句的路径被称为一个<quote>参数化路径</>。它必须用一个合适的<literal>param_info</>值来标识其他被使用在选中的连接子句中的关系；使用<function>get_baserel_parampathinfo</>来计算该值。在<function>GetForeignPlan</>中，连接子句的<replaceable>local_variable</>部分将被加到<structfield>fdw_exprs</>中，并且接着在运行时和一个普通限制子句一样工作。
    </para>

    <para>
     在规划一个<command>UPDATE</>或<command>DELETE</>时，<function>PlanForeignModify</>能为外部表查找<structname>RelOptInfo</>结构，并利用之前由扫描规划函数创建的<literal>baserel-&gt;fdw_private</>数据。但是，在<command>INSERT</>中目标表不会被扫描，因此不会有它的<structname>RelOptInfo</>。由<function>PlanForeignModify</>返回的<structname>List</>具有和<structname>ForeignScan</>计划节点的<structfield>fdw_private</>列表相同的限制，即它必须只包含<function>copyObject</>知道怎么拷贝的结构。
    </para>

    <para>
     对于一个支持并发更新的外部数据源的<command>UPDATE</>或<command>DELETE</>，我们推荐让<literal>ForeignScan</>操作锁住它得到的行，也许通过一种等效于<command>SELECT FOR UPDATE</>的方式。当外部表是在一个<command>SELECT FOR UPDATE/SHARE</>中被引用时，FDW也许还会选择在获取时就锁住行；如果不是这样，<literal>FOR UPDATE</>或<literal>FOR SHARE</>选项对于所关注的外部表来说在本质上是一个空操作。这个行为可能产生和本地表上操作略微不同的语义，在后者中行锁通常被尽可能延迟：即使远程行无法通过后续的本地限制或连接条件，它们也应该被锁住。不过，准确地匹配本地语义将要求对每一行有一次额外的远程访问，并且可能无法依靠外部数据源提供的锁语义。
    </para>

  </sect1>

 </chapter>
