<!-- doc/src/sgml/citext.sgml -->

<sect1 id="citext" xreflabel="citext">
 <title>citext</title>

 <indexterm zone="citext">
  <primary>citext</primary> 
 </indexterm>

 <!--
<para>
  The <filename>citext</> module provides a case-insensitive
  character string type, <type>citext</>. Essentially, it internally calls
  <function>lower</> when comparing values. Otherwise, it behaves almost
  exactly like <type>text</>.
 </para>
-->
<para>
  <filename>citext</>模块提供不区分大小写字符串类型，<type>citext</>。
  从本质上讲，当比较值时，它内部调用<function>lower</>。
  否则，它的操作很像<type>text</>。
</para>

 <sect2>
 <!--
  <title>Rationale</title>
  -->
  <title>基本原理</title>

  
<para>
   <!--
   The standard approach to doing case-insensitive matches
   in <productname>PostgreSQL</> has been to use the <function>lower</>
   function when comparing values, for example
   -->
   当比较值时，在<productname>PostgreSQL</>中执行不区分大小写匹配的标准方法曾使用
   <function>lower</>函数，比如
   
<programlisting>
SELECT * FROM tab WHERE lower(col) = LOWER(?);
</programlisting>
  </para>

  <!--
<para>
   This works reasonably well, but has a number of drawbacks:
  </para>
-->
<para>
   这个执行的相当好，但有一些缺点：
</para>

   <itemizedlist>
    <listitem>
     <!--
<para>
      It makes your SQL statements verbose, and you always have to remember to
      use <function>lower</> on both the column and the query value.
     </para>
-->
<para>
   它使你的SQL语句冗长，并且你总是在列和查询值上使用<function>lower</>。
</para>
    </listitem>
    <listitem>
     <!--
<para>
      It won't use an index, unless you create a functional index using
      <function>lower</>.
     </para>
-->
<para>
    它不使用索引，除非你使用<function>lower</>创建一个函数索引。
</para>
    </listitem>
    <listitem>
     <!--
<para>
      If you declare a column as <literal>UNIQUE</> or <literal>PRIMARY
      KEY</>, the implicitly generated index is case-sensitive.  So it's
      useless for case-insensitive searches, and it won't enforce
      uniqueness case-insensitively.
     </para>
-->
<para>
    如果你声明列为
<literal>UNIQUE</>或者<literal>PRIMARY KEY</>，隐式产生的索引是大小写敏感的。
因此对不区分大小写搜索无用，并且它不会不区分大小写。
</para>
    </listitem>
   </itemizedlist>

   <!--
<para>
    The <type>citext</> data type allows you to eliminate calls
    to <function>lower</> in SQL queries, and allows a primary key to
    be case-insensitive. <type>citext</> is locale-aware, just
    like <type>text</>, which means that the matching of upper case and
    lower case characters is dependent on the rules of
    the database's <literal>LC_CTYPE</> setting. Again, this behavior is
    identical to the use of <function>lower</> in queries. But because it's
    done transparently by the data type, you don't have to remember to do
    anything special in your queries.
   </para>
-->
<para>
   <type>citext</>数据类型允许你在SQL查询中删除调用<function>lower</>，
   并且允许主键不区分大小写。<type>citext</>是区域意识，
   就像<type>text</>，
   这意味着大写字母和小写字母字符的匹配
   依赖于数据库的<literal>LC_CTYPE</>设置规则。
   另外，这种操作与查询中<function>lower</>的使用是相同的。
   但是因为它通过数据类型透明地完成，
   你无须记得在你的查询中执行任何特别的。
</para>

 </sect2>

 <sect2>
 <!--
  <title>How to Use It</title>
 -->
  <title>如何使用它</title>
  
  
<para>
   <!--
   Here's a simple example of usage:
   -->
   这是用法的一个简单例子：

<programlisting>
CREATE TABLE users (
    nick CITEXT PRIMARY KEY,
    pass TEXT   NOT NULL
);

INSERT INTO users VALUES ( 'larry',  md5(random()::text) );
INSERT INTO users VALUES ( 'Tom',    md5(random()::text) );
INSERT INTO users VALUES ( 'Damian', md5(random()::text) );
INSERT INTO users VALUES ( 'NEAL',   md5(random()::text) );
INSERT INTO users VALUES ( 'Bj&oslash;rn',  md5(random()::text) );

SELECT * FROM users WHERE nick = 'Larry';
</programlisting>
   <!--
   The <command>SELECT</> statement will return one tuple, even though
   the <structfield>nick</> column was set to <literal>larry</> and the query
   was for <literal>Larry</>.
   -->
   <command>SELECT</>语句将返回一个元组，
   尽管<structfield>nick</>列被设置为<literal>larry</>，
   并且查询为<literal>Larry</>。
   
  </para>

 </sect2>

 <sect2>
  <!--
  <title>String Comparison Behavior</title>
  -->
  <title>字符串比较操作</title>
  
  <!--
<para>
   <type>citext</> performs comparisons by converting each string to lower
   case (as though <function>lower</> were called) and then comparing the
   results normally.  Thus, for example, two strings are considered equal
   if <function>lower</> would produce identical results for them.
  </para>
-->
<para>
   <type>citext</>通过转换每个字符串到小写执行比较
   （尽管调用<function>lower</>）
   并且然后通常比较结果。因此，比如，
   考虑两个字符串相等，如果
   <function>lower</>为了它们可能产生相同结果。
</para>

  <!--
<para>
   In order to emulate a case-insensitive collation as closely as possible,
   there are <type>citext</>-specific versions of a number of string-processing
   operators and functions.  So, for example, the regular expression
   operators <literal>~</> and <literal>~*</> exhibit the same behavior when
   applied to <type>citext</>: they both match case-insensitively.
   The same is true
   for <literal>!~</> and <literal>!~*</>, as well as for the
   <literal>LIKE</> operators <literal>~~</> and <literal>~~*</>, and
   <literal>!~~</> and <literal>!~~*</>. If you'd like to match
   case-sensitively, you can cast the operator's arguments to <type>text</>.
  </para>
-->
<para>
    为了尽可能地模拟不区分大小写排序规则，
有一些字符串处理操作符和函数的<type>citext</>特定版本。
所以，比如，当应用于<type>citext</>:他们不区分大小写匹配，
正则表达式运算符<literal>~</>和<literal>~*</>表现出相同操作。
对于<literal>!~</> and <literal>!~*</>以及
   <literal>LIKE</>运算符<literal>~~</>和<literal>~~*</>和
   <literal>!~~</>和<literal>!~~*</>同样是真，如果你想要匹配
   大小写敏感，你可以投射运算符的参数给<type>text</>。

</para>

  <!--
<para>
   Similarly, all of the following functions perform matching
   case-insensitively if their arguments are <type>citext</>:
  </para>
-->
<para>
  类似地，如果它们参数是<type>citext</>，所有下面的函数执行不区分大小写匹配：
</para>

  <itemizedlist>
   <listitem>
  
<para>
      <function>regexp_replace()</>
    </para>

   </listitem>
   <listitem>
  
<para>
      <function>regexp_split_to_array()</>
    </para>

   </listitem>
   <listitem>
  
<para>
      <function>regexp_split_to_table()</>
    </para>

   </listitem>
   <listitem>
   
<para>
      <function>replace()</>
    </para>

   </listitem>
   <listitem>
   
<para>
      <function>split_part()</>
    </para>

   </listitem>
   <listitem>
 
<para>
      <function>strpos()</>
    </para>

   </listitem>
   <listitem>
   
<para>
      <function>translate()</>
    </para>

   </listitem>
  </itemizedlist>

  <!--
<para>
   For the regexp functions, if you want to match case-sensitively, you can
   specify the <quote>c</> flag to force a case-sensitive match.  Otherwise,
   you must cast to <type>text</> before using one of these functions if
   you want case-sensitive behavior.
  </para>
-->
<para>
    对于正则表达式函数，
如果你想要匹配大小写敏感，
你可以声明<quote>c</>标记以
强迫大小写匹配。否则，如果你想要大小写敏感操作，
你必须在使用这些函数之一前投射到<type>text</>。
</para>

 </sect2>

 <sect2>
 <!--
  <title>Limitations</title>
 -->
   <title>限制</title>

   <itemizedlist>
    <listitem>
     <!--
<para>
      <type>citext</>'s case-folding behavior depends on
      the <literal>LC_CTYPE</> setting of your database. How it compares
      values is therefore determined when the database is created.
      It is not truly
      case-insensitive in the terms defined by the Unicode standard.
      Effectively, what this means is that, as long as you're happy with your
      collation, you should be happy with <type>citext</>'s comparisons. But
      if you have data in different languages stored in your database, users
      of one language may find their query results are not as expected if the
      collation is for another language.
     </para>
-->
<para>
    <type>citext</>的折叠操作依赖于
你的数据库的<literal>LC_CTYPE</>设置。当创建数据库时，
决定如何比较值。通过Unicode标准定义
的术语中不是真的大小写不敏感。
实际上，这意味着，
只要你对你的排序规则满意，
你应该对<type>citext</>的比较感到满意。
但是如果你有数据以不同语言存储在数据库中，
如果排序规则为另外一种语言，
那么一种语言的用户可能发现查询结果不如预期。

</para>
    </listitem>

    <listitem>
     <!--
<para>
      As of <productname>PostgreSQL</> 9.1, you can attach a
      <literal>COLLATE</> specification to <type>citext</> columns or data
      values.  Currently, <type>citext</> operators will honor a non-default
      <literal>COLLATE</> specification while comparing case-folded strings,
      but the initial folding to lower case is always done according to the
      database's <literal>LC_CTYPE</> setting (that is, as though
      <literal>COLLATE "default"</> were given).  This may be changed in a
      future release so that both steps follow the input <literal>COLLATE</>
      specification.
     </para>
-->
<para>
    作为<productname>PostgreSQL</> 9.1，
你可以附属<literal>COLLATE</>规范到<type>citext</>
列或者数据值。
当比较折叠字符串时，
<type>citext</>运算符将接受非缺省<literal>COLLATE</>规范，
但小写的起初折叠
总是按照数据库的<literal>LC_CTYPE</>设置被执行
（即，即使给定<literal>COLLATE "default"</> ）。
这可能在未来版本中被改变，因此这两个步骤遵循输入<literal>COLLATE</>
规范。
</para>
    </listitem>

    <listitem>
     <!--
<para>
       <type>citext</> is not as efficient as <type>text</> because the
       operator functions and the B-tree comparison functions must make copies
       of the data and convert it to lower case for comparisons. It is,
       however, slightly more efficient than using <function>lower</> to get
       case-insensitive matching.
     </para>
-->
<para>
     <type>citext</>不像<type>text</>一样有效，
 因为运算符函数和B树比较函数必须开始数据拷贝
 ，并且为了比较将它转换为小写。然而，
 它比起使用<function>lower</>获取大小写不敏感匹配
 更加有效。
</para>
    </listitem>

    <listitem>
     <!--
<para>
      <type>citext</> doesn't help much if you need data to compare
      case-sensitively in some contexts and case-insensitively in other
      contexts.  The standard answer is to use the <type>text</> type and
      manually use the <function>lower</> function when you need to compare
      case-insensitively; this works all right if case-insensitive comparison
      is needed only infrequently.  If you need case-insensitive behavior most
      of the time and case-sensitive infrequently, consider storing the data
      as <type>citext</> and explicitly casting the column to <type>text</>
      when you want case-sensitive comparison.  In either situation, you will
      need two indexes if you want both types of searches to be fast.
    </para>
-->
<para>
    如果你需要数据比较某些情况中
大小写敏感和其他情况中大小写不敏感，
<type>citext</>没有太大帮助。
当你需要不区分大小写比较时，
标准答案是使用<type>text</>类型
并且手动使用<function>lower</>函数。
如果很少需要不区分大小写比较，
那么它执行正确。
如果你需要不区分大小写行为大多数时间并且很少不区分大小写，
当你想要区分大小写比较时，
考虑存储数据为<type>citext</>
并且明确投射该列到<type>text</>。
如果你想要快速搜索的两个类型，
在这两种情况下，你将需要两个索引。
</para>
    </listitem>

    <listitem>
     <!--
<para>
      The schema containing the <type>citext</> operators must be
      in the current <varname>search_path</> (typically <literal>public</>);
      if it is not, the normal case-sensitive <type>text</> operators
      will be invoked instead.
    </para>
-->
<para>
   包含<type>citext</>运算符的模式
   必须在当前的<varname>search_path</> (通常<literal>public</>)中;
   如果不是，相反调用正常的大小写敏感<type>text</>运算符。
</para>
    </listitem>
   </itemizedlist>
 </sect2>

 <sect2>
 <!--
  <title>Author</title>
  -->
  <title>作者</title>

  
<para>
   David E. Wheeler <email>david@kineticode.com</email>
  </para>

  <!--
<para>
    Inspired by the original <type>citext</> module by Donald Fraser.
  </para>
-->
<para>
   灵感来源于Donald Fraser的最初的<type>citext</>模块。
</para>

 </sect2>

</sect1>
