<!-- doc/src/sgml/cube.sgml -->

<sect1 id="cube" xreflabel="cube">
 <title>cube</title>

 <indexterm zone="cube">
  <primary>cube</primary> 
 </indexterm>

 <!--
<para>
  This module implements a data type <type>cube</> for
  representing multidimensional cubes.
 </para>
-->
<para>
    这个模块为了表示多维立方体实现了数据类型<type>cube</>。
</para>

 <sect2>
  <!--
<title>Syntax</title>
-->
<title>语法</title>

  <!--
<para>
   <xref linkend="cube-repr-table"> shows the valid external
   representations for the <type>cube</>
   type.  <replaceable>x</>, <replaceable>y</>, etc. denote
   floating-point numbers.
  </para>
-->
<para>
   <xref linkend="cube-repr-table">为<type>cube</>类型显示有效外部表示。
   <replaceable>x</>, <replaceable>y</>等表示浮点数。
</para>

  <table id="cube-repr-table">
  <!--
   <title>Cube External Representations</title>
  -->
   <title>Cube外部表示</title>
   
   <tgroup cols="2">
    <tbody>
     <row>
      <entry><literal><replaceable>x</></literal></entry>
  
      <!--
  <entry>A one-dimensional point
       (or, zero-length one-dimensional interval)
      </entry>
  -->
  <entry>一维点（或者，零长度一维间隔）
      </entry>
  
     </row>
     <row>
      <entry><literal>(<replaceable>x</>)</literal></entry>
  
  <!--
      <entry>Same as above</entry>
  -->
  <entry>同上</entry>  
     </row>
     <row>
      <entry><literal><replaceable>x1</>,<replaceable>x2</>,...,<replaceable>xn</></literal></entry>
  
  <!--
      <entry>A point in n-dimensional space, represented internally as a
      zero-volume cube
      </entry>
  -->
  <entry>n维空间点，内部表示为零体积立方体
      </entry>
  
     </row>
     <row>
      <entry><literal>(<replaceable>x1</>,<replaceable>x2</>,...,<replaceable>xn</>)</literal></entry>
      <!--
  <entry>Same as above</entry>
  -->
  <entry>同上</entry>
     </row>
     <row>
      <entry><literal>(<replaceable>x</>),(<replaceable>y</>)</literal></entry>
  
  <!--
      <entry>A one-dimensional interval starting at <replaceable>x</> and ending at <replaceable>y</> or vice versa; the
       order does not matter
      </entry>
  -->
  <entry>一维间隔起始于<replaceable>x</>并且结束于<replaceable>y</>或者反之亦然；
   顺序并不重要
      </entry>
  
     </row>
     <row>
      <entry><literal>[(<replaceable>x</>),(<replaceable>y</>)]</literal></entry>
  <!--
      <entry>Same as above</entry>
  -->
  <entry>同上</entry>
     </row>
     <row>
      <entry><literal>(<replaceable>x1</>,...,<replaceable>xn</>),(<replaceable>y1</>,...,<replaceable>yn</>)</literal></entry>
      
  <!--
  <entry>An n-dimensional cube represented by a pair of its diagonally
       opposite corners
      </entry>
  -->
  <entry>一个n维立方体通过一对斜对角线地对立角表示
      </entry>
  
     </row>
     <row>
      <entry><literal>[(<replaceable>x1</>,...,<replaceable>xn</>),(<replaceable>y1</>,...,<replaceable>yn</>)]</literal></entry>
      <!--
  <entry>Same as above</entry>
  -->
  <entry>同上</entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <!--
<para>
   It does not matter which order the opposite corners of a cube are
   entered in.  The <type>cube</> functions
   automatically swap values if needed to create a uniform
   <quote>lower left &mdash; upper right</> internal representation.
  </para>
-->
<para>
   它无关立方体的相对角进入的哪个顺序。
   如果需要创建一个统一的<quote>左下 &mdash; 右上</>内部表示，
   该<type>cube</>函数自动交换值。
</para>

  <!--
<para>
   White space is ignored, so <literal>[(<replaceable>x</>),(<replaceable>y</>)]</literal> is the same as
   <literal>[ ( <replaceable>x</> ), ( <replaceable>y</> ) ]</literal>.
  </para>
-->
<para>
  忽略空格，因此<literal>[(<replaceable>x</>),(<replaceable>y</>)]</literal>和
   <literal>[ ( <replaceable>x</> ), ( <replaceable>y</> ) ]</literal>是一样的。
</para>
 </sect2>

 <sect2>
 <!--
  <title>Precision</title>
  -->
  <title>精确度</title>

  <!--
<para>
   Values are stored internally as 64-bit floating point numbers. This means
   that numbers with more than about 16 significant digits will be truncated.
  </para>
-->
<para>
   值内部被存储为64位浮点数。
   这意味着超过16位有效数字将被截断。
</para>
 </sect2>

 <sect2>
  <!--
<title>Usage</title>
-->
<title>用法</title>

  <!--
<para>
   The <filename>cube</> module includes a GiST index operator class for
   <type>cube</> values.
   The operators supported by the GiST operator class are shown in <xref linkend="cube-gist-operators">.
  </para>
-->
<para>
    <filename>cube</>模块包含<type>cube</>值的GiST索引操作类。
通过GiST操作符类支持的操作符显示在<xref linkend="cube-gist-operators">中。
</para>

  <table id="cube-gist-operators">
  <!--
   <title>Cube GiST Operators</title>
   -->
   <title>Cube GiST 运算符</title>
   <tgroup cols="2">
    <thead>
     <row>
 <!--
      <entry>Operator</entry>
      <entry>Description</entry>
  -->
  <entry>运算符</entry>
      <entry>描述</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><literal>a = b</></entry>
  <!--
      <entry>The cubes a and b are identical.</entry>
  -->
   <entry>立方体a和b是相同的。</entry>
  
     </row>

     <row>
      <entry><literal>a &amp;&amp; b</></entry>
  <!--
      <entry>The cubes a and b overlap.</entry>
  -->
  <entry>立方体a和b重叠</entry>
     </row>

     <row>
      <entry><literal>a @&gt; b</></entry>
  <!--
      <entry>The cube a contains the cube b.</entry>
  -->
  <entry>立方体a包含立方体b。</entry>
     </row>

     <row>
      <entry><literal>a &lt;@ b</></entry>
  <!--
      <entry>The cube a is contained in the cube b.</entry>
  -->
  <entry>立方体a被包含在立方体b中。</entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <!--
<para>
   (Before PostgreSQL 8.2, the containment operators <literal>@&gt;</> and <literal>&lt;@</> were
   respectively called <literal>@</> and <literal>~</>.  These names are still available, but are
   deprecated and will eventually be retired.  Notice that the old names
   are reversed from the convention formerly followed by the core geometric
   data types!)
  </para>
-->
<para>
  (PostgreSQL 8.2之前，
  包含操作符<literal>@&gt;</>和<literal>&lt;@</>分别称为
   <literal>@</>和<literal>~</>。
   这些名字仍然可用，但是被否决并且最终被废弃。
   请注意旧的名称从先前遵循核心几何数据类型的规定中被反转！)
</para>

  
<para>
   <!--
   The standard B-tree operators are also provided, for example
   -->
   提供标准B树运算符，比如
   
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
  <!--
       <entry>Operator</entry>
       <entry>Description</entry>
   -->
   <entry>运算符</entry>
       <entry>描述</entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry><literal>[a, b] &lt; [c, d]</literal></entry>
   <!--
       <entry>Less than</entry>
   -->
   <entry>小于</entry>
      </row>

      <row>
       <entry><literal>[a, b] &gt; [c, d]</literal></entry>
   <!--
       <entry>Greater than</entry>
   -->
   <entry>大于</entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
   <!--
   These operators do not make a lot of sense for any practical
   purpose but sorting. These operators first compare (a) to (c),
   and if these are equal, compare (b) to (d). That results in
   reasonably good sorting in most cases, which is useful if
   you want to use ORDER BY with this type.
   -->
   这些操作符没有任何实际目的意义但排序。
   这些操作符首先比较(a)和(c)，如果是相等的，
   那么比较(b)和(d)。
   导致在某些情况下合理排序，
   如果你想使用这种类型的ORDER BY，那么它是有用的。
   
  </para>


  <!--
<para>
   <xref linkend="cube-functions-table"> shows the available functions.
  </para>
-->
<para>
   <xref linkend="cube-functions-table">显示可用函数。
</para>

  <table id="cube-functions-table">
  <!--
   <title>Cube Functions</title>
   -->
   <title>Cube函数</title>
   <tgroup cols="2">
    <tbody>
     <row>
 <!--
      <entry><literal>cube(float8) returns cube</literal></entry>
  -->
  <entry><literal>cube(float8)返回cube</literal></entry>
  
  <!--
      <entry>Makes a one dimensional cube with both coordinates the same.
       <literal>cube(1) == '(1)'</literal>
      </entry>
  -->
  <entry>两个坐标相同的一维立方体。
       <literal>cube(1) == '(1)'</literal>
      </entry>
     </row>

     <row>
 <!--
      <entry><literal>cube(float8, float8) returns cube</literal></entry>
      <entry>Makes a one dimensional cube.
       <literal>cube(1,2) == '(1),(2)'</literal>
      </entry>
  -->
  <entry><literal>cube(float8, float8)返回cube</literal></entry>
      <entry>一维立方体。
       <literal>cube(1,2) == '(1),(2)'</literal>
      </entry>
     </row>

     <row>
 <!--
      <entry><literal>cube(float8[]) returns cube</literal></entry>
      <entry>Makes a zero-volume cube using the coordinates
       defined by the array.
       <literal>cube(ARRAY[1,2]) == '(1,2)'</literal>
      </entry>
  -->
   <entry><literal>cube(float8[])返回cube</literal></entry>
      <entry>使用数组定义的坐标的零体积立方体。
       <literal>cube(ARRAY[1,2]) == '(1,2)'</literal>
      </entry>
     </row>

     <row>
 <!--
      <entry><literal>cube(float8[], float8[]) returns cube</literal></entry>
      <entry>Makes a cube with upper right and lower left
       coordinates as defined by the two arrays, which must be of the
       same length.
       <literal>cube('{1,2}'::float[], '{3,4}'::float[]) == '(1,2),(3,4)'
       </literal>
      </entry>
  -->
   <entry><literal>cube(float8[], float8[])返回cube</literal></entry>
      <entry>通过两个数组定义的右上和左下坐标的立方体，必须是相同长度。
       <literal>cube('{1,2}'::float[], '{3,4}'::float[]) == '(1,2),(3,4)'
       </literal>
      </entry>
     </row>

     <row>
 <!--
      <entry><literal>cube(cube, float8) returns cube</literal></entry>
      <entry>Makes a new cube by adding a dimension on to an
       existing cube with the same values for both parts of the new coordinate.
       This is useful for building cubes piece by piece from calculated values.
       <literal>cube('(1)',2) == '(1,2),(1,2)'</literal>
      </entry>
  -->
  <entry><literal>cube(cube, float8)返回cube</literal></entry>
      <entry>通过添加一个维度到新坐标两个部分相同值的已存在立方体来构建一个新的立方体
       这对于逐渐地从计算值建构立方体是有用的。
       <literal>cube('(1)',2) == '(1,2),(1,2)'</literal>
      </entry>
     </row>

     <row>
 <!--
      <entry><literal>cube(cube, float8, float8) returns cube</literal></entry>
      <entry>Makes a new cube by adding a dimension on to an
       existing cube. This is useful for building cubes piece by piece from
       calculated values. <literal>cube('(1,2)',3,4) == '(1,3),(2,4)'</literal>
      </entry>
  -->
  <entry><literal>cube(cube, float8, float8)返回cube</literal></entry>
      <entry>通过添加一个维度到已存在立方体上构建一个新的立方体。
  这对于逐渐地从计算值建构立方体是有用的。
  <literal>cube('(1,2)',3,4) == '(1,3),(2,4)'</literal>
      </entry>
  
  
     </row>

     <row>
 <!--
      <entry><literal>cube_dim(cube) returns int</literal></entry>
      <entry>Returns the number of dimensions of the cube
      </entry>
  -->
  <entry><literal>cube_dim(cube)返回int</literal></entry>
      <entry>返回立方体的维数
      </entry>
     </row>

     <row>
 <!--
      <entry><literal>cube_ll_coord(cube, int) returns double </literal></entry>
      <entry>Returns the n'th coordinate value for the lower left
       corner of a cube
      </entry>
  -->
  <entry><literal>cube_ll_coord(cube, int)返回double </literal></entry>
      <entry>返回立方体左下角的第n个坐标值
      </entry>
     </row>

    <row>
<!--
      <entry><literal>cube_ur_coord(cube, int) returns double
      </literal></entry>
      <entry>Returns the n'th coordinate value for the
       upper right corner of a cube
      </entry>
  -->
  <entry><literal>cube_ur_coord(cube, int)返回double
      </literal></entry>
      <entry>返回立方体右上角的第n个坐标值
      </entry>
     </row>

     <row>
 <!--
      <entry><literal>cube_is_point(cube) returns bool</literal></entry>
      <entry>Returns true if a cube is a point, that is,
       the two defining corners are the same.</entry>
   -->
   <entry><literal>cube_is_point(cube)返回bool</literal></entry>
      <entry>如果cube是一点，那么返回真。也就是说，两个定义的角是一样的。</entry>
     </row>

     <row>
 <!--
      <entry><literal>cube_distance(cube, cube) returns double</literal></entry>
      <entry>Returns the distance between two cubes. If both
       cubes are points, this is the normal distance function.
      </entry>
  -->
  <entry><literal>cube_distance(cube, cube)返回double</literal></entry>
      <entry>返回两个立方体之间的距离。
  如果两个立方体是点，那么这是一个正常距离函数。
      </entry>
  
     </row>

     <row>
 <!--
      <entry><literal>cube_subset(cube, int[]) returns cube
      </literal></entry>
  -->
   <entry><literal>cube_subset(cube, int[])返回cube
      </literal></entry>
  
  <!--
      <entry>Makes a new cube from an existing cube, using a list of
       dimension indexes from an array. Can be used to find both the LL and UR
       coordinates of a single dimension, e.g.
       <literal>cube_subset(cube('(1,3,5),(6,7,8)'), ARRAY[2]) = '(3),(7)'</>.
       Or can be used to drop dimensions, or reorder them as desired, e.g.
       <literal>cube_subset(cube('(1,3,5),(6,7,8)'), ARRAY[3,2,1,1]) = '(5, 3,
       1, 1),(8, 7, 6, 6)'</>.
      </entry>
  -->
  <entry>从一个已经存在立方体构建新的立方体，使用来自数组的维度索引列表。
  可以用于查找单维的LL和UR坐标，比如，
       <literal>cube_subset(cube('(1,3,5),(6,7,8)'), ARRAY[2]) = '(3),(7)'</>.
       或者可以用于降低维度，或者按照需要重新排序它们，比如
       <literal>cube_subset(cube('(1,3,5),(6,7,8)'), ARRAY[3,2,1,1]) = '(5, 3,
       1, 1),(8, 7, 6, 6)'</>.
      </entry>
  
     </row>

     <row>
 <!--
      <entry><literal>cube_union(cube, cube) returns cube</literal></entry>
      <entry>Produces the union of two cubes
      </entry>
  -->
  <entry><literal>cube_union(cube, cube)返回cube</literal></entry>
      <entry>产生两个立方体并集
      </entry>
     </row>

     <row>
 <!--
      <entry><literal>cube_inter(cube, cube) returns cube</literal></entry>
      <entry>Produces the intersection of two cubes
      </entry>
  -->
  <entry><literal>cube_inter(cube, cube)返回cube</literal></entry>
      <entry>产生两个立方体交集
      </entry>
     </row>

     <row>
 <!--
      <entry><literal>cube_enlarge(cube c, double r, int n) returns cube</literal></entry>
  -->
   <entry><literal>cube_enlarge(cube c, double r, int n)返回cube</literal></entry>
  <!--
      <entry>Increases the size of a cube by a specified radius in at least
       n dimensions. If the radius is negative the cube is shrunk instead. This
       is useful for creating bounding boxes around a point for searching for
       nearby points. All defined dimensions are changed by the radius r.
       LL coordinates are decreased by r and UR coordinates are increased by r.
       If a LL coordinate is increased to larger than the corresponding UR
       coordinate (this can only happen when r &lt; 0) than both coordinates
       are set to their average.  If n is greater than the number of defined
       dimensions and the cube is being increased (r &gt;= 0) then 0 is used
       as the base for the extra coordinates.
      </entry>
  -->
  
  <entry>通过至少n维的指定半径增加立方体大小。
  如果半径是负数立方体反而缩减。
  在点周围搜索临近点创建边界区域是很有用的。
  所有定义维数通过半径r来改变。
  LL坐标减少了r，UR坐标增加了r。
  如果LL坐标增加到可以大于相应的UR坐标（当r &lt; 0时，这可以发生）
  比起两个坐标系被设置为平均来说，
  如果n大于定义维度数，并且立方体正被增加(r &gt;= 0)，
  然后使用0作为额外坐标基础。
  </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </sect2>

 <sect2>
 <!--
  <title>Defaults</title>
  -->
  <title>缺省</title>
  <!--
<para>
   I believe this union:
  </para>
-->
<para>
   我相信这个联合：
</para>
<programlisting>
select cube_union('(0,5,2),(2,3,1)', '0');
cube_union
-------------------
(0, 0, 0),(2, 5, 2)
(1 row)
</programlisting>

   <!--
<para>
    does not contradict common sense, neither does the intersection
   </para>
-->
<para>
    不违背常识，也不违背交集
</para>

<programlisting>
select cube_inter('(0,-1),(1,1)', '(-2),(2)');
cube_inter
-------------
(0, 0),(1, 0)
(1 row)
</programlisting>

   <!--
<para>
    In all binary operations on differently-dimensioned cubes, I assume the
    lower-dimensional one to be a Cartesian projection, i. e., having zeroes
    in place of coordinates omitted in the string representation. The above
    examples are equivalent to:
   </para>
-->
<para>
    在不同的维度立方体的所有二进制运算中，我认为降低笛卡尔积投影维数，比如，
在字符串表示中忽略坐标的地方归零。上面例子等同于：
</para>

<programlisting>
cube_union('(0,5,2),(2,3,1)','(0,0,0),(0,0,0)');
cube_inter('(0,-1),(1,1)','(-2,0),(2,0)');
</programlisting>

   <!--
<para>
    The following containment predicate uses the point syntax,
    while in fact the second argument is internally represented by a box.
    This syntax makes it unnecessary to define a separate point type
    and functions for (box,point) predicates.
   </para>
-->
<para>
   下面的包含谓词使用point语法，
   而实际上第二个参数通过box内部表示。
   这个语法没必要定义单独的point类型
   以及(box,point)谓词函数。
</para>

<programlisting>
select cube_contains('(0,0),(1,1)', '0.5,0.5');
cube_contains
--------------
t
(1 row)
</programlisting>
 </sect2>

 <sect2>
  <!--
<title>Notes</title>
-->
<title>注意</title>

  <!--
<para>
   For examples of usage, see the regression test <filename>sql/cube.sql</>.
  </para>
-->
<para>
   对于用法实例，参阅回归测试<filename>sql/cube.sql</>。
</para>

  <!--
<para>
   To make it harder for people to break things, there
   is a limit of 100 on the number of dimensions of cubes. This is set
   in <filename>cubedata.h</> if you need something bigger.
  </para>
-->
<para>
   为了使人们突破该事物更加难，
   在立方体维度数量上有100的限制。
   如果你需要大一些的，
   可以在<filename>cubedata.h</>中设置。
</para>
 </sect2>

 <sect2>
 <!--
  <title>Credits</title>
  -->
  <title>赞扬</title>

  <!--
<para>
   Original author: Gene Selkov, Jr. <email>selkovjr@mcs.anl.gov</email>,
   Mathematics and Computer Science Division, Argonne National Laboratory.
  </para>
-->
<para>
   原作者：Gene Selkov, Jr. <email>selkovjr@mcs.anl.gov</email>，
   数学和计算机科学系，Argonne国家实验室。
</para>

  <!--
<para>
   My thanks are primarily to Prof. Joe Hellerstein
   (<ulink url="http://db.cs.berkeley.edu/jmh/"></ulink>) for elucidating the
   gist of the GiST (<ulink url="http://gist.cs.berkeley.edu/"></ulink>), and
   to his former student, Andy Dong (<ulink
   url="http://best.me.berkeley.edu/~adong/"></ulink>), for his example
   written for Illustra,
   <ulink url="http://best.berkeley.edu/~adong/rtree/index.html"></ulink>.
   I am also grateful to all Postgres developers, present and past, for
   enabling myself to create my own world and live undisturbed in it. And I
   would like to acknowledge my gratitude to Argonne Lab and to the
   U.S. Department of Energy for the years of faithful support of my database
   research.
  </para>
-->
<para>
   首先感谢
   Prof. Joe Hellerstein(<ulink url="http://db.cs.berkeley.edu/jmh/"></ulink>)
   阐明GiST (<ulink url="http://gist.cs.berkeley.edu/"></ulink>)的要点，
   和他以前的学生Andy Dong
   (<ulink url="http://best.me.berkeley.edu/~adong/"></ulink>)，
   比如书面说明例子，<ulink url="http://best.berkeley.edu/~adong/rtree/index.html"></ulink>。
   我还要感谢所有现在的和以前的Postgres开发人员，使我可以创造我的世界并且在这个领域生存。
   并且我还想要感谢Argonne Lab和能源
   U.S. Department对我的数据库研究多年的忠实支持。 
   
</para>

  <!--
<para>
   Minor updates to this package were made by Bruno Wolff III
   <email>bruno@wolff.to</email> in August/September of 2002. These include
   changing the precision from single precision to double precision and adding
   some new functions.
  </para>
-->
<para>
   这个包较小更新是由Bruno Wolff III
   <email>bruno@wolff.to</email>在2002年八月/九月完成的。
   这些包含从单精度到双精度改变精度以及添加一些新的函数。
</para>

  <!--
<para>
   Additional updates were made by Joshua Reich <email>josh@root.net</email> in
   July 2006. These include <literal>cube(float8[], float8[])</literal> and
   cleaning up the code to use the V1 call protocol instead of the deprecated
   V0 protocol.
  </para>
-->
<para>
    额外更新是由Joshua Reich <email>josh@root.net</email>在2006年7月进行的。
这些包含<literal>cube(float8[], float8[])</literal>并且
使用V1调用协议而不是过时的V0协议来清理代码。
</para>
 </sect2>

</sect1>
