<!-- doc/src/sgml/pgbuffercache.sgml -->

<sect1 id="pgbuffercache" xreflabel="pg_buffercache">
 <title>pg_buffercache</title>

 <indexterm zone="pgbuffercache">
  <primary>pg_buffercache</primary>
 </indexterm>

 <!--
<para>
  The <filename>pg_buffercache</filename> module provides a means for
  examining what's happening in the shared buffer cache in real time.
 </para>
-->
<para>
<filename>pg_buffercache</filename>模块提供实时检查共享缓存内发生了什么的用途。
</para>

 <indexterm>
  <primary>pg_buffercache_pages</primary>
 </indexterm>

 <!--
<para>
  The module provides a C function <function>pg_buffercache_pages</function>
  that returns a set of records, plus a view
  <structname>pg_buffercache</structname> that wraps the function for
  convenient use.
 </para>
-->
<para>
该模块提供一个C函数<function>pg_buffercache_pages</function>，该函数返回一个记录集，
加上一个包裹该函数为了方便使用的视图<structname>pg_buffercache</structname>。
</para>

 <!--
<para>
  By default public access is revoked from both of these, just in case there
  are security issues lurking.
 </para>
-->
<para>
缺省情况下取消这两种的公共访问，以防隐藏的安全问题。
</para>

 <sect2>
  <!--
  <title>The <structname>pg_buffercache</structname> View</title>
  -->
  <title> <structname>pg_buffercache</structname> 视图</title>

  <!--
<para>
   The definitions of the columns exposed by the view are shown in <xref linkend="pgbuffercache-columns">.
  </para>
-->
<para>
被视图暴露的字段的定义显示在<xref linkend="pgbuffercache-columns">里。
</para>

  <table id="pgbuffercache-columns">
   <!--
   <title><structname>pg_buffercache</> Columns</title>
   -->
   <title><structname>pg_buffercache</> 字段</title>

   <tgroup cols="4">
    <thead>
     <row>
      <!--
  <entry>Name</entry>
      <entry>Type</entry>
      <entry>References</entry>
      <entry>Description</entry>
  -->
  <entry>名字</entry>
      <entry>类型</entry>
      <entry>引用</entry>
      <entry>描述</entry>
     </row>
    </thead>
    <tbody>

     <row>
      <entry><structfield>bufferid</structfield></entry>
      <entry><type>integer</type></entry>
      <entry></entry>
      <!-- 
  <entry>ID, in the range 1..<varname>shared_buffers</></entry>
  -->
  <entry>ID, 范围为 1..<varname>shared_buffers</></entry>
     </row>

     <row>
      <entry><structfield>relfilenode</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal>pg_class.relfilenode</literal></entry>
      <!-- 
  <entry>Filenode number of the relation</entry>
  -->
  <entry>关系的文件节点号</entry>
     </row>

     <row>
      <entry><structfield>reltablespace</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal>pg_tablespace.oid</literal></entry>
      <!--
  <entry>Tablespace OID of the relation</entry>
  -->
  <entry>关系的表空间OID</entry>
     </row>

     <row>
      <entry><structfield>reldatabase</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal>pg_database.oid</literal></entry>
      <!-- 
  <entry>Database OID of the relation</entry>
  -->
  <entry>关系的数据库OID</entry>
     </row>

     <row>
      <entry><structfield>relblocknumber</structfield></entry>
      <entry><type>bigint</type></entry>
      <entry></entry>
      <!-- 
  <entry>Page number within the relation</entry>
  -->
  <entry>关系的页码</entry>
     </row>

     <row>
      <entry><structfield>relforknumber</structfield></entry>
      <entry><type>smallint</type></entry>
      <entry></entry>
      <!--
  <entry>Fork number within the relation;  see
      <filename>include/storage/relfilenode.h</></entry>
  -->
  <entry>关系的分支编号; 参阅
      <filename>include/storage/relfilenode.h</></entry>
     </row>

     <row>
      <entry><structfield>isdirty</structfield></entry>
      <entry><type>boolean</type></entry>
      <entry></entry>
      <!--
  <entry>Is the page dirty?</entry>
  -->
  <entry>页脏了吗？</entry>
     </row>

     <row>
      <entry><structfield>usagecount</structfield></entry>
      <entry><type>smallint</type></entry>
      <entry></entry>
      <!-- 
  <entry>Clock-sweep access count</entry>
  -->
  <entry>时钟下摆访问计数</entry>
     </row>

    </tbody>
   </tgroup>
  </table>

  <!--
<para>
   There is one row for each buffer in the shared cache. Unused buffers are
   shown with all fields null except <structfield>bufferid</>.  Shared system
   catalogs are shown as belonging to database zero.
  </para>
-->
<para>
在共享缓存中每个缓冲区都有一行记录。未使用的缓冲区显示为所有字段为空，除了<structfield>bufferid</>。
共享的系统目录显示为属于数据库零。
</para>

  <!--
<para>
   Because the cache is shared by all the databases, there will normally be
   pages from relations not belonging to the current database.  This means
   that there may not be matching join rows in <structname>pg_class</> for
   some rows, or that there could even be incorrect joins.  If you are
   trying to join against <structname>pg_class</>, it's a good idea to
   restrict the join to rows having <structfield>reldatabase</> equal to
   the current database's OID or zero.
  </para>
-->
<para>
因为缓存被所有数据库共享，通常有几页的关系不属于当前数据库。
这意味着某些行在<structname>pg_class</>中没有匹配的连接行，
或者甚至有不正确的连接。如果你尝试连接<structname>pg_class</>，
限制连接到的行的<structfield>reldatabase</>等于当前数据库的OID或0是个好主意。
</para>

  <!--
<para>
   When the <structname>pg_buffercache</> view is accessed, internal buffer
   manager locks are taken for long enough to copy all the buffer state
   data that the view will display.
   This ensures that the view produces a consistent set of results, while not
   blocking normal buffer activity longer than necessary.  Nonetheless there
   could be some impact on database performance if this view is read often.
  </para>
-->
<para>
当访问<structname>pg_buffercache</>视图时，认为内部缓冲区锁管理器足够长，
能够拷贝视图将显示的所有的缓冲区状态数据。这保证了视图产生一个一致的结果集，
当不再需要阻塞正常的缓冲区活动时。但是，如果频繁的阅读这个视图，
可能会对数据库性能造成一些影响。
</para>
 </sect2>

 <sect2>
  <!--
  <title>Sample Output</title>
  -->
  <title>示例输出</title>

<screen>
regression=# SELECT c.relname, count(*) AS buffers
             FROM pg_buffercache b INNER JOIN pg_class c
             ON b.relfilenode = pg_relation_filenode(c.oid) AND
                b.reldatabase IN (0, (SELECT oid FROM pg_database
                                      WHERE datname = current_database()))
             GROUP BY c.relname
             ORDER BY 2 DESC
             LIMIT 10;

             relname             | buffers
---------------------------------+---------
 tenk2                           |     345
 tenk1                           |     141
 pg_proc                         |      46
 pg_class                        |      45
 pg_attribute                    |      43
 pg_class_relname_nsp_index      |      30
 pg_proc_proname_args_nsp_index  |      28
 pg_attribute_relid_attnam_index |      26
 pg_depend                       |      22
 pg_depend_reference_index       |      20
(10 rows)
</screen>
 </sect2>

 <sect2>
  <!--
  <title>Authors</title>
  -->
  <title>作者</title>
  
<para>
   Mark Kirkwood <email>markir@paradise.net.nz</email>
  </para>

  <!--
<para>
   Design suggestions: Neil Conway <email>neilc@samurai.com</email>
  </para>
-->
<para>
设计建议：Neil Conway <email>neilc@samurai.com</email>
</para>

  <!--
<para>
   Debugging advice: Tom Lane <email>tgl@sss.pgh.pa.us</email>
  </para>
-->
<para>
调试建议：Tom Lane <email>tgl@sss.pgh.pa.us</email>
</para>
 </sect2>

</sect1>
