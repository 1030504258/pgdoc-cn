<!-- doc/src/sgml/seg.sgml -->

<sect1 id="seg" xreflabel="seg">
 <title>seg</title>

 <indexterm zone="seg">
  <primary>seg</primary>
 </indexterm>

 <para>
 <!--This module implements a data type <type>seg</> for
  representing line segments, or floating point intervals.
  <type>seg</> can represent uncertainty in the interval endpoints,
  making it especially useful for representing laboratory measurements.
 -->
  这个模块为定义线段和浮点类型的时间间隔提供了一种数据类型 <type>seg</>，
  这种数据类型由于可以代表不确定终点的区间，所以在做实验测量的时候特别有用。
 </para>

 <sect2>
  <title><--!Rationale-->原理</title>
  
  <para>
   <!--The geometry of measurements is usually more complex than that of a
   point in a numeric continuum. A measurement is usually a segment of
   that continuum with somewhat fuzzy limits. The measurements come out
   as intervals because of uncertainty and randomness, as well as because
   the value being measured may naturally be an interval indicating some
   condition, such as the temperature range of stability of a protein.-->
   几何学测量要比测量连续的点复杂的多，测量出的结果通常是一些模糊限制的连续值
   组成的区间值。这种区间的产生可能是由于测量出结果的不确定性，随机性，也可能
   要测量的值本身就是以区间的形式作为条件的，如测量蛋白质稳定性的温度范围。

  </para>

  <para>
   <!--Using just common sense, it appears more convenient to store such data
   as intervals, rather than pairs of numbers. In practice, it even turns
   out more efficient in most applications.-->
   一般来说，用这个数据类型存储区间值比用双引号更方便。实际上，在大部分的应用
   中这么使用也更有效率。
  </para>

  <para>
   <!--Further along the line of common sense, the fuzziness of the limits
   suggests that the use of traditional numeric data types leads to a
   certain loss of information. Consider this: your instrument reads
   6.50, and you input this reading into the database. What do you get
   when you fetch it? Watch:-->
   进一步说，传统数值类型存储数据可能对一些模糊限制的值产生偏差，你获取的会
   值是6.50并且存入数据库，当你读出的时候会是什么，看下面例子：
<screen>
test=> select 6.50 :: float8 as "pH";
 pH
---
6.5
(1 row)
</screen>

   <!--In the world of measurements, 6.50 is not the same as 6.5. It may
   sometimes be critically different. The experimenters usually write
   down (and publish) the digits they trust. 6.50 is actually a fuzzy
   interval contained within a bigger and even fuzzier interval, 6.5,
   with their center points being (probably) the only common feature they
   share. We definitely do not want such different data items to appear the
   same.-->
   在精确测量中，6.50和6.5代表的意思是不一样的，而且有时差异会很大。测量者
   记下或者公布6.50代表了一个更大甚至更模糊的区间值，6.5只是代表了6.50的一
   个中心点。像这种不同数据的同化表达是我们绝对不想看到的。
  </para>

  <para>
   <!--Conclusion? It is nice to have a special data type that can record the
   limits of an interval with arbitrarily variable precision. Variable in
   the sense that each data element records its own precision.-->
   本章的特殊数据类型可以用来记录任意可变精度的间隔值，而且记录的每个数据都可以
   使用自己的精度。
  </para>
   
  <para>
   <!--Check this out:-->
   查看结果：

<screen>
test=> select '6.25 .. 6.50'::seg as "pH";
          pH
------------
6.25 .. 6.50
(1 row)
</screen>
  </para>
 </sect2>

 <sect2>
  <title><!--Syntax-->语法</title>
  
  <para>
   <!--The external representation of an interval is formed using one or two
   floating-point numbers joined by the range operator (<literal>..</literal>
   or <literal>...</literal>).  Alternatively, it can be specified as a
   center point plus or minus a deviation.
   Optional certainty indicators (<literal>&lt;</literal>,
   <literal>&gt;</literal> or <literal>~</literal>) can be stored as well.
   (Certainty indicators are ignored by all the built-in operators, however.)
   <xref linkend="seg-repr-table"> gives an overview of allowed
   representations; <xref linkend="seg-input-examples"> shows some
   examples.-->
   使用一个或者二个精度数代表一个区间,连接格式（<literal>..</literal>或
   <literal>...</literal>）。另外也可以用值和偏移符号表示（<literal>&lt;</literal>，
   <literal>&gt;</literal> 或 <literal>~</literal>）。（正确的符号会被所有内建
   的操作忽略。）表<xref linkend="seg-repr-table">和<xref linkend="seg-input-examples">
   给出了区间表示的方法和一些例子。
  </para>

  <para>
   <!--In <xref linkend="seg-repr-table">, <replaceable>x</>, <replaceable>y</>, and
   <replaceable>delta</> denote
   floating-point numbers.  <replaceable>x</> and <replaceable>y</>, but
   not <replaceable>delta</>, can be preceded by a certainty indicator.-->
   在表<xref linkend="seg-repr-table">中 <replaceable>x</>, <replaceable>y</>和
   <replaceable>delta</>代表双精度数。可以在<replaceable>x</>, <replaceable>y</>之前
   添加正确的操作符。
  </para>

  <table id="seg-repr-table">
   <title><type>seg</> External Representations</title>
   <tgroup cols="2">
    <tbody>
     <row>
      <entry><literal><replaceable>x</></literal></entry>
      <entry><!--Single value (zero-length interval)-->单个值（间隔为0）
      </entry>
     </row>
     <row>
      <entry><literal><replaceable>x</> .. <replaceable>y</></literal></entry>
      <entry><!--Interval from <replaceable>x</> to <replaceable>y</>-->区间<replaceable>x</> 到 <replaceable>y</>
      </entry>
     </row>
     <row>
      <entry><literal><replaceable>x</> (+-) <replaceable>delta</></literal></entry>
      <entry><!--Interval from <replaceable>x</> - <replaceable>delta</> to
      <replaceable>x</> + <replaceable>delta</>-->区间 <replaceable>x</> - <replaceable>delta</> to
      <replaceable>x</> + <replaceable>delta</>
      </entry>
     </row>
     <row>
      <entry><literal><replaceable>x</> ..</literal></entry>
      <entry><!--Open interval with lower bound <replaceable>x</>--> <replaceable>x</>开区间无下限
      </entry>
     </row>
     <row>
      <entry><literal>.. <replaceable>x</></literal></entry>
      <entry><!--Open interval with upper bound <replaceable>x</>--> <replaceable>x</>开区间无上限
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <table id="seg-input-examples">
   <title>Examples of Valid <type>seg</> Input</title>
   <tgroup cols="2">
    <tbody>
     <row>
      <entry><literal>5.0</literal></entry>
      <entry>
       <!--Creates a zero-length segment (a point, if you will)-->
       零长度的区间（一个点）
      </entry>
     </row>
     <row>
      <entry><literal>~5.0</literal></entry>
      <entry>
       <!--Creates a zero-length segment and records
       <literal>~</> in the data.  <literal>~</literal> is ignored
       by <type>seg</> operations, but
       is preserved as a comment.-->
       <literal>~</literal>作为一个标记存在，5.0的点和记录
      </entry>
     </row>
     <row>
      <entry><literal>&lt;5.0</literal></entry>
      <entry>
       <!--Creates a point at 5.0.  <literal>&lt;</literal> is ignored but
       is preserved as a comment.-->
       <literal>&lt;</literal>作为一保留个标记存在，比点5.0小的      
      </entry>
     </row>
     <row>
      <entry><literal>&gt;5.0</literal></entry>
      <entry>
       <!--Creates a point at 5.0.  <literal>&gt;</literal> is ignored but
       is preserved as a comment.-->
       <literal>&gt;</literal>作为一个保留标记存在，比点5.0大的
      </entry>
     </row>
     <row>
      <entry><literal>5(+-)0.3</literal></entry>
      <entry>
        <!--Creates an interval <literal>4.7 .. 5.3</literal>.
        Note that the <literal>(+-)</> notation isn't preserved.-->
        同区间 <literal>4.7 .. 5.3</literal>， <literal>(+-)</>不是保留标记
      </entry>
     </row>
     <row>
      <entry><literal>50 .. </literal></entry>
      <entry><!--Everything that is greater than or equal to 50-->
       区间大于50
      </entry>
     </row>
     <row>
      <entry><literal>.. 0</literal></entry>
      <entry><!--Everything that is less than or equal to 0-->
       区间小于0
      </entry>
     </row>
     <row>
      <entry><literal>1.5e-2 .. 2E-2 </literal></entry>
      <entry><!--Creates an interval <literal>0.015 .. 0.02</literal>-->
       表示区间<literal>0.015 .. 0.02</literal>
      </entry>
     </row>
     <row>
      <entry><literal>1 ... 2</literal></entry>
      <entry>
       <!--The same as <literal>1...2</literal>, or <literal>1 .. 2</literal>,
       or <literal>1..2</literal>
       (spaces around the range operator are ignored)-->
        <literal>1...2</literal>,<literal>1 .. 2</literal>,<literal>1..2</literal>
        表达区间相同（空格会被忽略）
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <para>
   <!--Because <literal>...</> is widely used in data sources, it is allowed
   as an alternative spelling of <literal>..</>.  Unfortunately, this
   creates a parsing ambiguity: it is not clear whether the upper bound
   in <literal>0...23</> is meant to be <literal>23</> or <literal>0.23</>.
   This is resolved by requiring at least one digit before the decimal
   point in all numbers in <type>seg</> input.-->
   在数据源中<literal>...</>被广泛使用，他的作用和另外一种拼写 <literal>..</>
   相同。但这可能产生歧义如<literal>0...23</>是表示<literal>23</>还是<literal>0.23</>.
   所以在 <type>seg</>数据类型中所有十进制小数的小数点前都需要有一个数字。
  </para>

  <para>
   <!--As a sanity check, <type>seg</> rejects intervals with the lower bound
   greater than the upper, for example <literal>5 .. 2</>.-->
   <type>seg</>不允许表示的区间由大到小表示，如 <literal>5 .. 2</>。
  </para>

 </sect2>

 <sect2>
  <title><!--Precision-->精度</title>

  <para>
   <!--<type>seg</> values are stored internally as pairs of 32-bit floating point
   numbers. This means that numbers with more than 7 significant digits
   will be truncated.-->
   <type>seg</>存储的值使用32-位的浮点数。精度不超过7位。
   
  </para>

  <para>
   <!--Numbers with 7 or fewer significant digits retain their
   original precision. That is, if your query returns 0.00, you will be
   sure that the trailing zeroes are not the artifacts of formatting: they
   reflect the precision of the original data. The number of leading
   zeroes does not affect precision: the value 0.0067 is considered to
   have just 2 significant digits.-->
   精度小于7位，保留本身的精度。换句话说如果你的返回值是0.00，那么这是数值本身带的精度
   而不是格式化处理的。数值前的0不作为精度:值0.0067的精度被视为2。
  </para>
 </sect2>

 <sect2>
  <title><!--Usage-->使用</title>

  <para>
   <!--The <filename>seg</> module includes a GiST index operator class for
   <type>seg</> values.
   The operators supported by the GiST operator class are shown in <xref linkend="seg-gist-operators">.-->
   <filename> seg</>模块包含可以在 GiST索引中操作 <type>seg</>数据类型值的类，该类支持表
   <xref linkend="seg-gist-operators">中的操作。
   
  </para>
  <table id="seg-gist-operators">
   <title>Seg GiST Operators</title>
   <tgroup cols="2">
    <thead>
     <row>
      <entry><!--Operator-->操作</entry>
      <entry><!--Description-->描述</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><literal>[a, b] &lt;&lt; [c, d]</literal></entry>
      <entry><!--[a, b] is entirely to the left of [c, d].  That is, [a,
       b] &lt;&lt; [c, d] is true if b &lt; c and false otherwise.-->
      [a,b]的范围完全在[c,d]的左侧。换句话说，b &lt; c那么 [a,b] &lt;&lt; [c, d]
      为真，否则为假。      
      </entry>
     </row>

     <row>
      <entry><literal>[a, b] &gt;&gt; [c, d]</literal></entry>
      <entry><!--[a, b] is entirely to the right of [c, d].  That is, [a,
       b] &gt;&gt; [c, d] is true if a &gt; d and false otherwise.-->
      [a,b]的范围全部在[c,d]的右侧。换句话说，a &gt; d那么 [a,b] &gt;&gt; [c, d]
      为真，否则为假。
      </entry>
     </row>

     <row>
      <entry><literal>[a, b] &amp;&lt; [c, d]</literal></entry>
      <entry><!--Overlaps or is left of &mdash; This might be better read
       as <quote>does not extend to right of</quote>.  It is true when
       b &lt;= d.-->
       左包含，或者解读为取值范围不超过右边，b &lt;= d时为真。
      </entry>
      
     </row>

     <row>
      <entry><literal>[a, b] &amp;&gt; [c, d]</literal></entry>
      <entry><!--Overlaps or is right of &mdash; This might be better read
       as <quote>does not extend to left of</quote>.  It is true when
       a &gt;= c.-->
       右包含，或者解读为取值范围不超过左边，a &gt;= c时为真。
      </entry> 
     </row>

     <row>
      <entry><literal>[a, b] = [c, d]</literal></entry>
      <entry><!--Same as &mdash; The segments [a, b] and [c, d] are
       identical, that is, a = c and b = d.-->
       [a, b]和[c, d]相同，当a=c并且b=d时为真。
      </entry>
     </row>

     <row>
      <entry><literal>[a, b] &amp;&amp; [c, d]</literal></entry>
      <entry><!--The segments [a, b] and [c, d] overlap.-->
        [a, b]和[c, d]重叠部分
      </entry>
     </row>

     <row>
      <entry><literal>[a, b] @&gt; [c, d]</literal></entry>
      <entry><!--The segment [a, b] contains the segment [c, d], that is,
       a &lt;= c and b &gt;= d.-->
       [a, b]包含[c, d]，意味着 a &lt;= c并且 b &gt;= d。
      </entry>
     </row>

     <row>
      <entry><literal>[a, b] &lt;@ [c, d]</literal></entry>
      <entry><!--The segment [a, b] is contained in [c, d], that is, a
       &gt;= c and b &lt;= d.-->
       [a, b]被[c, d]包含，意味着 a &gt;= c and b &lt;= d。
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <para>
   <!--(Before PostgreSQL 8.2, the containment operators <literal>@&gt;</> and <literal>&lt;@</> were
   respectively called <literal>@</> and <literal>~</>.  These names are still available, but are
   deprecated and will eventually be retired.  Notice that the old names
   are reversed from the convention formerly followed by the core geometric
   data types!)-->
   PostgresSQL 8.2之前的版本中，<literal>@&gt;</> 和<literal>&lt;@</>分别用<literal>@</>和<literal>~</>表示。
   但那种表示方式会在将来完全被替代，所以不赞成使用。注意旧的名称会随着代表几何的数据类型转换为惯例的格式。
  </para>

  <para>
   <!--The standard B-tree operators are also provided, for example-->
   提供标准的B-tree操作，例如

  <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry><!--Operator-->操作</entry>
       <entry><!--Description-->描述</entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry><literal>[a, b] &lt; [c, d]</literal></entry>
       <entry><!--Less than-->小于</entry>
      </row>

      <row>
       <entry><literal>[a, b] &gt; [c, d]</literal></entry>
       <entry><!--Greater than-->大于</entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>

   <!--These operators do not make a lot of sense for any practical
   purpose but sorting. These operators first compare (a) to (c),
   and if these are equal, compare (b) to (d). That results in
   reasonably good sorting in most cases, which is useful if
   you want to use ORDER BY with this type.-->
   这些操作除了做排序以外没有别的用处，首先是(a)和(c)比较大小，如果
   相等在比较(b)和(d)。如果使用这种类型排序，得到的的结果在大多数情
   况下是合理的。
  </para>
 </sect2>

 <sect2>
  <title><!--Notes-->注意</title>

  <para>
   <!--For examples of usage, see the regression test <filename>sql/seg.sql</>.-->
    使用例子，参看回归测试 <filename>sql/seg.sql</>。
  </para>

  <para>
   <!--The mechanism that converts <literal>(+-)</> to regular ranges
   isn't completely accurate in determining the number of significant digits
   for the boundaries.  For example, it adds an extra digit to the lower
   boundary if the resulting interval includes a power of ten:-->
   使用 <literal>(+-)</>机制转换数字的时候可能得到不确定的精度。举个例子他可能
   为较低的边界值增加额外的精度：
   

<screen>
postgres=> select '10(+-)1'::seg as seg;
      seg
---------
9.0 .. 11             -- 应该为: 9 .. 11
</screen>
  </para>

  <para>
   <!--The performance of an R-tree index can largely depend on the initial
   order of input values. It may be very helpful to sort the input table
   on the <type>seg</> column; see the script <filename>sort-segments.pl</>
   for an example.-->
   R-tree索引的性能很大程度上依赖初始输入值的排序。在输入表的<type>seg</>类型列
   上排序可能是非常有效果的；参考脚本 <filename>sort-segments.pl</>。
   
  </para>
 </sect2>

 <sect2>
  <title><!--Credits-->感谢</title>

  <para>
   <!--Original author: Gene Selkov, Jr. <email>selkovjr@mcs.anl.gov</email>,
   Mathematics and Computer Science Division, Argonne National Laboratory.-->
   原作者：Gene Selkov, Jr. <email>selkovjr@mcs.anl.gov</email>，数学与计算机科学部，阿贡国家实验室。
  </para>

  <para>
   <!--My thanks are primarily to Prof. Joe Hellerstein
   (<ulink url="http://db.cs.berkeley.edu/jmh/"></ulink>) for elucidating the
   gist of the GiST (<ulink url="http://gist.cs.berkeley.edu/"></ulink>). I am
   also grateful to all Postgres developers, present and past, for enabling
   myself to create my own world and live undisturbed in it. And I would like
   to acknowledge my gratitude to Argonne Lab and to the U.S. Department of
   Energy for the years of faithful support of my database research.-->
   感谢Joe Hellerstein教授 (<ulink url="http://db.cs.berkeley.edu/jmh/"></ulink>)阐明的思想
   (<ulink url="http://gist.cs.berkeley.edu/"></ulink>)。感谢所有 Postgres开发者，使我可以站在巨人的肩膀上。
   感谢阿贡实验室和美国能源部多年的忠实支持我的数据库的研究。
  </para>

 </sect2>

</sect1>