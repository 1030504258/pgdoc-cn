<!-- doc/src/sgml/intagg.sgml -->

<sect1 id="intagg" xreflabel="intagg">
 <title>intagg</title>

 <indexterm zone="intagg">
  <primary>intagg</primary>
 </indexterm>

 <!--
<para>
  The <filename>intagg</filename> module provides an integer aggregator and an
  enumerator.  <filename>intagg</filename> is now obsolete, because there
  are built-in functions that provide a superset of its capabilities.
  However, the module is still provided as a compatibility wrapper around
  the built-in functions.
 </para>
-->
<para>
<filename>intagg</filename>模块提供一个整数聚合器和一个枚举器。<filename>intagg</filename>
现在已经废弃了，因为内置的函数提供它的能力的一个超集。不过，
该模块仍然作为内置函数的兼容性封装器提供。
</para>

 <sect2>
  <!-- 
  <title>Functions</title> 
  -->
  <title>函数</title>

 <indexterm>
  <primary>int_array_aggregate</primary>
 </indexterm>

 <indexterm>
  <primary>array_agg</primary>
 </indexterm>

 <!--
<para>
  The aggregator is an aggregate function
  <function>int_array_aggregate(integer)</>
  that produces an integer array
  containing exactly the integers it is fed.
  This is a wrapper around <function>array_agg</>,
  which does the same thing for any array type.
 </para>
-->
<para>
聚合器是一个生产正好包含输入的整数的整数数组的聚合函数<function>int_array_aggregate(integer)</>。
这是<function>array_agg</>的封装器，<function>array_agg</>对于任意数组类型做相同的事情。
</para>

 <indexterm>
  <primary>int_array_enum</primary>
 </indexterm>

 <!--
<para>
  The enumerator is a function
  <function>int_array_enum(integer[])</>
  that returns <type>setof integer</>.  It is essentially the reverse
  operation of the aggregator: given an array of integers, expand it
  into a set of rows.  This is a wrapper around <function>unnest</>,
  which does the same thing for any array type.
 </para>
-->
<para>
枚举器是返回<type>setof integer</>类型的函数<function>int_array_enum(integer[])</>。
本质上是聚合器的反向操作：给出一个整数数组，将其展开为一组行。
这是<function>unnest</>的封装器，<function>unnest</>对于任意数组类型做相同的事情。
</para>

 </sect2>

 <sect2>
  <!-- 
  <title>Sample Uses</title> 
  -->
  <title>示例使用</title>

<para>
<!-- 
   Many database systems have the notion of a one to many table. Such a table
   usually sits between two indexed tables, for example:
 -->
许多数据库系统有一到多个表的概念。这样的一个表通常位于两个索引表之间，例如：
 
<programlisting>
CREATE TABLE left (id INT PRIMARY KEY, ...);
CREATE TABLE right (id INT PRIMARY KEY, ...);
CREATE TABLE one_to_many(left INT REFERENCES left, right INT REFERENCES right);
</programlisting>

  <!-- 
  It is typically used like this: 
  -->
  通常这样使用：

<programlisting>
SELECT right.* from right JOIN one_to_many ON (right.id = one_to_many.right)
  WHERE one_to_many.left = <replaceable>item</>;
</programlisting>

<!-- 
  This will return all the items in the right hand table for an entry
  in the left hand table. This is a very common construct in SQL. 
-->
这将返回所有在左手边的表里有记录的右手边表里的条目。这在SQL中是一个非常普通的构造。
 </para>

<para>
<!-- 
  Now, this methodology can be cumbersome with a very large number of
  entries in the <structname>one_to_many</> table.  Often,
  a join like this would result in an index scan
  and a fetch for each right hand entry in the table for a particular
  left hand entry. If you have a very dynamic system, there is not much you
  can do. However, if you have some data which is fairly static, you can
  create a summary table with the aggregator.
 -->
现在，这个方法在一个有非常大数量的记录的<structname>one_to_many</>表里是很难处理的。
通常，像这样的连接将会导致索引扫描和抓取表中有左手边记录的每个右手边记录。
如果你有一个非常动态的系统，那么没有什么你可以做的。不过，如果你有一些静态的数据，
你可以使用该聚合器创建一个汇总表。
 
<programlisting>
CREATE TABLE summary AS
  SELECT left, int_array_aggregate(right) AS right
  FROM one_to_many
  GROUP BY left;
</programlisting>

<!-- 
  This will create a table with one row per left item, and an array
  of right items. Now this is pretty useless without some way of using
  the array; that's why there is an array enumerator.  You can do
 -->
这将创建一个表，这个表有每个左边的条目和一个左边条目的数组。
现在，如果没有使用该数组的方法则是相当无用的；这就是为什么有一个数组枚举器。
你可以
 
<programlisting>
SELECT left, int_array_enum(right) FROM summary WHERE left = <replaceable>item</>;
</programlisting>

<!-- 
  The above query using <function>int_array_enum</> produces the same results
  as 
-->
上面的查询使用<function>int_array_enum</>产生下面相同的结果

<programlisting>
SELECT left, right FROM one_to_many WHERE left = <replaceable>item</>;
</programlisting>

<!-- 
  The difference is that the query against the summary table has to get
  only one row from the table, whereas the direct query against
  <structname>one_to_many</> must index scan and fetch a row for each entry. 
-->
不同之处是针对summary表的查询必须只从表中获取一行，而针对<structname>one_to_many</>
的直接查询必须索引扫描然后从每条记录中获取一行。
 </para>

<para>
<!-- 
  On one system, an <command>EXPLAIN</> showed a query with a cost of 8488 was
  reduced to a cost of 329.  The original query was a join involving the
  <structname>one_to_many</> table, which was replaced by: 
-->
在一个系统上，一个显示了消耗8488的查询的<command>EXPLAIN</>减少到消耗329。
原始查询时一个包括<structname>one_to_many</>表的连接，替换为:

<programlisting>
SELECT right, count(right) FROM
  ( SELECT left, int_array_enum(right) AS right
    FROM summary JOIN (SELECT left FROM left_table WHERE left = <replaceable>item</>) AS lefts
         ON (summary.left = lefts.left)
  ) AS list
  GROUP BY right
  ORDER BY count DESC;
</programlisting>
 </para>

 </sect2>

</sect1>
