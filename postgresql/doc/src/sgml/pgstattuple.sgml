<!-- doc/src/sgml/pgstattuple.sgml -->

<sect1 id="pgstattuple" xreflabel="pgstattuple">
 <title>pgstattuple</title>

 <indexterm zone="pgstattuple">
  <primary>pgstattuple</primary>
 </indexterm>

 <!-- 
 <para>
  The <filename>pgstattuple</filename> module provides various functions to
  obtain tuple-level statistics.
 </para>
 -->
 <para>
  <filename>pgstattuple</filename>模块提供多种函数来获得元组级别的统计信息。
 </para>

 <sect2>
  <!-- 
  <title>Functions</title>
  -->
  <title>函数</title>

  <variablelist>
   <varlistentry>
   <term>
     <function>pgstattuple(regclass) returns record</>
   <indexterm>
    <primary>pgstattuple</primary>
   </indexterm>    
    </term>

    <listitem>
     <para>
      <!-- 
      <function>pgstattuple</function> returns a relation's physical length,
      percentage of <quote>dead</> tuples, and other info. This may help users
      to determine whether vacuum is necessary or not.  The argument is the
      target relation's name (optionally schema-qualified) or OID.
      For example:
      -->
      <function>pgstattuple</function>返回一个关系的物理长度、
      <quote>死的</>元组的百分比以及其他信息。这可以帮助用户确定是否需要清理。
      参数是目标关系的名称（可以有模式限定）或者 OID。例如：
<programlisting>
test=> SELECT * FROM pgstattuple('pg_catalog.pg_proc');
-[ RECORD 1 ]------+-------
table_len          | 458752
tuple_count        | 1470
tuple_len          | 438896
tuple_percent      | 95.67
dead_tuple_count   | 11
dead_tuple_len     | 3157
dead_tuple_percent | 0.69
free_space         | 8932
free_percent       | 1.95
</programlisting>
     输出字段在<xref linkend="pgstattuple-columns">中描述。
    </para>

    <table id="pgstattuple-columns">
     <!--
     <title><function>pgstattuple</function> Output Columns</title>
     -->
     <title><function>pgstattuple</function> 输出字段</title>
     <tgroup cols="3">
      <thead>
       <row>
        <!-- 
        <entry>Column</entry>
        <entry>Type</entry>
        <entry>Description</entry>
        -->
        <entry>字段</entry>
        <entry>类型</entry>
        <entry>描述</entry>
       </row>
      </thead>

      <tbody>
       <row>
        <entry><structfield>table_len</structfield></entry>
        <entry><type>bigint</type></entry>
        <!-- 
        <entry>Physical relation length in bytes</entry>
        -->
        <entry>物理关系长度，以字节计</entry>
       </row>
       <row>
        <entry><structfield>tuple_count</structfield></entry>
        <entry><type>bigint</type></entry>
        <!-- 
        <entry>Number of live tuples</entry>
        -->
        <entry>活的元组的数量</entry>
       </row>
       <row>
        <entry><structfield>tuple_len</structfield></entry>
        <entry><type>bigint</type></entry>
        <!-- 
        <entry>Total length of live tuples in bytes</entry>
        -->
        <entry>活的元组的总长度，以字节计</entry>
       </row>
       <row>
        <entry><structfield>tuple_percent</structfield></entry>
        <entry><type>float8</type></entry>
        <!-- 
        <entry>Percentage of live tuples</entry>
        -->
        <entry>活的元组的百分比</entry>
       </row>
       <row>
        <entry><structfield>dead_tuple_count</structfield></entry>
        <entry><type>bigint</type></entry>
        <!-- 
        <entry>Number of dead tuples</entry>
        -->
        <entry>死的元组的数量</entry>
       </row>
       <row>
        <entry><structfield>dead_tuple_len</structfield></entry>
        <entry><type>bigint</type></entry>
        <!-- 
        <entry>Total length of dead tuples in bytes</entry>
        -->
        <entry>死的元组的总长度，以字节计</entry>
       </row>
       <row>
        <entry><structfield>dead_tuple_percent</structfield></entry>
        <entry><type>float8</type></entry>
        <!-- 
        <entry>Percentage of dead tuples</entry>
        -->
        <entry>死的元组的百分比</entry>
       </row>
       <row>
        <entry><structfield>free_space</structfield></entry>
        <entry><type>bigint</type></entry>
        <!-- 
        <entry>Total free space in bytes</entry>
        -->
        <entry>空闲空间总量，以字节计</entry>
       </row>
       <row>
        <entry><structfield>free_percent</structfield></entry>
        <entry><type>float8</type></entry>
        <!-- 
        <entry>Percentage of free space</entry>
        -->
        <entry>空闲空间的百分比</entry>
       </row>

      </tbody>
     </tgroup>
    </table>

    <!-- 
    <para>
     <function>pgstattuple</function> acquires only a read lock on the
     relation. So the results do not reflect an instantaneous snapshot;
     concurrent updates will affect them.
    </para>
    -->
    <para>
     <function>pgstattuple</function>只要求在关系上的一个读锁。
     因此结果不能反映一个即时快照，并发更新将影响结果。
    </para>

    <!-- 
    <para>
     <function>pgstattuple</function> judges a tuple is <quote>dead</> if
     <function>HeapTupleSatisfiesDirty</> returns false.
    </para>
    -->
    <para>
     如果<function>HeapTupleSatisfiesDirty</>返回假，
     <function>pgstattuple</function>就判定一个元组是<quote>死的</>。
    </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <function>pgstattuple(text) returns record</>
    </term>

    <listitem>
     <!-- 
     <para>
      This is the same as <function>pgstattuple(regclass)</function>, except
      that the target relation is specified as TEXT. This function is kept
      because of backward-compatibility so far, and will be deprecated in
      some future release.
     </para>
     -->
     <para>
      与<function>pgstattuple(regclass)</function>相同，
      只不过目标关系被指定为TEXT。这个函数只是为了向后兼容而保留，
      在某些未来的发布中将会被废除。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
    <indexterm>
     <primary>pgstatindex</primary>
    </indexterm>
     <function>pgstatindex(regclass) returns record</>
    </term>

    <listitem>
     <para>
      <!-- 
      <function>pgstatindex</function> returns a record showing information
      about a B-tree index.  For example:
      -->
      <function>pgstatindex</function>返回一个记录显示有关一个 B-树 索引的信息。例如：
<programlisting>
test=> SELECT * FROM pgstatindex('pg_cast_oid_index');
-[ RECORD 1 ]------+------
version            | 2
tree_level         | 0
index_size         | 16384
root_block_no      | 1
internal_pages     | 0
leaf_pages         | 1
empty_pages        | 0
deleted_pages      | 0
avg_leaf_density   | 54.27
leaf_fragmentation | 0
</programlisting>
     </para>

    <para>
     <!-- 
     The output columns are:
     -->
     输出字段是：

    <informaltable>
     <tgroup cols="3">
      <thead>
       <row>
        <!-- 
        <entry>Column</entry>
        <entry>Type</entry>
        <entry>Description</entry>
        -->
        <entry>字段</entry>
        <entry>类型</entry>
        <entry>描述</entry>
       </row>
      </thead>

      <tbody>
       <row>
        <entry><structfield>version</structfield></entry>
        <entry><type>integer</type></entry>
        <!-- 
        <entry>B-tree version number</entry>
        -->
        <entry>B-树 版本号</entry>
       </row>

       <row>
        <entry><structfield>tree_level</structfield></entry>
        <entry><type>integer</type></entry>
        <!-- 
        <entry>Tree level of the root page</entry>
        -->
        <entry>根页的树级别</entry>
       </row>

       <row>
        <entry><structfield>index_size</structfield></entry>
        <entry><type>bigint</type></entry>
        <!-- 
        <entry>Total index size in bytes</entry>
        -->
        <entry>总索引大小（以字节为单位）</entry>
       </row>

       <row>
        <entry><structfield>root_block_no</structfield></entry>
        <entry><type>bigint</type></entry>
        <!-- 
        <entry>Location of root page (zero if none)</entry>
        -->
        <entry>根页面的位置（如果没有则为零）</entry>
       </row>

       <row>
        <entry><structfield>internal_pages</structfield></entry>
        <entry><type>bigint</type></entry>
        <!-- 
        <entry>Number of <quote>internal</> (upper-level) pages</entry>
        -->
        <entry><quote>内部</>（上一级）页面的数量</entry>
       </row>

       <row>
        <entry><structfield>leaf_pages</structfield></entry>
        <entry><type>bigint</type></entry>
        <!-- 
        <entry>Number of leaf pages</entry>
        -->
        <entry>叶子页面的数量</entry>
       </row>

       <row>
        <entry><structfield>empty_pages</structfield></entry>
        <entry><type>bigint</type></entry>
        <!-- 
        <entry>Number of empty pages</entry>
        -->
        <entry>空页面的数量</entry>
       </row>

       <row>
        <entry><structfield>deleted_pages</structfield></entry>
        <entry><type>bigint</type></entry>
        <!-- 
        <entry>Number of deleted pages</entry>
        -->
        <entry>删除页面的数量</entry>
       </row>

       <row>
        <entry><structfield>avg_leaf_density</structfield></entry>
        <entry><type>float8</type></entry>
        <!-- 
        <entry>Average density of leaf pages</entry>
        -->
        <entry>叶子页面的平均密度</entry>
       </row>

       <row>
        <entry><structfield>leaf_fragmentation</structfield></entry>
        <entry><type>float8</type></entry>
        <!-- 
        <entry>Leaf page fragmentation</entry>
        -->
        <entry>叶子页面碎片</entry>
       </row>

      </tbody>
     </tgroup>
    </informaltable>
    </para>

    <!-- 
    <para>
     The reported <literal>index_size</> will normally correspond to one more
     page than is accounted for by <literal>internal_pages + leaf_pages +
     empty_pages + deleted_pages</literal>, because it also includes the
     index's metapage.
    </para>
    -->
    <para>
     报告的<literal>index_size</>通常比由<literal>internal_pages + 
     leaf_pages + empty_pages + deleted_pages</literal>计数的多一个页面，
     因为它还包括索引的元页。
    </para>
    
    <!-- 
    <para>
     As with <function>pgstattuple</>, the results are accumulated
     page-by-page, and should not be expected to represent an
     instantaneous snapshot of the whole index.
    </para>
    -->
    <para>
     与<function>pgstattuple</>一样，结果是一页一页累积的，
     并且不要期望结果会表示整个索引的一个即时快照。
    </para>
    </listitem>
   </varlistentry>
   
   <varlistentry>
   <term>
     <function>pgstatindex(text) returns record</>
    </term>

    <listitem>
     <!-- 
     <para>
      This is the same as <function>pgstatindex(regclass)</function>, except
      that the target index is specified as TEXT. This function is kept
      because of backward-compatibility so far, and will be deprecated in
      some future release.
     </para>
     -->
     <para>
      与<function>pgstatindex(regclass)</function>相同，
      只不过目标索引被指定为TEXT。这个函数只是为了向后兼容而保留，
      在某些未来的发布中将会被废除。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <indexterm>
      <primary>pgstatginindex</primary>
     </indexterm>
     <function>pgstatginindex(regclass) returns record</>
    </term>

    <listitem>
     <para>
      <!-- 
      <function>pgstatginindex</function> returns a record showing information
      about a GIN index.  For example:
      -->
      <function>pgstatginindex</function>返回一个记录显示有关一个 GIN 索引的信息。例如：
<programlisting>
test=> SELECT * FROM pgstatginindex('test_gin_index');
-[ RECORD 1 ]--+--
version        | 1
pending_pages  | 0
pending_tuples | 0
</programlisting>
     </para>

    <para>
     <!-- 
     The output columns are:
     -->
     输出字段是：

    <informaltable>
     <tgroup cols="3">
      <thead>
       <row>
        <!-- 
        <entry>Column</entry>
        <entry>Type</entry>
        <entry>Description</entry>
        -->
        <entry>字段</entry>
        <entry>类型</entry>
        <entry>描述</entry>
       </row>
      </thead>

      <tbody>
       <row>
        <entry><structfield>version</structfield></entry>
        <entry><type>integer</type></entry>
        <!-- 
        <entry>GIN version number</entry>
        -->
        <entry>GIN 版本号</entry>
       </row>

       <row>
        <entry><structfield>pending_pages</structfield></entry>
        <entry><type>integer</type></entry>
        <!-- 
        <entry>Number of pages in the pending list</entry>
        -->
        <entry>待处理列表中的页面数</entry>
       </row>

       <row>
        <entry><structfield>pending_tuples</structfield></entry>
        <entry><type>bigint</type></entry>
        <!-- 
        <entry>Number of tuples in the pending list</entry>
        -->
        <entry>待处理列表中的元组数</entry>
       </row>

      </tbody>
     </tgroup>
    </informaltable>
    </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <indexterm>
      <primary>pg_relpages</primary>
     </indexterm>
     <function>pg_relpages(regclass) returns bigint</>
    </term>

    <listitem>
     <!-- 
     <para>
      <function>pg_relpages</function> returns the number of pages in the
      relation.
     </para>
     -->
     <para>
      <function>pg_relpages</function>返回关系中的页面数。
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry>
    <term>
     <function>pg_relpages(text) returns bigint</>
    </term>

    <listitem>
     <!-- 
     <para>
      This is the same as <function>pg_relpages(regclass)</function>, except
      that the target relation is specified as TEXT. This function is kept
      because of backward-compatibility so far, and will be deprecated in
      some future release.
     </para>
     -->
     <para>
      与<function>pg_relpages(regclass)</function>相同，
      只不过目标关系被指定为TEXT。这个函数只是为了向后兼容而保留，
      在某些未来的发布中将会被废除。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <indexterm>
      <primary>pgstattuple_approx</primary>
     </indexterm>
     <function>pgstattuple_approx(regclass) returns record</>
    </term>

    <listitem>
     <para>
      <!-- 
      <function>pgstattuple_approx</function> is a faster alternative to
      <function>pgstattuple</function> that returns approximate results.
      The argument is the target relation's name or OID.
      For example:
      -->
      <function>pgstattuple_approx</function>是返回近似结果的
      <function>pgstattuple</function>的更快的替代。
      参数是目标关系的名称或OID。例如：
<programlisting>
test=> SELECT * FROM pgstattuple_approx('pg_catalog.pg_proc'::regclass);
-[ RECORD 1 ]--------+-------
table_len            | 573440
scanned_percent      | 2
approx_tuple_count   | 2740
approx_tuple_len     | 561210
approx_tuple_percent | 97.87
dead_tuple_count     | 0
dead_tuple_len       | 0
dead_tuple_percent   | 0
approx_free_space    | 11996
approx_free_percent  | 2.09
</programlisting>
      <!-- 
      The output columns are described in <xref linkend="pgstatapprox-columns">.
      -->
      输出字段列在<xref linkend="pgstatapprox-columns">中描述。
     </para>

     <!-- 
     <para>
      Whereas <function>pgstattuple</function> always performs a
      full-table scan and returns an exact count of live and dead tuples
      (and their sizes) and free space, <function>pgstattuple_approx</function>
      tries to avoid the full-table scan and returns exact dead tuple
      statistics along with an approximation of the number and
      size of live tuples and free space.
     </para>
     -->
     <para>
      <function>pgstattuple</function>总是执行全表扫描并返回活的和死的元组
      （及其大小）和可用空间的精确计数，<function>pgstattuple_approx</function>
      尝试避免全表扫描并返回精确的死元组统计数据以及活元组和自由空间的数量和大小的近似值。
     </para>

     <!-- 
     <para>
      It does this by skipping pages that have only visible tuples
      according to the visibility map (if a page has the corresponding VM
      bit set, then it is assumed to contain no dead tuples). For such
      pages, it derives the free space value from the free space map, and
      assumes that the rest of the space on the page is taken up by live
      tuples.
     </para>
     -->
     <para>
      它通过根据可见性映射跳过仅具有可见元组的页面（如果页面具有相应的VM位集，
      则假定其不包含死元组）实现这点。对于这样的页面，
      它从自由空间映射中导出可用空间值，并假设页面上的其余空间由活的元组占用。
     </para>

     <!-- 
     <para>
      For pages that cannot be skipped, it scans each tuple, recording its
      presence and size in the appropriate counters, and adding up the
      free space on the page. At the end, it estimates the total number of
      live tuples based on the number of pages and tuples scanned (in the
      same way that VACUUM estimates pg_class.reltuples).
     </para>
     -->
     <para>
      对于不能跳过的页面，它会扫描每个元组，在适当的计数器中记录其存在和大小，
      并加上页面上的可用空间。最后，它基于扫描的页面和元组的数量估计活的元组的总数
      （以与VACUUM估计pg_class.reltuples相同的方式）。
     </para>

     <table id="pgstatapprox-columns">
      <!-- 
      <title><function>pgstattuple_approx</function> Output Columns</title>
      -->
      <title><function>pgstattuple_approx</function> 输出字段</title>
      <tgroup cols="3">
       <thead>
        <row>
         <!-- 
         <entry>Column</entry>
         <entry>Type</entry>
         <entry>Description</entry>
         -->
         <entry>字段</entry>
         <entry>类型</entry>
         <entry>描述</entry>
        </row>
       </thead>

       <tbody>
        <row>
         <entry><structfield>table_len</structfield></entry>
         <entry><type>bigint</type></entry>
         <!-- 
         <entry>Physical relation length in bytes (exact)</entry>
         -->
         <entry>以字节为单位的物理关系长度（精确）</entry>
        </row>
        <row>
         <entry><structfield>scanned_percent</structfield></entry>
         <entry><type>float8</type></entry>
         <!-- 
         <entry>Percentage of table scanned</entry>
         -->
         <entry>已扫描表的百分比</entry>
        </row>
        <row>
         <entry><structfield>approx_tuple_count</structfield></entry>
         <entry><type>bigint</type></entry>
         <!-- 
         <entry>Number of live tuples (estimated)</entry>
         -->
         <entry>活元组数（估计）</entry>
        </row>
        <row>
         <entry><structfield>approx_tuple_len</structfield></entry>
         <entry><type>bigint</type></entry>
         <!-- 
         <entry>Total length of live tuples in bytes (estimated)</entry>
         -->
         <entry>活的元组的总长度（以字节为单位）（估计）</entry>
        </row>
        <row>
         <entry><structfield>approx_tuple_percent</structfield></entry>
         <entry><type>float8</type></entry>
         <!-- 
         <entry>Percentage of live tuples</entry>
         -->
         <entry>活元组的百分比</entry>
        </row>
        <row>
         <entry><structfield>dead_tuple_count</structfield></entry>
         <entry><type>bigint</type></entry>
         <!-- 
         <entry>Number of dead tuples (exact)</entry>
         -->
         <entry>死元组数（精确）</entry>
        </row>
        <row>
         <entry><structfield>dead_tuple_len</structfield></entry>
         <entry><type>bigint</type></entry>
         <!-- 
         <entry>Total length of dead tuples in bytes (exact)</entry>
         -->
         <entry>死元组的总长度（以字节为单位）（精确）</entry>
        </row>
        <row>
         <entry><structfield>dead_tuple_percent</structfield></entry>
         <entry><type>float8</type></entry>
         <!-- 
         <entry>Percentage of dead tuples</entry>
         -->
         <entry>死元组的百分比</entry>
        </row>
        <row>
         <entry><structfield>approx_free_space</structfield></entry>
         <entry><type>bigint</type></entry>
         <!-- 
         <entry>Total free space in bytes (estimated)</entry>
         -->
         <entry>总可用空间（以字节为单位）（估计）</entry>
        </row>
        <row>
         <entry><structfield>approx_free_percent</structfield></entry>
         <entry><type>float8</type></entry>
         <!-- 
         <entry>Percentage of free space</entry>
         -->
         <entry>可用空间百分比</entry>
        </row>

       </tbody>
      </tgroup>
     </table>

     <!-- 
     <para>
      In the above output, the free space figures may not match the
      <function>pgstattuple</function> output exactly, because the free
      space map gives us an exact figure, but is not guaranteed to be
      accurate to the byte.
     </para>
     -->
     <para>
      在上面的输出中，可用空间数字可能与<function>pgstattuple</function>
      输出不完全匹配，因为自由空间映射给了我们一个确切的数字，但不能保证精确到字节。
     </para>

    </listitem>
   </varlistentry>

  </variablelist>
 </sect2>

 <sect2>
  <!-- 
  <title>Authors</title>
  -->
  <title>作者</title>

  <!-- 
  <para>
   Tatsuo Ishii, Satoshi Nagayasu and Abhijit Menon-Sen
  </para>
  -->
  <para>
   Tatsuo Ishii、Satoshi Nagayasu和Abhijit Menon-Sen
  </para>
 </sect2>

</sect1>
