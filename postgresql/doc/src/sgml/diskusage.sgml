<!-- doc/src/sgml/diskusage.sgml -->

<chapter id="diskusage">
 <!-- 
 <title>Monitoring Disk Usage</title> 
 -->
 <title>监控磁盘使用情况</title>

 <!--
<para>
  This chapter discusses how to monitor the disk usage of a
  <productname>PostgreSQL</> database system.
 </para>
-->
<para>
本章讨论如何观察<productname>PostgreSQL</>数据库系统的磁盘使用情况。
</para>

 <sect1 id="disk-usage">
  <!-- 
  <title>Determining Disk Usage</title> 
  -->
  <title>判断磁盘的使用量</title>

  <indexterm zone="disk-usage">
   <!-- 
   <primary>disk usage</primary> 
   -->
   <primary>磁盘使用</primary>
  </indexterm>

  <!--
<para>
   Each table has a primary heap disk file where most of the data is
   stored. If the table has any columns with potentially-wide values,
   there also might be a <acronym>TOAST</> file associated with the table,
   which is used to store values too wide to fit comfortably in the main
   table (see <xref linkend="storage-toast">).  There will be one index on the
   <acronym>TOAST</> table, if present. There also might be indexes associated
   with the base table.  Each table and index is stored in a separate disk
   file &mdash; possibly more than one file, if the file would exceed one
   gigabyte.  Naming conventions for these files are described in <xref
   linkend="storage-file-layout">.
  </para>
-->
<para>
每个表都有一个主堆(primary heap)磁盘文件，大多数数据都存储在这里。如果一个表存在值可能会很长的字段，
则另外还有一个用于存储因为数值太长而不适合存储在主表中的数据的<acronym>TOAST</>文件
(参阅<xref linkend="storage-toast">)。如果存在这个扩展表，那么将会同时存在一个<acronym>TOAST</>索引。
当然，同时还可能有索引和基表关联。每个表和索引都存放在单独的磁盘文件里(超过 1GB 可能会被分割成多个)。
这些文件的命名原则在<xref linkend="storage-file-layout">里描述。
</para>

  <!--
<para>
   You can monitor disk space in three ways:
   using the SQL functions listed in <xref linkend="functions-admin-dbsize">,
   using the <xref linkend="oid2name"> module, or
   using manual inspection of the system catalogs.
   The SQL functions are the easiest to use and are generally recommended.
   The remainder of this section shows how to do it by inspection of the
   system catalogs.
  </para>
-->
<para>
可以使用三种方法监视磁盘空间：使用<xref linkend="functions-admin-dbsize">中列出的 SQL 函数、
使用<xref linkend="oid2name">模块、或使用手动检查系统表。SQL 函数是最简单的方法并且一般推荐使用它。
本节其余部分显示了如何通过检查系统表来监视磁盘空间。
</para>

 
<para>
 <!--
   Using <application>psql</> on a recently vacuumed or analyzed database,
   you can issue queries to see the disk usage of any table:
-->
在最近刚刚清理(或者分析过)的数据库上使用<application>psql</>的话，
可以使用查询来查看任意表的磁盘使用：
<programlisting>
SELECT pg_relation_filepath(oid), relpages FROM pg_class WHERE relname = 'customer';

 pg_relation_filepath | relpages 
----------------------+----------
 base/16384/16806     |       60
(1 row)
</programlisting>
<!-- 
   Each page is typically 8 kilobytes. (Remember, <structfield>relpages</>
   is only updated by <command>VACUUM</>, <command>ANALYZE</>, and
   a few DDL commands such as <command>CREATE INDEX</>.)  The file path name
   is of interest if you want to examine the table's disk file directly. 
-->
每个页通常都是 8K 字节。注意，<structfield>relpages</>只被<command>VACUUM</>, <command>ANALYZE</>
和几个 DDL 命令(例如<command>CREATE INDEX</>)更新。如果你想直接检查表的磁盘文件，
那么可以使用文件路径名。
  </para>
 
<para>
 <!--
   To show the space used by <acronym>TOAST</> tables, use a query
   like the following:
-->
要显示<acronym>TOAST</>表使用的空间，我们可以使用一个类似下面这样的查询：
<programlisting>
SELECT relname, relpages
FROM pg_class,
     (SELECT reltoastrelid
      FROM pg_class
      WHERE relname = 'customer') AS ss
WHERE oid = ss.reltoastrelid OR
      oid = (SELECT reltoastidxid
             FROM pg_class
             WHERE oid = ss.reltoastrelid)
ORDER BY relname;

       relname        | relpages 
----------------------+----------
 pg_toast_16806       |        0
 pg_toast_16806_index |        1
</programlisting>
  </para>

  
<para>
<!--
   You can easily display index sizes, too:
-->
也可以很容易地显示索引的尺寸：
<programlisting>
SELECT c2.relname, c2.relpages
FROM pg_class c, pg_class c2, pg_index i
WHERE c.relname = 'customer' AND
      c.oid = i.indrelid AND
      c2.oid = i.indexrelid
ORDER BY c2.relname;

       relname        | relpages 
----------------------+----------
 customer_id_indexdex |       26
</programlisting>
  </para>

  
<para>
<!--
   It is easy to find your largest tables and indexes using this
   information:
-->
很容易用下面的信息找出最大的表和索引：
<programlisting>
SELECT relname, relpages
FROM pg_class
ORDER BY relpages DESC;

       relname        | relpages 
----------------------+----------
 bigtable             |     3290
 customer             |     3144
</programlisting>
  </para>
 </sect1>

 <sect1 id="disk-full">
  <!-- 
  <title>Disk Full Failure</title> 
  -->
  <title>磁盘满导致的失效</title>

  <!--
<para>
   The most important disk monitoring task of a database administrator
   is to make sure the disk doesn't become full.  A filled data disk will
   not result in data corruption, but it might prevent useful activity
   from occurring. If the disk holding the WAL files grows full, database
   server panic and consequent shutdown might occur.
  </para>
-->
<para>
一个数据库管理员最重要的磁盘监控任务就是确保磁盘不会写满。
磁盘写满可能不会导致数据的丢失，但它肯定会导致系统进一步使用的问题。
如果 WAL 文件也在同一个磁盘上(缺省配置就是这样)，则会发生数据库服务器恐慌，
并且停止运行。
</para>

  <!--
<para>
   If you cannot free up additional space on the disk by deleting
   other things, you can move some of the database files to other file
   systems by making use of tablespaces. See <xref
   linkend="manage-ag-tablespaces"> for more information about that.
  </para>
-->
<para>
如果你不能通过删除其它东西来释放磁盘空间，
那么你可以通过使用表空间把一些数据库文件移动到其它文件系统上去。
参阅<xref linkend="manage-ag-tablespaces">获取更多信息。
</para>

  <tip>
   <!--
<para>
    Some file systems perform badly when they are almost full, so do
    not wait until the disk is completely full to take action.
   </para>
-->
<para>
有些文件系统在快要写满的时候性能会急剧恶化，因此不要等到磁盘完全写满时才采取行动。
</para>
  </tip>

  <!--
<para>
   If your system supports per-user disk quotas, then the database
   will naturally be subject to whatever quota is placed on the user
   the server runs as.  Exceeding the quota will have the same bad
   effects as running out of disk space entirely.
  </para>
-->
<para>
如果你的系统支持针对每个用户的磁盘限额，那么数据库自然也将受制于此，
超过限额的影响和完全用光磁盘空间是完全一样的。
</para>
 </sect1>
</chapter>
