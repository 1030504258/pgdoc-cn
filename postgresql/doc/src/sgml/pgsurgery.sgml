<!-- doc/src/sgml/pgsurgery.sgml -->

<sect1 id="pgsurgery" xreflabel="pg_surgery">
<!--==========================orignal english content==========================
 <title>pg_surgery</title>
____________________________________________________________________________-->
 <title>pg_surgery</title>

<!--==========================orignal english content==========================
 <indexterm zone="pgsurgery">
  <primary>pg_surgery</primary>
 </indexterm>
____________________________________________________________________________-->
 <indexterm zone="pgsurgery">
  <primary>pg_surgery</primary>
 </indexterm>

<!--==========================orignal english content==========================
 <para>
  The <filename>pg_surgery</filename> module provides various functions to
  perform surgery on a damaged relation. These functions are unsafe by design
  and using them may corrupt (or further corrupt) your database. For example,
  these functions can easily be used to make a table inconsistent with its
  own indexes, to cause <literal>UNIQUE</literal> or
  <literal>FOREIGN KEY</literal> constraint violations, or even to make
  tuples visible which, when read, will cause a database server crash.
  They should be used with great caution and only as a last resort.
 </para>
____________________________________________________________________________-->
 <para>
   <filename>pg_surgery</filename>模块提供了各种函数来对损坏的表进行修复。 这些函数在设计上是不安全的，使用它们可能会损坏（或进一步损坏）您的数据库。 例如，这些函数可以很容易地用于使表与其自己的索引不一致，导致 <literal>UNIQUE</literal> 或 <literal>FOREIGN KEY</literal> 约束违规，甚至使读取时将导致数据库服务器崩溃的元组可见。 应非常谨慎地使用它们，并且仅作为最后的手段。
 </para>

 <sect2>
<!--==========================orignal english content==========================
  <title>Functions</title>
____________________________________________________________________________-->
  <title>函数</title>

  <variablelist>
   <varlistentry>
<!--==========================orignal english content==========================
    <term>
     <function>heap_force_kill(regclass, tid[]) returns void</function>
    </term>
____________________________________________________________________________-->
    <term>
     <function>heap_force_kill(regclass, tid[]) 返回 void</function>
    </term>

    <listitem>
<!--==========================orignal english content==========================
     <para>
      <function>heap_force_kill</function> marks <quote>used</quote> line
      pointers as <quote>dead</quote> without examining the tuples. The
      intended use of this function is to forcibly remove tuples that are not
      otherwise accessible. For example:
<programlisting>
test=&gt; select * from t1 where ctid = '(0, 1)';
ERROR:  could not access status of transaction 4007513275
DETAIL:  Could not open file "pg_xact/0EED": No such file or directory.

test=# select heap_force_kill('t1'::regclass, ARRAY['(0, 1)']::tid[]);
 heap_force_kill 
-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-
 
(1 row)

test=# select * from t1 where ctid = '(0, 1)';
(0 rows)

</programlisting>
    </para>
____________________________________________________________________________-->
     <para>
      <function>heap_force_kill</function> 在不检查元组的情况下将 <quote>已使用</quote> 行指针标记为 <quote>死亡</quote>。 此函数的预期用途是强制删除无法以其他方式访问的元组。 例如：
<programlisting>
test=&gt; select * from t1 where ctid = '(0, 1)';
ERROR:  could not access status of transaction 4007513275
DETAIL:  Could not open file "pg_xact/0EED": No such file or directory.

test=# select heap_force_kill('t1'::regclass, ARRAY['(0, 1)']::tid[]);
 heap_force_kill 
-----------------
 
(1 row)

test=# select * from t1 where ctid = '(0, 1)';
(0 rows)

</programlisting>
    </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term>
     <function>heap_force_freeze(regclass, tid[]) returns void</function>
    </term>
____________________________________________________________________________-->
    <term>
     <function>heap_force_freeze(regclass, tid[]) 返回 void</function>
    </term>

    <listitem>
<!--==========================orignal english content==========================
     <para>
      <function>heap_force_freeze</function> marks tuples as frozen without
      examining the tuple data. The intended use of this function is to
      make accessible tuples which are inaccessible due to corrupted
      visibility information, or which prevent the table from being
      successfully vacuumed due to corrupted visibility information.
      For example:
<programlisting>
test=&gt; vacuum t1;
ERROR:  found xmin 507 from before relfrozenxid 515
CONTEXT:  while scanning block 0 of relation "public.t1"

test=# select ctid from t1 where xmin = 507;
 ctid  
-&minus;-&minus;-&minus;-
 (0,3)
(1 row)

test=# select heap_force_freeze('t1'::regclass, ARRAY['(0, 3)']::tid[]);
 heap_force_freeze 
-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-
 
(1 row)

test=# select ctid from t1 where xmin = 2;
 ctid
-&minus;-&minus;-&minus;-
 (0,3)
(1 row)

</programlisting>
    </para>
____________________________________________________________________________-->
     <para>
      <function>heap_force_freeze</function>将元组标记为冻结，而不检查元组数据。此函数的预期用途是制作可访问的元组，这些元组由于损坏的可见性信息而无法访问，或者由于损坏的可见性信息而无法成功清理表。 例如：
<programlisting>
test=&gt; vacuum t1;
ERROR:  found xmin 507 from before relfrozenxid 515
CONTEXT:  while scanning block 0 of relation "public.t1"

test=# select ctid from t1 where xmin = 507;
 ctid  
-------
 (0,3)
(1 row)

test=# select heap_force_freeze('t1'::regclass, ARRAY['(0, 3)']::tid[]);
 heap_force_freeze 
-------------------
 
(1 row)

test=# select ctid from t1 where xmin = 2;
 ctid
-------
 (0,3)
(1 row)

</programlisting>
    </para>
   </listitem>
  </varlistentry>

  </variablelist>
 </sect2>

 <sect2>
<!--==========================orignal english content==========================
  <title>Authors</title>
____________________________________________________________________________-->
  <title>作者</title>

<!--==========================orignal english content==========================
  <para>
   Ashutosh Sharma <email>ashu.coek88@gmail.com</email>
  </para>
____________________________________________________________________________-->
  <para>
   Ashutosh Sharma <email>ashu.coek88@gmail.com</email>
  </para>
 </sect2>

</sect1>
