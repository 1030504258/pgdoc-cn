<!-- doc/src/sgml/brin.sgml -->

<chapter id="BRIN">
<title>BRIN索引</title>

   <indexterm>
    <primary>index</primary>
    <secondary>BRIN</secondary>
   </indexterm>

<sect1 id="brin-intro">
 <title>介绍</title>

 <para>
  <acronym>BRIN</acronym>代表块范围索引。<acronym>BRIN</acronym>
  设计用于处理非常大的表，其中某些列与表中的物理位置具有一些自然相关性。
  <firstterm>block range</>是一组在表中物理上相邻的页；对于每个块范围，
  一些摘要信息由索引存储。例如，存储商店的销售订单的表可以具有放置每个订单的日期列，
  并且大多数时间较早的订单的条目也会在表中较早出现；
  存储ZIP编码列的表格可能会将城市的所有代码自然组合在一起。
 </para>

 <para>
  <acronym>BRIN</acronym>索引可以通过常规位图索引扫描来满足查询，
  并且如果索引存储的摘要信息与查询条件<firstterm>一致</>，
  则将返回每个范围内的所有页面中的所有元组。查询执行器负责重新检查这些元组，
  并丢弃那些与查询条件不匹配的元组。换句话说，这些索引是有损的。
  因为<acronym>BRIN</acronym>索引非常小，
  所以扫描索引与顺序扫描相比几乎没有增加开销，
  但是可以避免扫描已知不包含匹配元组的表的大部分。
 </para>

 <para>
  <acronym>BRIN</acronym>索引将存储的特定数据，以及索引将能够满足的特定查询，
  取决于为索引的每个列选择的运算符类。
  具有线性排序顺序的数据类型可以具有存储每个块范围内的最小值和最大值的运算符类，
  例如，几何类型可以存储块范围中所有对象的边界框。
 </para>

 <para>
  块范围的大小由索引创建时<literal>pages_per_range</>存储参数确定。
  索引条目的数量将等于页面中的关系的大小除以<literal>pages_per_range</>的所选值。
  因此，数字越小，索引变得越大（因为需要存储更多的索引条目），
  但是同时存储的摘要数据可以更精确，并且在索引扫描期间可以跳过更多的数据块。
 </para>

 <sect2 id="brin-operation">
  <title>索引维护</title>

  <para>
   在创建时，将扫描所有现有索引页，并为每个范围创建一个摘要索引元组，
   包括结尾处可能不完整的范围。当新页面填充数据时，
   已经汇总的页面范围将导致用来自新元组的数据更新摘要信息。
   当创建不在最后概括的范围内的新页面时，该范围不会自动获取摘要元组; 
   那些元组保持未汇总，直到稍后调用汇总运行，从而创建初始汇总。
   此过程可以使用<function>brin_summarize_new_values(regclass)</function>
   函数手动调用，或者在<command>VACUUM</command>处理表时自动调用。
  </para>
 </sect2>
</sect1>

<sect1 id="brin-builtin-opclasses">
 <title>内置操作符类</title>

 <para>
  核心<productname>PostgreSQL</productname>发布包括
  <xref linkend="brin-builtin-opclasses-table">
  中显示的<acronym>BRIN</acronym>运算符类。
 </para>

 <para>
  <firstterm>minmax</>运算符类存储出现在范围内的索引列中的最小值和最大值。
  <firstterm>inclusion</>操作符类存储一个值，该值包括范围内的索引列中的值。
 </para>

 <table id="brin-builtin-opclasses-table">
  <title>内置 <acronym>BRIN</acronym> 操作符类</title>
  <tgroup cols="3">
   <thead>
    <row>
     <entry>名称</entry>
     <entry>索引的数据类型</entry>
     <entry>可索引的操作符</entry>
    </row>
   </thead>
   <tbody>
    <row>
     <entry><literal>abstime_minmax_ops</literal></entry>
     <entry><type>abstime</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
    <row>
     <entry><literal>int8_minmax_ops</literal></entry>
     <entry><type>bigint</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
    <row>
     <entry><literal>bit_minmax_ops</literal></entry>
     <entry><type>bit</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
    <row>
     <entry><literal>varbit_minmax_ops</literal></entry>
     <entry><type>bit varying</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
    <row>
     <entry><literal>box_inclusion_ops</></entry>
     <entry><type>box</type></entry>
     <entry>
      <literal>&lt;&lt;</>
      <literal>&amp;&lt;</>
      <literal>&amp;&amp;</>
      <literal>&amp;&gt;</>
      <literal>&gt;&gt;</>
      <literal>~=</>
      <literal>@&gt;</>
      <literal>&lt;@</>
      <literal>&amp;&lt;|</>
      <literal>&lt;&lt;|</>
      <literal>|&gt;&gt;</literal>
      <literal>|&amp;&gt;</>
     </entry>
    </row>
    <row>
     <entry><literal>bytea_minmax_ops</literal></entry>
     <entry><type>bytea</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
    <row>
     <entry><literal>bpchar_minmax_ops</literal></entry>
     <entry><type>character</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
    <row>
     <entry><literal>char_minmax_ops</literal></entry>
     <entry><type>"char"</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
    <row>
     <entry><literal>date_minmax_ops</literal></entry>
     <entry><type>date</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
    <row>
     <entry><literal>float8_minmax_ops</literal></entry>
     <entry><type>double precision</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
    <row>
     <entry><literal>inet_minmax_ops</literal></entry>
     <entry><type>inet</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
    <row>
     <entry><literal>network_inclusion_ops</literal></entry>
     <entry><type>inet</type></entry>
     <entry>
      <literal>&amp;&amp;</>
      <literal>&gt;&gt;=</>
      <literal>&lt;&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;&gt;</>
      <literal>&lt;&lt;</literal>
     </entry>
    </row>
    <row>
     <entry><literal>int4_minmax_ops</literal></entry>
     <entry><type>integer</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
    <row>
     <entry><literal>interval_minmax_ops</literal></entry>
     <entry><type>interval</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
    <row>
     <entry><literal>macaddr_minmax_ops</literal></entry>
     <entry><type>macaddr</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
    <row>
     <entry><literal>name_minmax_ops</literal></entry>
     <entry><type>name</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
    <row>
     <entry><literal>numeric_minmax_ops</literal></entry>
     <entry><type>numeric</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
    <row>
     <entry><literal>pg_lsn_minmax_ops</literal></entry>
     <entry><type>pg_lsn</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
    <row>
     <entry><literal>oid_minmax_ops</literal></entry>
     <entry><type>oid</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
    <row>
     <entry><literal>range_inclusion_ops</></entry>
     <entry><type>any range type</type></entry>
     <entry>
      <literal>&lt;&lt;</>
      <literal>&amp;&lt;</>
      <literal>&amp;&amp;</>
      <literal>&amp;&gt;</>
      <literal>&gt;&gt;</>
      <literal>@&gt;</>
      <literal>&lt;@</>
      <literal>-|-</>
      <literal>=</>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;</literal>
      <literal>&gt;=</literal>
     </entry>
    </row>
    <row>
     <entry><literal>float4_minmax_ops</literal></entry>
     <entry><type>real</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
    <row>
     <entry><literal>reltime_minmax_ops</literal></entry>
     <entry><type>reltime</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
    <row>
     <entry><literal>int2_minmax_ops</literal></entry>
     <entry><type>smallint</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
    <row>
     <entry><literal>text_minmax_ops</literal></entry>
     <entry><type>text</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
    <row>
     <entry><literal>tid_minmax_ops</literal></entry>
     <entry><type>tid</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
    <row>
     <entry><literal>timestamp_minmax_ops</literal></entry>
     <entry><type>timestamp without time zone</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
    <row>
     <entry><literal>timestamptz_minmax_ops</literal></entry>
     <entry><type>timestamp with time zone</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
    <row>
     <entry><literal>time_minmax_ops</literal></entry>
     <entry><type>time without time zone</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
    <row>
     <entry><literal>timetz_minmax_ops</literal></entry>
     <entry><type>time with time zone</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
    <row>
     <entry><literal>uuid_minmax_ops</literal></entry>
     <entry><type>uuid</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
   </tbody>
  </tgroup>
 </table>
</sect1>

<sect1 id="brin-extensibility">
 <title>可扩展性</title>

 <para>
  <acronym>BRIN</acronym>接口具有高级别的抽象，
  要求访问方法实现者只实现被访问的数据类型的语义。<acronym>BRIN</acronym>
  层本身负责并发，记录和搜索索引结构。
 </para>

 <para>
  获取<acronym>BRIN</acronym>访问方法所需的工作是实现一些用户定义的方法，
  它们定义存储在索引中的摘要值的行为以及它们与扫描键交互的方式。
  简而言之，<acronym>BRIN</acronym>将可扩展性与通用性，代码重用和干净的接口相结合。
 </para>

 <para>
  <acronym>BRIN</acronym>的操作符类必须提供四种方法：

  <variablelist>
   <varlistentry>
    <term><function>BrinOpcInfo *opcInfo(Oid type_oid)</></term>
    <listitem>
     <para>
      返回有关索引列的摘要数据的内部信息。
      返回值必须指向palloc'd <structname>BrinOpcInfo</>，它具有以下定义：
<programlisting>
typedef struct BrinOpcInfo
{
    /* Number of columns stored in an index column of this opclass */
    uint16      oi_nstored;

    /* Opaque pointer for the opclass' private use */
    void       *oi_opaque;

    /* Type cache entries of the stored columns */
    TypeCacheEntry *oi_typcache[FLEXIBLE_ARRAY_MEMBER];
} BrinOpcInfo;
</programlisting>
      <structname>BrinOpcInfo</>.<structfield>oi_opaque</>
      可以由操作符类例程用来在索引扫描期间在支持过程之间传递信息。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><function>bool consistent(BrinDesc *bdesc, BrinValues *column,
       ScanKey key)</function></term>
    <listitem>
     <para>
      返回ScanKey是否与范围的给定索引值一致。
      要使用的属性编号作为扫描键的一部分传递。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><function>bool addValue(BrinDesc *bdesc, BrinValues *column,
       Datum newval, bool isnull)</function></term>
    <listitem>
     <para>
      给定索引元组和索引值，修改元组的指示属性，使得它另外表示新值。
      如果对元组进行了任何修改，则返回<literal>true</literal>。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><function>bool unionTuples(BrinDesc *bdesc, BrinValues *a,
       BrinValues *b)</function></term>
    <listitem>
     <para>
      Consolidates two index tuples. Given two index tuples, modifies the
      indicated attribute of the first of them so that it represents both tuples.
      The second tuple is not modified.
      合并两个索引元组。给定两个索引元组，修改它们中的第一个的指定属性，
      使得它表示两个元组。第二个元组不被修改。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  核心分布包括对两种类型的运算符类的支持：最小最大和包含。适当时，
  将为核心数据类型运送使用它们的运算符类定义。
  用户可以使用等效定义为其他数据类型定义附加运算符类，而无需编写任何源代码; 
  正在宣布的适当目录条目就足够了。注意，关于运算符策略的语义的假设嵌入在支持过程的源代码中。
 </para>

 <para>
  实现完全不同的语义的操作符类也是可能的，提供上述四个主要支持过程的实现。
  请注意，不能保证主要版本之间的向后兼容性：例如，
  在较新的版本中可能需要额外的支持过程。
 </para>

 <para>
  要为实现完全有序集的数据类型编写运算符类，
  可以使用minmax支持过程以及相应的运算符，
  如<xref linkend="brin-extensibility-minmax-table">中所示。
  所有运算符类成员（过程和运算符）都是必需的。
 </para>

 <table id="brin-extensibility-minmax-table">
  <title>最小最大运算符类的过程和支持编号</title>
  <tgroup cols="2">
   <thead>
    <row>
     <entry>运算符类成员</entry>
     <entry>对象</entry>
    </row>
   </thead>
   <tbody>
    <row>
     <entry>支持过程 1</entry>
     <entry>内部函数 <function>brin_minmax_opcinfo()</function></entry>
    </row>
    <row>
     <entry>支持过程 2</entry>
     <entry>内部函数 <function>brin_minmax_add_value()</function></entry>
    </row>
    <row>
     <entry>支持过程 3</entry>
     <entry>内部函数 <function>brin_minmax_consistent()</function></entry>
    </row>
    <row>
     <entry>支持过程 4</entry>
     <entry>内部函数 <function>brin_minmax_union()</function></entry>
    </row>
    <row>
     <entry>运算符策略 1</entry>
     <entry>小于运算符</entry>
    </row>
    <row>
     <entry>运算符策略 2</entry>
     <entry>小于等于运算符</entry>
    </row>
    <row>
     <entry>运算符策略 3</entry>
     <entry>等于运算符</entry>
    </row>
    <row>
     <entry>运算符策略 4</entry>
     <entry>大于等于运算符</entry>
    </row>
    <row>
     <entry>运算符策略 5</entry>
     <entry>大于运算符</entry>
    </row>
   </tbody>
  </tgroup>
 </table>

 <para>
  要为包含在另一个类型中的值的复杂数据类型编写运算符类，
  可以使用包含支持过程以及相应的运算符，
  如<xref linkend="brin-extensibility-inclusion-table">中所示。
  它只需要一个附加功能，可以用任何语言编写。可以为其他功能定义更多功能。
  所有运算符都是可选的。一些操作符需要其他操作符，如表中的依赖关系所示。
 </para>

 <table id="brin-extensibility-inclusion-table">
  <title>包含操作符类的过程和支持编号</title>
  <tgroup cols="3">
   <thead>
    <row>
     <entry>操作符类成员</entry>
     <entry>对象</entry>
     <entry>依赖</entry>
    </row>
   </thead>
   <tbody>
    <row>
     <entry>支持过程 1</entry>
     <entry>内部函数 <function>brin_inclusion_opcinfo()</function></entry>
     <entry></entry>
    </row>
    <row>
     <entry>支持过程 2</entry>
     <entry>内部函数 <function>brin_inclusion_add_value()</function></entry>
     <entry></entry>
    </row>
    <row>
     <entry>支持过程 3</entry>
     <entry>内部函数 <function>brin_inclusion_consistent()</function></entry>
     <entry></entry>
    </row>
    <row>
     <entry>支持过程 4</entry>
     <entry>内部函数 <function>brin_inclusion_union()</function></entry>
     <entry></entry>
    </row>
    <row>
     <entry>支持过程 11</entry>
     <entry>合并两个元素的函数</entry>
     <entry></entry>
    </row>
    <row>
     <entry>支持过程 12</entry>
     <entry>检查两个元素是否可合并的可选函数</entry>
     <entry></entry>
    </row>
    <row>
     <entry>支持过程 13</entry>
     <entry>检查一个元素是否包含在另一个中的可选函数</entry>
     <entry></entry>
    </row>
    <row>
     <entry>支持过程 14</entry>
     <entry>检查一个元素是否为空的可选函数</entry>
     <entry></entry>
    </row>
    <row>
     <entry>操作符策略 1</entry>
     <entry>left-of运算符</entry>
     <entry>操作符策略 4</entry>
    </row>
    <row>
     <entry>操作符策略 2</entry>
     <entry>does-not-extend-to-the-right-of运算符</entry>
     <entry>操作符策略 5</entry>
    </row>
    <row>
     <entry>操作符策略 3</entry>
     <entry>overlaps运算符</entry>
     <entry></entry>
    </row>
    <row>
     <entry>操作符策略 4</entry>
     <entry>right-of运算符</entry>
     <entry>操作符策略 2</entry>
    </row>
    <row>
     <entry>操作符策略 5</entry>
     <entry>does-not-extend-to-the-right-of运算符</entry>
     <entry>操作符策略 1</entry>
    </row>
    <row>
     <entry>操作符策略 6, 18</entry>
     <entry>same-as-or-equal-to运算符</entry>
     <entry>操作符策略 7</entry>
    </row>
    <row>
     <entry>操作符策略 7, 13, 16, 24, 25</entry>
     <entry>contains-or-equal-to运算符</entry>
     <entry></entry>
    </row>
    <row>
     <entry>操作符策略 8, 14, 26, 27</entry>
     <entry>is-contained-by-or-equal-to运算符</entry>
     <entry>操作符策略 3</entry>
    </row>
    <row>
     <entry>操作符策略 9</entry>
     <entry>does-not-extend-above运算符</entry>
     <entry>操作符策略 11</entry>
    </row>
    <row>
     <entry>操作符策略 10</entry>
     <entry>is-below运算符</entry>
     <entry>操作符策略 12</entry>
    </row>
    <row>
     <entry>操作符策略 11</entry>
     <entry>is-above运算符</entry>
     <entry>操作符策略 9</entry>
    </row>
    <row>
     <entry>操作符策略 12</entry>
     <entry>does-not-extend-below运算符</entry>
     <entry>操作符策略 10</entry>
    </row>
    <row>
     <entry>操作符策略 20</entry>
     <entry>less-than运算符</entry>
     <entry>操作符策略 4</entry>
    </row>
    <row>
     <entry>操作符策略 21</entry>
     <entry>less-than-or-equal-to运算符</entry>
     <entry>操作符策略 4</entry>
    </row>
    <row>
     <entry>操作符策略 22</entry>
     <entry>greater-than运算符</entry>
     <entry>操作符策略 1</entry>
    </row>
    <row>
     <entry>操作符策略 23</entry>
     <entry>greater-than-or-equal-to运算符</entry>
     <entry>操作符策略 1</entry>
    </row>
   </tbody>
  </tgroup>
 </table>

 <para>
    支持程序编号1-10保留用于BRIN内部函数，因此SQL级别函数以编号11开始。
    支持函数编号11是构建索引所需的主要函数。
    它应该接受与opclass具有相同数据类型的两个参数，并返回它们的并集。
    如果使用<literal>STORAGE</>参数定义，则包含opclass可以存储具有不同数据类型的并集。
    并集函数的返回值应与<literal>STORAGE</>数据类型匹配。
 </para>

 <para>
    支持过程编号12和14用于支持内置数据类型的不规则行为。
    程序编号12用于支持来自不可合并的不同系列的网络地址。
    程序编号14用于支持空范围。程序编号13是可选的，也是推荐的一个，
    它允许新值在传递到并集函数之前执行检查。
    由于BRAIN框架可以在并集不更改时快速执行某些操作，
    因此使用这些函数可以提高索引性能。
 </para>

 <para>
    最小最大和包含操作符类都支持跨数据类型的操作符，
    尽管这些依赖关系变得更加复杂。
    最小最大操作符类需要一组完整的操作符来定义两个具有相同数据类型的参数。
    它允许通过定义额外的运算符集来支持附加的数据类型。
    包含操作符类运算符策略依赖于另一个运算符策略，
    如<xref linkend="brin-extensibility-inclusion-table">中所示，
    或与其自身相同的运算符策略。它们需要使用<literal>STORAGE</>
    数据类型作为支持的运算符的左侧参数，
    而将其他支持的数据类型作为右侧参数来定义依赖性运算符。
    请参见<literal>float4_minmax_ops</>作为最小最大的示例，
    和<literal>box_inclusion_ops</>作为包含示例。
 </para>
</sect1>
</chapter>
